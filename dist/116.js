"use strict";(self.webpackChunkaxds_wp_plugins=self.webpackChunkaxds_wp_plugins||[]).push([[116],{4116:(t,e,i)=>{i.r(e),i.d(e,{default:()=>z});var s,o,a=i(5975),r=i(1454),n=i(1907),l=i(2543),d=i(1521),v=i(8848),h=i(6325),c=i(5969),u=i(5900),g=i(90),x=i(8640),y=i(4439),p=i(4319),m=i(3150),f=i(1321),A=i(544);function S(t,e,i,s){return new(i||(i=Promise))((function(o,a){function r(t){try{l(s.next(t))}catch(t){a(t)}}function n(t){try{l(s.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,n)}l((s=s.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError,function(t){t.x="x",t.y="y",t.z="z",t.color="color"}(s||(s={})),function(t){t.line="line",t.area="area",t.scatter="scatter",t.box="box",t.bar="bar",t.time_series_bar="time_series_bar",t.stacked="stacked",t.anomaly="anomaly",t.curtain="curtain",t.curtain_anomaly="curtain_anomaly",t.seasonal="seasonal",t.radial="radial",t.pie="pie",t.windrose="windrose"}(o||(o={}));class b extends a.ZC{constructor(t){super(t),this.scrubSettingsDefaults={enabled:!0,axis:s.x},this.legendSettingsDefaults={hide:!1,axis:s.y},this.id=t.id,this.type=t.type,this.chart=t.chart,this.dimensions=t.dimensions,this.style=t.style,this.scrubbing=t.scrubbing,this.onDataLoad=t.onDataLoad,this.axisSettings=t.axisSettings,this.scrubSettings=Object.assign(Object.assign({},this.scrubSettingsDefaults),t.scrubSettings),this.interpolate=t.interpolate,this.legendSettings=Object.assign(Object.assign({},this.legendSettingsDefaults),t.legendSettings),this.runtime={}}createAccessorGroupingsAtAxis(t,e){var i=this.getAxisSetting(e),s=void 0!==i.accessProperties?i.accessProperties:{},o=Object.keys(t).filter((t=>t.startsWith(e))),a=Object.fromEntries(o.map((e=>[e,t[e]])));return Object.keys(s).forEach((e=>{var i=s[e],o=t[i];void 0!==o&&(a[e]=o)})),a}getAxisSetting(t){if(void 0===this.axisSettings)return{};var e=this.axisSettings[t];return void 0===e?{}:e}getDomainAccessorAtAxis(t){var e,i,s,o,a,r,n=void 0!==(null===(s=null===(i=null===(e=this.runtime)||void 0===e?void 0:e.data)||void 0===i?void 0:i.parsed)||void 0===s?void 0:s.domainAccessors)?this.runtime.data.parsed.domainAccessors:{},l=void 0!==(null===(r=null===(a=null===(o=this.runtime)||void 0===o?void 0:o.data)||void 0===a?void 0:a.parsed)||void 0===r?void 0:r.accessors)?this.runtime.data.parsed.accessors:{};return void 0!==n[t]?n[t]:void 0!==l[t]?l[t]:e=>"number"==typeof e||e instanceof Date||"string"==typeof e?e:e[t]}getAvailableDomainAccessors(){var t,e,i,s,o,a,r,n,l;return void 0!==(null===(i=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===i?void 0:i.domainAccessors)?this.runtime.data.parsed.domainAccessors:void 0!==(null===(a=null===(o=null===(s=this.runtime)||void 0===s?void 0:s.data)||void 0===o?void 0:o.parsed)||void 0===a?void 0:a.accessors)?null===(l=null===(n=null===(r=this.runtime)||void 0===r?void 0:r.data)||void 0===n?void 0:n.parsed)||void 0===l?void 0:l.accessors:{}}getDomainAccessorsAtAxis(t){var e=this.getAvailableDomainAccessors();return this.createAccessorGroupingsAtAxis(e,t)}getAvailableAccessors(){var t,e,i;return void 0!==(null===(i=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===i?void 0:i.accessors)?this.runtime.data.parsed.accessors:{}}getAccessorsAtAxis(t){var e=this.getAvailableAccessors();return this.createAccessorGroupingsAtAxis(e,t)}getAccessorAtAxis(t){var e=this.getAccessorsAtAxis(t)[t];if(void 0!==e)return e;var i=this.getAvailableAccessors();return void 0!==i[t]?i[t]:void 0}getDomain(t){var e;return S(this,void 0,void 0,(function*(){var i=yield this.getData(),s=void 0!==(null===(e=null==i?void 0:i.parsed)||void 0===e?void 0:e.data)?i.parsed.data:[],o=this.getDomainAccessorAtAxis(t),a=s.map((t=>o(t))).flat().filter((t=>null!=t));return(0,r.A)(a)}))}getXDomain(){return S(this,void 0,void 0,(function*(){return yield this.getDomain("x")}))}getYDomain(){return S(this,void 0,void 0,(function*(){return yield this.getDomain("y")}))}draw(){return S(this,void 0,void 0,(function*(){this.data=yield this.getData()}))}onLegendReady(t){this.chart.emitPlotLegendReady(this.id,t)}onScrub(t){this.chart.emitPlotScrub(this.id,t)}onScrubEnd(){this.chart.emitPlotScrubEnd(this.id)}destroy(){}}class k{constructor(t){this.plots=t.plots.map((t=>Object.assign({},t))),this.settings=t.settings,this.element=t.element,this.onChartDrew=t.onChartDrew,this.onPlotDataLoad=t.onPlotDataLoad,this.onPlotLegendReady=t.onPlotLegendReady,this.onPlotScrub=t.onPlotScrub,this.onPlotScrubEnd=t.onPlotScrubEnd,this.runtime={prevWidth:0,prevHeight:0}}emitPlotLegendReady(t,e){void 0!==this.onPlotLegendReady&&this.onPlotLegendReady(t,e)}emitPlotScrub(t,e){void 0!==this.onPlotScrub&&this.onPlotScrub(t,e)}emitPlotScrubEnd(t){void 0!==this.onPlotScrubEnd&&this.onPlotScrubEnd(t)}onError(t){}onResize(t,e){console.log("RESIZE!"),console.log(this)}getWidth(){return"auto"===this.settings.width?null!=this.element?this.element.clientWidth:400:this.settings.width}onDraw(){}getDomainForPlotImplementations(t,e){var i,s;return S(this,void 0,void 0,(function*(){var o=null===(s=null===(i=this.settings)||void 0===i?void 0:i.axes)||void 0===s?void 0:s[String(e)];if(void 0!==(null==o?void 0:o.domain))return o.domain;var a=yield Promise.all(t.map((t=>S(this,void 0,void 0,(function*(){return yield t.getDomain(e)})))));return(0,r.A)(a.flat())}))}reversePlotAxis(t,e){return!0===t.getAxisSetting(e).reverse}getDimensionAxisParam(t,e){var i=t.dimensions[e],s=t.getAxisSetting(e),o=e;return void 0!==s.parameter?o=s.parameter:void 0!==i&&(void 0!==i.parameter?o=i.parameter:void 0!==i.property?o=i.property:void 0!==i.properties&&(o=i.properties.join(","))),o}getPlotImplementationGroups(t,e){var i=(0,l.groupBy)(t,(t=>{var i=this.getDimensionAxisParam(t,e);return"".concat(i).concat(this.reversePlotAxis(t,e)?".reverse":"")})),s={};return Object.keys(i).forEach((t=>{var o={plots:i[t],reverse:this.reversePlotAxis(i[t][0],e),parameter:this.getDimensionAxisParam(i[t][0],e)};s[t]=o})),s}getXRange(t){return[0,t]}getYRange(t){return[t,0]}getChartWidth(){var t=this.getYAxesWidth();return this.getWidth()-t-this.settings.margin.right}getXAxesGroups(){return void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"x"):{}}getChartHeight(){var t=this.getXAxesGroups(),e=Object.keys(t).length;return this.settings.height-this.settings.margin.top-this.settings.margin.bottom*e}getYAxesWidth(){var t=void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"y"):{};return this.settings.margin.left*Object.keys(t).length}debouncedResize(){var t;void 0!==(null===(t=this.runtime.resizeEventHandler)||void 0===t?void 0:t.cancel)&&(this.runtime.resizeEventHandler.cancel(),console.log("cancel")),this.runtime.resizeEventHandler=(0,l.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),this.runtime.resizeEventHandler()}init(){var t,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return S(this,void 0,void 0,(function*(){this.runtime.resizeEventHandler=(0,l.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),window.addEventListener("resize",(()=>{this.debouncedResize()})),null===(t=this.plotImplementations)||void 0===t||t.forEach((t=>{t.destroy()})),this.plotImplementations=this.createPlots();var{margin:i}=this.settings,o=this.getXAxesGroups(),a=this.getChartHeight(),r=this.getPlotImplementationGroups(this.plotImplementations,"y"),n=[],d=this.getYRange(a);yield Promise.all(Object.keys(r).map(((t,e)=>S(this,void 0,void 0,(function*(){var o=r[t],a=o.plots,l={scale:{domain:yield this.getDomainForPlotImplementations(r[t].plots,s.y),range:o.reverse?d.slice().reverse():d},plots:a,key:t,offset:{x:i.left+i.left*e,y:i.top}};a.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.y=l})),n.push(l)}))))),this.showYAxes(n);var v=this.getYAxesWidth(),h=this.getChartWidth(),c=this.getXRange(h),u=[];yield Promise.all(Object.keys(o).map(((t,e)=>S(this,void 0,void 0,(function*(){var r=o[t],n=r.plots,l={scale:{domain:yield this.getDomainForPlotImplementations(n,s.x),range:r.reverse?c.slice().reverse():c},plots:n,key:t,offset:{x:v,y:i.top+a+i.bottom*e}};n.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.x=l})),u.push(l)}))))),this.showXAxes(u),e&&(yield this.draw())}))}showAxes(t,e){}showYAxes(t){}showXAxes(t){}adjustYAxis(){}draw(){return S(this,void 0,void 0,(function*(){var t=this.plotImplementations;void 0!==t&&(yield Promise.all(t.map((t=>S(this,void 0,void 0,(function*(){yield t.draw()}))))),void 0!==this.onChartDrew&&this.onChartDrew())}))}destroy(){}createPlots(){return this.plots.map((t=>this.createPlot(t)))}getPlotImplementationProps(t){return Object.assign(Object.assign({},t),{chart:this,onDataLoad:this.onPlotDataLoad})}createPlot(t){return new b(this.getPlotImplementationProps(t))}}class D extends b{}class C extends D{constructor(){super(...arguments),this.onMouseScrub=t=>{var e=this.chart;if(void 0!==e.onPlotScrub){var i=this.getAccessorAtAxis("x"),s=this.getAccessorAtAxis("y");if(void 0!==this.scrubSettings.axis&&void 0!==this.xScale&&void 0!==this.yScale&&void 0!==i&&void 0!==s&&void 0!==this.parsedData&&void 0!==this.offset){var o=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,i,s,this.parsedData,this.offset);void 0!==o&&void 0!==o.x&&(this.onScrub(o),e.drawPlotScrubbing(this.id,o,this.style,this.scrubSettings))}}},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}draw(){var t,e,i,s,o,a,r,n,l,d,h,c,u,g,y=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var p=void 0!==this.style?this.style:{};if(void 0===this.parsedData){var m=yield this.getData();this.emitDataLoad(m),this.parsedData=null===(t=null==m?void 0:m.parsed)||void 0===t?void 0:t.data}var f=this.getAccessorAtAxis("x"),A=this.getAccessorAtAxis("y"),S=this.chart,b=S.getCanvasContext();if(null!==b){var k=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.scale,D=null===(o=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.y)||void 0===o?void 0:o.scale;if(void 0!==k&&void 0!==D&&void 0!==this.parsedData&&void 0!==f&&void 0!==A){this.offset={x:void 0!==(null===(n=null===(r=null===(a=null==this?void 0:this.axes)||void 0===a?void 0:a.x)||void 0===r?void 0:r.offset)||void 0===n?void 0:n.x)?this.axes.x.offset.x:0,y:void 0!==(null===(h=null===(d=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.y)||void 0===d?void 0:d.offset)||void 0===h?void 0:h.y)?this.axes.y.offset.y:0},this.xScale=S.getD3XScale(k),this.yScale=S.getD3YScale(D),b.strokeStyle=this.getStrokeStyle(),b.lineWidth=this.getLineWidth(),b.setLineDash([]),b.lineCap="square";var C=(0,x.A)().x((t=>{if(void 0===this.xScale||void 0===this.offset)return 0;var e=f(t),i=this.xScale(e);return void 0===i?0:i+this.offset.x})).y((t=>{if(void 0===this.yScale||void 0===this.offset)return 0;var e=A(t),i=this.yScale(e);return void 0===i?0:i})).defined((t=>{var e=A(t);return!(null==e||isNaN(+e))}));if("step"===this.interpolate?C.curve(v.GZz):"cardinal"===this.interpolate?C.curve(v.y8u):"catmullRom"===this.interpolate?C.curve(v.oDi):"monotone"===this.interpolate?C.curve(v.nVG):"natural"===this.interpolate&&C.curve(v.Xf2),C.context(b),b.beginPath(),void 0!==(null==p?void 0:p.strokeDash)&&b.setLineDash(p.strokeDash),C(this.parsedData),b.stroke(),void 0!==this.legendSettings.axis&&void 0!==this.axes&&(null===(c=this.legendSettings.hide)||void 0===c||!c)){var E=this.axes[this.legendSettings.axis];void 0!==E&&y.onLegendReady.call(this,[{id:E.key,label:null!==(g=null!==(u=S.getAxisLabel(E,this.legendSettings.axis))&&void 0!==u?u:E.label)&&void 0!==g?g:E.key,style:{backgroundColor:b.strokeStyle}}])}this.setupScrubbing()}}}))}setupScrubbing(){var t,e,i,s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.addEventListener("mouseleave",this.onScrubEnd))}getStrokeStyle(){var t=void 0!==this.style?this.style:{};return void 0!==t.strokeColor?t.strokeColor:"#333"}getLineWidth(){var t=void 0!==this.style?this.style:{};return void 0!==t.strokeWidth?t.strokeWidth:1}emitDataLoad(t){void 0!==this.onDataLoad&&this.onDataLoad({plotId:this.id,data:t})}destroy(){var t,e,i,s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.removeEventListener("mouseleave",this.onScrubEnd))}}class E extends D{getMaxAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)["".concat(t,"1")]}getMinAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)["".concat(t,"0")]}getDomainAccessor(t){var e=this.getMinAccessorAtAxis(t),i=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==i)return t=>[e(t),i(t)];var s=this.getAccessorAtAxis(t);return void 0!==s?s:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:(0,n.A)(Object.values(t))}draw(){var t,e,i,s,o,a,r,n,l,d,h,c,u,g,x=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var p=void 0!==this.style?this.style:{},m=yield this.getData(),f=null===(t=null==m?void 0:m.parsed)||void 0===t?void 0:t.data,A=this.getAccessorsAtAxis("x"),S=this.getAccessorAtAxis("x"),b=A.x0,k=A.x1,D=this.getAccessorsAtAxis("y"),C=this.getAccessorAtAxis("y"),E=D.y0,P=D.y1,w={x:void 0!==(null===(s=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.offset)||void 0===s?void 0:s.x)?this.axes.x.offset.x:0,y:void 0!==(null===(r=null===(a=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===a?void 0:a.offset)||void 0===r?void 0:r.y)?this.axes.y.offset.y:0},L=this.chart,R=L.getCanvasContext();if(null!==R){var M=null===(l=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===l?void 0:l.scale,O=null===(h=null===(d=null==this?void 0:this.axes)||void 0===d?void 0:d.y)||void 0===h?void 0:h.scale;if(void 0===M||void 0===O||void 0===f||void 0===S&&void 0===b&&void 0===k||void 0===C&&void 0===E&&void 0===P)console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");else{var W=L.getD3XScale(M),j=L.getD3YScale(O),z=(t,e,i)=>s=>{var o=t(s),a=e(o);return void 0===a?0:a+i};R.fillStyle=void 0!==p.fill?p.fill:"#EDEDED";var Y,X=(0,y.A)();void 0!==b&&void 0!==k?(X.x0(z(b,W,w.x)),X.x1(z(k,W,w.x))):void 0!==S&&X.x(z(S,W,w.x)),void 0!==E&&void 0!==P?(X.y0(z(E,j,.01)),X.y1(z(P,j,.01)),X.defined((Y=P,t=>{var e=Y(t);return!(null==e||isNaN(+e))}))):void 0!==C&&X.y(z(C,j,.01)),"step"===this.interpolate?X.curve(v.GZz):"cardinal"===this.interpolate?X.curve(v.y8u):"catmullRom"===this.interpolate?X.curve(v.oDi):"monotone"===this.interpolate?X.curve(v.nVG):"natural"===this.interpolate&&X.curve(v.Xf2),X.context(R),R.beginPath(),X(f),R.fill(),void 0===(null===(c=this.axes)||void 0===c?void 0:c.y)||null!==(u=this.legendSettings.hide)&&void 0!==u&&u||x.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(g=L.getAxisLabel(this.axes.y,"y"))&&void 0!==g?g:this.axes.y.key,style:{backgroundColor:R.fillStyle}}])}}}))}}var P={Line:C,Area:E,Scatter:class extends D{constructor(){super(...arguments),this.circleClass="".concat(this.id,"-scrub-circle"),this.onMouseScrub=t=>{var e=this.chart;if(void 0!==e.onPlotScrub){var i=this.getAccessorAtAxis("x"),s=this.getAccessorAtAxis("y");if(void 0!==this.scrubSettings.axis&&void 0!==this.xScale&&void 0!==this.yScale&&void 0!==i&&void 0!==s&&void 0!==this.parsedData&&void 0!==this.offset){var o=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,i,s,this.parsedData,this.offset);void 0!==o&&void 0!==o.x&&(this.onScrub(o),e.drawPlotScrubbing(this.id,o,this.style,this.scrubSettings))}}},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}draw(){var t,e,i,s,o,a,r,n,l,d,v,h,c,u,g=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var x=void 0!==this.style?this.style:{},y=yield this.getData();this.parsedData=null===(t=null==y?void 0:y.parsed)||void 0===t?void 0:t.data;var p=this.getAccessorAtAxis("x"),m=this.getAccessorAtAxis("y"),f=this.chart,A=f.getCanvasContext();if(null!==A){var S=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.scale,b=null===(o=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.y)||void 0===o?void 0:o.scale;if(void 0!==S&&void 0!==b&&void 0!==this.parsedData&&void 0!==p&&void 0!==m){this.offset={x:void 0!==(null===(n=null===(r=null===(a=null==this?void 0:this.axes)||void 0===a?void 0:a.x)||void 0===r?void 0:r.offset)||void 0===n?void 0:n.x)?this.axes.x.offset.x:0,y:void 0!==(null===(v=null===(d=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.y)||void 0===d?void 0:d.offset)||void 0===v?void 0:v.y)?this.axes.y.offset.y:0},this.xScale=f.getD3XScale(S);var k=t=>{if(void 0===this.xScale||void 0===this.offset)return 0;var e=p(t),i=this.xScale(e);return void 0===i?0:i+this.offset.x};this.yScale=f.getD3YScale(b);var D=t=>{if(void 0===this.yScale||void 0===this.offset)return 0;var e=m(t),i=this.yScale(e);return void 0===i?0:i};A.strokeStyle=void 0!==x.strokeColor?x.strokeColor:"#FFF";var C=void 0!==x.radius?x.radius:2;A.lineWidth=void 0!==x.strokeWidth||void 0!==x.strokeColor?(void 0!==x.strokeWidth?x.strokeWidth:1)+C:0,A.fillStyle=void 0!==x.fill?x.fill:"#666",this.parsedData.forEach((t=>{(t=>{var e=m(t);return!(null==e||isNaN(+e))})(t)&&(A.beginPath(),A.arc(k(t),D(t),C,0,2*Math.PI),A.stroke(),A.fill())})),void 0===(null===(h=this.axes)||void 0===h?void 0:h.y)||null!==(c=this.legendSettings.hide)&&void 0!==c&&c||g.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(u=f.getAxisLabel(this.axes.y,"y"))&&void 0!==u?u:this.axes.y.key,style:{backgroundColor:A.fillStyle,border:"1px solid ".concat(A.strokeStyle)}}]),this.setupScrubbing()}}}))}setupScrubbing(){var t,e,i,s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.addEventListener("mouseleave",this.onScrubEnd))}destroy(){var t,e,i,s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.removeEventListener("mouseleave",this.onScrubEnd))}},Bar:class extends D{getMaxAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)["".concat(t,"1")]}getMinAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)["".concat(t,"0")]}getDomainAccessor(t){var e=this.getMinAccessorAtAxis(t),i=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==i)return t=>[e(t),i(t)];var s=this.getAccessorAtAxis(t);return void 0!==s?s:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:(0,n.A)(Object.values(t))}draw(){var t,e,i,s,o,a,r,n,l,d,v,h,c,u,g=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var x=void 0!==this.style?this.style:{},y=yield this.getData(),p=null===(t=null==y?void 0:y.parsed)||void 0===t?void 0:t.data,m=this.getAccessorsAtAxis("x"),f=this.getAccessorAtAxis("x"),A=m.x0,S=m.x1,b=this.getAccessorsAtAxis("y"),k=this.getAccessorAtAxis("y"),D=b.y0,C=b.y1,E={x:void 0!==(null===(s=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.offset)||void 0===s?void 0:s.x)?this.axes.x.offset.x:0,y:void 0!==(null===(r=null===(a=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===a?void 0:a.offset)||void 0===r?void 0:r.y)?this.axes.y.offset.y:0},P=this.chart,w=P.getCanvasContext();if(null!==w){var L=null===(l=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===l?void 0:l.scale,R=null===(v=null===(d=null==this?void 0:this.axes)||void 0===d?void 0:d.y)||void 0===v?void 0:v.scale;if(void 0===L||void 0===R||void 0===p||void 0===f&&void 0===A&&void 0===S||void 0===k&&void 0===D&&void 0===C)console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");else{var M=P.getD3XScale(L),O=P.getD3YScale(R),W=(t,e,i)=>s=>{var o=t(s),a=e(o);return void 0===a?0:a+i};w.fillStyle=void 0!==x.fill?x.fill:"#EDEDED";var j={};void 0!==A&&void 0!==S?(j.x0=W(A,M,E.x),j.x1=W(S,M,E.x)):void 0!==f&&(j.x=W(f,M,E.x)),void 0!==D&&void 0!==C?(j.y0=W(D,O,.01),j.y1=W(C,O,.01)):void 0!==k&&(j.y=W(k,O,.01)),w.beginPath();var z=!(void 0===j.x0||void 0===j.x1),Y=Math.abs(R.range[1]-R.range[0]),X=Math.abs(L.range[1]-L.range[0]),I=p.filter((t=>z?+j.y(t)>=R.range[0]&&+j.y(t)<=R.range[1]:+j.x(t)>=L.range[0]+E.x&&+j.x(t)<=L.range[1]+E.x)),B=Math.round(((z?Y:X)-I.length)/I.length),N=Math.max(1,B-.2*B);I.forEach(((t,e)=>{if(z){var i=j.x0(t);if(null!=i){var s=Math.abs(j.x1(t)-i),o=j.y(t),a=N;w.rect(i,o,s,a)}}else{var r=j.y0(t),n=j.y1(t);if(null!=r&&null!=n){var l=j.x(t)-N/2;w.fillRect(l,r,N,n-r)}}})),w.fill(),void 0===(null===(h=this.axes)||void 0===h?void 0:h.y)||null!==(c=this.legendSettings.hide)&&void 0!==c&&c||g.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(u=P.getAxisLabel(this.axes.y,"y"))&&void 0!==u?u:this.axes.y.key,style:{backgroundColor:w.fillStyle}}])}}}))}},CategoricalBar:class extends D{constructor(t){super(t),this.legendHeight=12,this.legendPaddingTop=8;var e=this.chart.getChartElements();void 0!==(null==e?void 0:e.svg)&&e.svg.style("z-index",20)}draw(){var t,e,i,s,o,a=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var r=yield this.getData(),n=null===(t=null==r?void 0:r.parsed)||void 0===t?void 0:t.data;if(void 0!==n){var l=this.getAccessorAtAxis("x"),d=null===(e=r.parsed)||void 0===e?void 0:e.accessors.y;if(void 0!==l&&void 0!==d){var h=null===(i=r.parsed)||void 0===i?void 0:i.accessors.y2,c=this.dimensions,u=c.y.property,g=c.y.label,x=this.dimensions.y2.property,y=this.dimensions.y2.label,p=this.chart,m=p.getChartElements();if(void 0!==m&&null!==m.svg&&void 0!==u&&void 0!==g){void 0!==m.svg.select("g")&&m.svg.select("g").remove();var{height:f}=p.settings,A=p.getWidth();A=Number(A);var S=void 0===x?0:1,b=24*S,k=36*S*S+b,D=(f=Number(f))-48-this.legendHeight-this.legendPaddingTop-4,C=A-36-24-k,E=A-C-k,P=A-k,w=n.map((t=>l(t))),L=[u];void 0!==x&&void 0!==h&&L.push(x);var R=null!==(o=null===(s=this.style)||void 0===s?void 0:s.colors)&&void 0!==o?o:v.zt,M=v.UMr(R).domain(L),O=m.svg.insert("g"),W=this.getXScale(E,P,w),j=this.getYScale(D,4,n,d),z=this.getY2Scale(D,4,n,h),Y=this.getSubgroupScales(u,j,x,z),X=v.WH().domain(L).range([0,W.bandwidth()]).padding(.05);O.append("g").attr("width",C).attr("height",D).selectAll("g").data(n).enter().append("g").attr("transform",(t=>"translate(".concat(Number(W(l(t))),", 0)"))).selectAll("rect").data((t=>Object.keys(this.dimensions).filter((t=>"x"!==t)).map((e=>{var i,s,o,a,r;return{label:null!==(i=this.dimensions[e].label)&&void 0!==i?i:e,key:null!==(s=this.dimensions[e].property)&&void 0!==s?s:"",x:t[null!==(a=null===(o=this.dimensions.x)||void 0===o?void 0:o.property)&&void 0!==a?a:"x"],value:t[null!==(r=this.dimensions[e].property)&&void 0!==r?r:""]}})))).enter().append("rect").attr("x",(t=>Number(X(t.key)))).attr("y",(t=>Number(Y[t.key](t.value)))).attr("width",X.bandwidth()).attr("height",(t=>D-Number(Y[t.key](t.value)))).attr("fill",(t=>M(t.key))).classed("bar",!0).on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})),O.append("g").attr("transform","translate(0, ".concat(D,")")).call(v.l78(W)).selectAll("text").attr("text-anchor","end").attr("transform","rotate(-45)translate(-10, 0)"),O.append("g").call(v.V4s(j)).attr("transform","translate(".concat(60,", 0)")),void 0!==z&&O.append("g").call(v.eH3(z)).attr("transform","translate(".concat(A-k,", 0)")),O.append("text").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-1*D/2).attr("y",24).attr("font-weight",800).text(g),void 0!==y&&O.append("text").attr("text-anchor","middle").attr("transform","rotate(90)").attr("x",1*D/2).attr("y",-1*(A-b)).attr("font-weight",800).text(y),a.onLegendReady.call(this,Object.keys(this.dimensions).filter((t=>"x"!==t)).map((t=>{var e,i;return{id:t,label:null!==(e=this.dimensions[t].label)&&void 0!==e?e:t,style:{backgroundColor:void 0===this.dimensions[t].property?"":M(null!==(i=this.dimensions[t].property)&&void 0!==i?i:"")}}})))}}}}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.x},y:{position:t.offsetY,value:e.value}})}getXScale(t,e,i){return v.WH().domain(i).range([t,e]).padding(.25)}getYScale(t,e,i,s){return v.m4Y().domain([0,Number(v.T9B(i,(t=>s(t))))]).range([t,e])}getY2Scale(t,e,i,s){if(void 0!==s)return this.getYScale(t,e,i,s)}getSubgroupScales(t,e,i,s){var o={[t]:e};return void 0!==i&&void 0!==s&&(o[i]=s),o}}};!function(t,e){void 0===e&&(e={});var i=e.insertAt;if(t&&"undefined"!=typeof document){var s=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===i&&s.firstChild?s.insertBefore(o,s.firstChild):s.appendChild(o),o.styleSheet?o.styleSheet.cssText=t:o.appendChild(document.createTextNode(t))}}(".chart .axis .tick text{\n    fill:#333;\n    font-size:12px;\n}\n\n.chart .y-axis .radial-axis .tick text{\n    stroke:#FFF;\n    stroke-width:5px;\n    paint-order: stroke;\n    font-size:14px;\n    fill:#000;\n\n}\n\n.chart .axis .tick line,\n.chart .axis .tick circle{\n    stroke:#CCC;\n    stroke-width:.5px;\n}");class w extends k{updateD3AxisSettings(t,e){void 0!==e.ticks&&t.ticks(e.ticks),void 0!==e.tickFormat&&t.tickFormat(e.tickFormat)}getD3Scale(t){return t.domain[0]instanceof Date?(0,h.A)().domain(t.domain).range(t.range):(0,c.A)().domain(t.domain).range(t.range)}getD3YScale(t){return this.getD3Scale(t)}getD3XScale(t){return this.getD3Scale(t)}getYAxis(t,e,i){if(void 0===t.scale)return t=>t;var s=this.getD3YScale(t.scale),o=(0,g.V4)(s);this.updateD3AxisSettings(o,e);var a=t.scale.range[1]-t.scale.range[0],r=Math.min(a/2,void 0!==e.tickSpace?e.tickSpace:50);o.ticks(Math.floor(a/r));var n=this.getyAxisOffset(t);return t=>{var e=t.attr("transform","translate(".concat(n.x,",").concat(n.y,")")).call(o);return e.select(".domain").remove(),e}}getXAxis(t,e){if(void 0===t.scale)return t=>t;var i=this.getD3XScale(t.scale),s=(0,g.l7)(i);this.updateD3AxisSettings(s,e);var o=t.scale.range[1]-t.scale.range[0],a=Math.min(o/2,void 0!==e.tickSpace?e.tickSpace:50);void 0===e.ticks&&s.ticks(Math.floor(o/a));var r=this.getXAxisOffset(t);return t=>{var e=t.attr("transform","translate(".concat(r.x,",").concat(r.y+1,")")).call(s);return e.select(".domain").remove(),e}}adjustYAxis(){console.log("here");var t=this.getChartElements();if(void 0!==t){var{svg:e,canvas:i}=t,s=e.selectAll(".y-axis").nodes()[0];null!=s&&(console.log(s),e.selectAll(".y-axis").attr("translate","transform(100px, 100px)").attr("width",100),i.attr("width",this.getWidth()-45.7),i.attr("transform","translate(".concat(45.7,", 0)")))}}showYAxes(t){var e=this.getChartElements();if(void 0!==e){var{svg:i}=e;t.forEach(((t,e)=>{if(void 0!==(null==t?void 0:t.scale)){var s=this.getYAxis(t,{},e),o=(i.select(".y-axis").size()>0?i.select(".y-axis"):i.append("g").attr("class","y-axis axis")).append("g").call(s);if(t.plots.length!==this.plots.length){var a=this.getAxisColor(t);o.attr("stroke",a)}}})),"timeseries"===this.settings.layout&&this.showYLabelsForTimeSeries(t,this.plots)}}getAxisLabel(t,e){var i;return null===(i=t.plots[0])||void 0===i?void 0:i.dimensions[e].label}showYLabelsForTimeSeries(t,e){var i=void 0!==[o.line,o.scatter,o.seasonal,o.area].find((t=>t===e[0].type));if(0!==e.length&&i){var s=this.getChartElements();if(void 0!==s){var{svg:a}=s,r=a.select(".y-axis").size()>0?a.select(".y-axis"):a.append("g").attr("class","y-axis axis");t.forEach((t=>{var e;r.append("text").attr("class","y-label").attr("transform","rotate(-90)").style("text-anchor","middle").attr("x",-1*Math.floor(this.getChartHeight()/2)).attr("y","".concat(this.getyAxisOffset(t).x-24-3)).attr("font-size",".75rem").text(null!==(e=this.getAxisLabel(t,"y"))&&void 0!==e?e:"")}))}}}getXAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.height+this.settings.margin.top},t.offset)}getyAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.margin.top},t.offset)}showXAxes(t){var e=this.getChartElements();if(void 0!==e){var{svg:i}=e;t.forEach(((t,e)=>{var s;if(void 0!==(null==t?void 0:t.scale)){var o=void 0===this.settings.axes?{}:null!==(s=this.settings.axes[t.key])&&void 0!==s?s:{},a=this.getXAxis(t,o),r=(i.select(".x-axis").size()>0?i.select(".x-axis"):i.append("g").attr("class","x-axis axis")).append("g").call(a);if(t.plots.length!==this.plots.length){var n=this.getAxisColor(t);r.attr("stroke",n)}}}))}}getCanvasContext(){var t=this.getChartElements();if(void 0!==t){var{canvas:e}=t,i=e.node();if(null!=i)return i.getContext("2d")}return null}onResize(t,e){if("auto"===this.settings.width){var{height:i}=this.settings,s=this.getWidth(),o=this.getCanvasContext();if(!0===this.runtime.busy||null===o||void 0===this.chartElements||void 0===o||t===s&&e===i)console.log("skipping resize!");else{this.runtime.busy=!0;var{svg:a,canvas:r}=this.chartElements;a.selectAll("*").remove(),a.attr("viewBox",[0,0,s,i]).attr("width",s),o.clearRect(0,0,+r.attr("width"),+r.attr("height")),r.attr("width",s).attr("height",i),this.init(!0).then((()=>{this.runtime.busy=!1,console.log("drawn")})).catch((t=>{this.onError(t)}))}}}getChartElements(){if(void 0!==this.chartElements)return this.chartElements;var{height:t}=this.settings,e=this.getWidth(),i=(0,d.A)("svg").attr("viewBox",[0,0,e,t]).attr("width",e).attr("height",t).style("position","absolute").style("z-index",20),s=(0,d.A)("canvas").attr("width",e).attr("height",t).style("position","absolute");if(null!==s&&null!==i){this.chartElements={canvas:s,svg:i};var o=this.getCanvasContext();null!==o&&(o.imageSmoothingQuality="high")}return this.chartElements}drawPlotScrubbing(t,e,i,s){var o=this.getChartElements();if(void 0!==o&&void 0!==e&&void 0!==e.x&&void 0!==e.y){var{x:a,y:r}=e;this.drawScrubLine(t,e,o.svg,i,s),this.drawPlotScrubCircle(t,null==a?void 0:a.position,null==r?void 0:r.position,o.svg,i)}}drawScrubLine(t,e,i,o,a){var r,n,l,d,v,h,c,u,g=this.getPlotScrubLineClass(t);i.selectAll(".".concat(g)).remove();var x=i.insert("line").classed(g,!0);if((null==a?void 0:a.axis)===s.x){var y=this.settings.height-this.settings.margin.bottom;x.attr("x1",null!==(n=null===(r=e.x)||void 0===r?void 0:r.position)&&void 0!==n?n:0).attr("y1",0).attr("x2",null!==(d=null===(l=e.x)||void 0===l?void 0:l.position)&&void 0!==d?d:0).attr("y2",y).attr("stroke",this.getPlotStrokeColor(o)).style("stroke-width",this.getPlotStrokeWidth(o))}else{var p=this.getChartWidth(),m=p-this.settings.margin.left;x.attr("x1",this.settings.margin.left).attr("y1",null!==(h=null===(v=e.y)||void 0===v?void 0:v.position)&&void 0!==h?h:0).attr("x2",p+m).attr("y2",null!==(u=null===(c=e.y)||void 0===c?void 0:c.position)&&void 0!==u?u:0).attr("stroke",this.getPlotStrokeColor(o)).style("stroke-width",this.getPlotStrokeWidth(o))}}drawPlotScrubCircle(t,e,i,s,o){s.selectAll(".".concat(this.getPlotScrubCircleClass(t))).remove(),s.insert("circle").classed(this.getPlotScrubCircleClass(t),!0).attr("r",6).attr("cx",e).attr("cy",i).style("stroke",this.getPlotStrokeColor(o)).style("stroke-width",this.getPlotStrokeWidth(o)).style("fill-opacity","0")}erasePlotScrub(t){void 0!==this.chartElements&&(this.chartElements.svg.select(".".concat(this.getPlotScrubCircleClass(t))).remove(),this.chartElements.svg.select(".".concat(this.getPlotScrubLineClass(t))).remove())}getScrubEvent(t,e,i,o,a,r,n,l){var d,h,c,u,g;e===s.x?(d=t.offsetX,h=l.x,c=i,u=a,g=r):(d=t.offsetY,h=l.y,c=o,u=r,g=a);var x=c.invert(d-h),y=(0,(0,v.ylB)((t=>u(t))).center)(n,x),p=this.getDataRowNearestToScrub(y,x,n,g,u),m=a(p),f=i(m)+l.x,A=r(p);return{x:{position:f,value:m},y:{position:o(A)+l.y,value:A}}}getDataRowNearestToScrub(t,e,i,s,o){for(var a=i.filter((t=>null!==s(t)&&void 0!==s(t))),r=Number.MAX_VALUE,n=i[t],l=0;l<a.length;l+=1){var d=o(a[l]),v=Math.abs(+d-+e);v<r&&(r=v,n=a[l])}return n}getPlotStrokeColor(t){var e;return null!==(e=null==t?void 0:t.strokeColor)&&void 0!==e?e:"#333"}getAxisColor(t){var e,i,s=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.fill)}));return void 0!==s?null===(e=s.style)||void 0===e?void 0:e.fill:(s=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.strokeColor)})),void 0!==s?null===(i=s.style)||void 0===i?void 0:i.strokeColor:"#000")}getPlotStrokeWidth(t){var e;return null!==(e=null==t?void 0:t.strokeWidth)&&void 0!==e?e:1}getPlotScrubCircleClass(t){return"".concat(t,"-scrub-circle")}getPlotScrubLineClass(t){return"".concat(t,"-scrub-line")}attachChartElements(){var t=this.getChartElements();if(void 0!==this.element&&void 0!==t){var{svg:e,canvas:i}=t,s=null==e?void 0:e.node(),o=null==i?void 0:i.node();null!==s&&null!==o&&(this.element.innerHTML="",this.element.append(s),this.element.append(o))}}createPlot(t){var e=this.getPlotImplementationProps(t);return t.type===o.line?new P.Line(e):t.type===o.area?new P.Area(e):t.type===o.scatter?new P.Scatter(e):t.type===o.bar?new P.Bar(e):new b(e)}clearCanvas(){var t=this.getCanvasContext();null!==t&&t.clearRect(0,0,t.canvas.width,t.canvas.height)}init(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=Object.create(null,{init:{get:()=>super.init}});return S(this,void 0,void 0,(function*(){yield e.init.call(this,t),this.attachChartElements()}))}destroy(){console.log("destroy"),this.chartElements=void 0,super.destroy()}}class L extends C{draw(){var t,e,i,s,o,a,r,n,l=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var d=void 0!==this.style?this.style:{},v=yield this.getData(),h=null===(t=null==v?void 0:v.parsed)||void 0===t?void 0:t.data,c=this.getAccessorAtAxis("x"),u=this.getAccessorAtAxis("y"),g=this.chart,x=g.getChartElements();if(void 0!==x&&null!==x.svg){var y=x.svg,f=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.scale,A=null===(o=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.y)||void 0===o?void 0:o.scale;if(void 0!==f&&void 0!==A&&void 0!==h&&void 0!==c&&void 0!==u){var S=g.getD3RadialXScale(f),b=g.getD3RadialYScale(A),k=(0,p.A)().angle((t=>{var e=c(t),i=S(e);return void 0===i?0:i})).radius((t=>{var e=u(t),i=b(e);return void 0===i?0:i})).curve(m.A),D=h.slice(),C=g.getChartOffset(),E=void 0!==d.strokeColor?d.strokeColor:"#333";y.append("g").attr("transform","translate(".concat(C.x,",").concat(C.y,")")).attr("class","radial-line").append("path").attr("fill","none").attr("stroke",E).attr("stroke-width",void 0!==d.strokeWidth?d.strokeWidth:1).attr("d",k(D)),void 0===(null===(a=this.axes)||void 0===a?void 0:a.y)||null!==(r=this.legendSettings.hide)&&void 0!==r&&r||l.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(n=g.getAxisLabel(this.axes.y,"y"))&&void 0!==n?n:this.axes.y.key,style:{backgroundColor:E}}])}}}))}}class R extends C{draw(){var t,e,i,s,o,a,r,n,l=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var d=yield this.getData(),v=null===(t=null==d?void 0:d.parsed)||void 0===t?void 0:t.data,h=this.getAccessorAtAxis("x"),c=this.getAccessorAtAxis("y"),u=this.chart,g=u.getChartElements();if(void 0!==g&&null!==g.svg){var x=g.svg,y=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.scale,p=null===(o=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.y)||void 0===o?void 0:o.scale;if(void 0!==y&&void 0!==p&&void 0!==v&&void 0!==h&&void 0!==c){var m=u.getD3RadialXScale(y),A=u.getD3RadialYScale(p),S=x.append("g").attr("transform","translate(".concat(u.getChartSize()/2,",").concat(u.getChartSize()/2,")")).attr("class","radial-scatter"),b=void 0!==this.style?this.style:{},k=void 0!==b.radius?b.radius:2,D=void 0!==b.fill?b.fill:"#333",C=void 0!==b.strokeColor?b.strokeColor:"#CCC";v.forEach((t=>{var e=(0,f.A)((t=>{var e=h(t),i=m(e);return void 0===i?0:i})(t),(t=>{var e=c(t),i=A(e);return void 0===i?0:i})(t));S.append("circle").attr("r",2*k).attr("fill",D).attr("stroke",C).attr("stroke-width",void 0!==b.strokeWidth||void 0!==b.strokeColor?void 0!==b.strokeWidth?b.strokeWidth:1:0).attr("cx",e[0]+u.settings.margin.left).attr("cy",e[1]+u.settings.margin.top)})),void 0===(null===(a=this.axes)||void 0===a?void 0:a.y)||null!==(r=this.legendSettings.hide)&&void 0!==r&&r||l.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(n=u.getAxisLabel(this.axes.y,"y"))&&void 0!==n?n:this.axes.y.key,style:{backgroundColor:D,border:"1px solid ".concat(C)}}])}}}))}}class M extends E{draw(){var t,e,i,s,o,a,r,n,l=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var d=void 0!==this.style?this.style:{},v=yield this.getData(),h=null===(t=null==v?void 0:v.parsed)||void 0===t?void 0:t.data,c=this.getAccessorsAtAxis("x"),u=this.getAccessorAtAxis("x"),g=c.x0,x=c.x1,y=this.getAccessorsAtAxis("y"),p=this.getAccessorAtAxis("y"),f=y.y0,S=y.y1,b=this.chart,k=b.getChartElements();if(void 0!==k&&null!==k.svg){var D=k.svg,C=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.scale,E=null===(o=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.y)||void 0===o?void 0:o.scale;if(void 0===C||void 0===E||void 0===h||void 0===u&&void 0===g&&void 0===x||void 0===p&&void 0===f&&void 0===S)console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");else{var P=b.getD3RadialXScale(C),w=b.getD3RadialYScale(E),L=(t,e)=>i=>{var s=t(i),o=e(s);return void 0===o?0:o};if(void 0!==u&&void 0!==f&&void 0!==S){var R,M=(0,A.A)().angle(L(u,P)).innerRadius(L(f,w)).outerRadius(L(S,w)).defined((R=S,t=>{var e=R(t);return!(null==e||isNaN(+e))})).curve(m.A),O=h.slice(),W=b.getChartOffset(),j=void 0!==d.fill?d.fill:"#EDEDED99";D.insert("g","g.axis").attr("transform","translate(".concat(W.x,",").concat(W.y,")")).attr("class","radial-area").append("path").attr("fill",j).attr("stroke-width",void 0!==d.strokeWidth?d.strokeWidth:1).attr("d",M(O)),void 0===(null===(a=this.axes)||void 0===a?void 0:a.y)||null!==(r=this.legendSettings.hide)&&void 0!==r&&r||l.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(n=b.getAxisLabel(this.axes.y,"y"))&&void 0!==n?n:this.axes.y.key,style:{backgroundColor:j}}])}}}}))}}class O extends D{constructor(){super(...arguments),this.data=void 0,this.numBins=16,this.speedBins=v.y17(1,8,1),this.stacks=void 0,this.directionMode="to"}setStackedData(){var t,e,i;return S(this,void 0,void 0,(function*(){var s=[];void 0===this.data&&(this.data=yield this.getData(),s=null!==(e=null===(t=this.data.parsed)||void 0===t?void 0:t.data)&&void 0!==e?e:[]);var o=null===(i=this.data.parsed)||void 0===i?void 0:i.accessors.y;void 0===this.stacks&&void 0!==o&&(this.stacks=this.getStackedData(s,o))}))}getDomain(t){return S(this,void 0,void 0,(function*(){return yield this.setStackedData(),void 0===this.stacks?[0,10]:[0,this.getMaxStackTotal(this.stacks)]}))}getStackedData(t,e){var i=360/this.numBins,s=v.y17(0,360,i),o=t.map((t=>t.value));this.speedBins=v.ZcS(v.jkA(o),v.T9B(o),5);var a=[];return s.forEach((t=>{var e={minDirection:t};this.speedBins.forEach((t=>{e[t]=0})),a.push(e)})),t.forEach((t=>{var s=Math.floor(t.direction/i),o=a[s],r=Number(e(t)),n=this.speedBins.find((t=>r<t));void 0!==n&&(o[n]+=1)})),a}getMaxStackTotal(t){var e;return null!==(e=v.T9B(t,(t=>this.speedBins.reduce(((e,i)=>e+t[i]),0))))&&void 0!==e?e:0}draw(){var t,e,i,s,o,a,r=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});return S(this,void 0,void 0,(function*(){var n=this.getAccessorsAtAxis("x"),l=this.getAccessorAtAxis("x"),d=n.x0,h=n.x1,c=this.getAccessorsAtAxis("y"),u=this.getAccessorAtAxis("y"),g=c.y0,x=c.y1;yield this.setStackedData();var y=this.chart,p=y.getChartElements();if(void 0!==p&&null!==p.svg){var m=p.svg,f=null===(e=null===(t=null==this?void 0:this.axes)||void 0===t?void 0:t.x)||void 0===e?void 0:e.scale,A=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.y)||void 0===s?void 0:s.scale;if(void 0===f||void 0===A||void 0===l&&void 0===d&&void 0===h||void 0===u&&void 0===g&&void 0===x)console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");else if(void 0!==this.stacks&&void 0!==this.speedBins){var S=this.getMaxStackTotal(this.stacks),b=v.WH().domain(v.y17(0,360,360/this.numBins)).range([0,2*Math.PI]),k=v.afO().domain([0,S]).range([y.getInnerRadius(),y.getOuterRadius()]),D=null!==(a=null===(o=this.style)||void 0===o?void 0:o.colors)&&void 0!==a?a:v.zt,C=v.UMr().range(D),E=v.t$z().keys(this.speedBins.map((t=>String(t))))(this.stacks);E.forEach(((t,e)=>{t.forEach((t=>{t.bin={index:e,label:this.speedBins[e]}}))}));var P=y.getChartOffset(),w=2*Math.PI/this.numBins,L=t=>{var e="from"===this.directionMode?b(t):b((t+180)%360);return(null!=e?e:0)-w/2},R=t=>{var e="from"===this.directionMode?b(t):b((t+180)%360);return(null!=e?e:0)+w/2};m.insert("g","g.axis").attr("transform","translate(".concat(P.x,",").concat(P.y,")")).selectAll("g").data(E).enter().append("g").attr("fill",(t=>C(t.key))).selectAll("path").data((t=>t)).enter().append("path").on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})).attr("d",v.JLW().innerRadius((t=>k(t[0]))).outerRadius((t=>k(t[1]))).startAngle((t=>L(t.data.minDirection))).endAngle((t=>R(t.data.minDirection))).padAngle(.01).padRadius(y.getInnerRadius())),r.onLegendReady.call(this,E.map(((t,e)=>{var i,s;return{id:t.key,label:"< ".concat(this.speedBins[e]," ").concat(null!==(s=null===(i=this.dimensions.z.displayUnits)||void 0===i?void 0:i.label)&&void 0!==s?s:""),style:{backgroundColor:C(t.key)}}})))}}}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.data.angle},y:{position:t.offsetY,value:Object.assign({},e)}})}}var W={box:class extends b{draw(){return S(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}},line:class extends b{draw(){return S(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}}},j=Object.assign(Object.assign({},W),{line:C}),z={Chart:w,RadialChart:class extends w{getInnerRadius(){return this.getChartSize()/5}getOuterRadius(){return this.getChartSize()/2}getXRange(t){return[0,2*Math.PI]}getYRange(t){return[this.getInnerRadius(),this.getOuterRadius()]}getYAxesWidth(){return this.settings.margin.left}getChartSize(){var t=this.getWidth()-this.settings.margin.left-this.settings.margin.right,e=this.settings.height-this.settings.margin.top-this.settings.margin.bottom;return Math.min(t,e)}getChartWidth(){return this.getChartSize()}getChartHeight(){return this.getChartSize()}getD3RadialYScale(t){return(0,u.A)().domain(t.domain).range(t.range)}getD3RadialXScale(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:12,i=2*Math.PI,s=super.getD3XScale(t);return s.range([0,i-i/e]),s}getYAxis(t,e,i){if(void 0===t.scale)return t=>t;var s=this.getyAxisOffset(t),o=this.getD3RadialYScale(t.scale),a=o.tickFormat(),r=o.range()[1]-o.range()[0],n=Math.floor(r/30),l=o.ticks(n).map(a),d=t=>Number(t.replace(/,/g,""));return t=>{var e=0!==i&&i%2!=0?1:-1;return t.attr("class","radial-axis").attr("transform","translate(".concat(s.x,",").concat(s.y,")")).attr("text-anchor","middle").selectAll().data(l.reverse()).join("g").attr("class","tick").call((t=>i>0?t:t.append("circle").attr("fill","none").attr("stroke","currentColor").attr("r",(t=>o(d(t)))))).call((t=>t.append("text").attr("y",(t=>e*o(d(t)))).attr("dy","0.35em").attr("stroke","#FFF").attr("strokewidth",5).attr("paint-order","stroke").attr("transform","rotate(".concat(i>1?-20*(i-1):0,")")).text(((t,e)=>"".concat(String(t)))))),t}}getChartOffset(){return{x:this.settings.margin.left+this.getChartSize()/2,y:this.settings.margin.top+this.getChartSize()/2}}getXAxisOffset(t){return this.getChartOffset()}getyAxisOffset(t){return this.getChartOffset()}getXAxis(t,e){var i,s,o;if(void 0===t.scale)return t=>t;var a=this.getInnerRadius(),r=this.getOuterRadius(),n=this.getXAxisOffset(t),l=this.getD3RadialXScale(t.scale),d=l.tickFormat(),v=null!==(o=null===(s=null===(i=this.settings.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.ticks)&&void 0!==o?o:l.ticks().map(d);return t=>(t.append("g").attr("class","radial-axis").attr("transform","translate(".concat(n.x,",").concat(n.y,") rotate(").concat(-90,")")).attr("text-anchor","left").call((t=>t.selectAll("g").data(v).join("g").attr("transform",((t,e,i)=>{return"\n            rotate(".concat((s=e,o=i.length,360*s/o),")\n            translate(").concat(a,",0)\n          ");var s,o})).attr("class","tick").call((t=>t.append("line").attr("x1",-5).attr("x2",r-a+10))).call((t=>t.append("text").attr("text-anchor","middle").attr("transform","rotate(90)translate(0,16)").text((t=>t)))))),t)}createPlot(t){var e=this.getPlotImplementationProps(t);return"line"===t.type?new L(e):"scatter"===t.type?new R(e):"area"===t.type?new M(e):"windrose"===t.type?new O(e):new L(e)}},plotTypes:j}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,