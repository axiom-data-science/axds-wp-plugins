"use strict";(self.webpackChunkaxds_wp_plugins=self.webpackChunkaxds_wp_plugins||[]).push([[271],{271:(t,e,n)=>{n.r(e),n.d(e,{default:()=>la});var i=n(975),r=n(454),o=n(543),s="http://www.w3.org/1999/xhtml";const a={svg:"http://www.w3.org/2000/svg",xhtml:s,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function l(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),a.hasOwnProperty(e)?{space:a[e],local:t}:t}function u(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===s&&e.documentElement.namespaceURI===s?e.createElement(t):e.createElementNS(n,t)}}function c(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function h(t){var e=l(t);return(e.local?c:u)(e)}function d(){}function f(t){return null==t?d:function(){return this.querySelector(t)}}function g(){return[]}function v(t){return null==t?g:function(){return this.querySelectorAll(t)}}function p(t){return function(){return this.matches(t)}}function y(t){return function(e){return e.matches(t)}}var m=Array.prototype.find;function x(){return this.firstElementChild}var w=Array.prototype.filter;function b(){return Array.from(this.children)}function _(t){return new Array(t.length)}function A(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function S(t,e,n,i,r,o){for(var s,a=0,l=e.length,u=o.length;a<u;++a)(s=e[a])?(s.__data__=o[a],i[a]=s):n[a]=new A(t,o[a]);for(;a<l;++a)(s=e[a])&&(r[a]=s)}function M(t,e,n,i,r,o,s){var a,l,u,c=new Map,h=e.length,d=o.length,f=new Array(h);for(a=0;a<h;++a)(l=e[a])&&(f[a]=u=s.call(l,l.__data__,a,e)+"",c.has(u)?r[a]=l:c.set(u,l));for(a=0;a<d;++a)u=s.call(t,o[a],a,o)+"",(l=c.get(u))?(i[a]=l,l.__data__=o[a],c.delete(u)):n[a]=new A(t,o[a]);for(a=0;a<h;++a)(l=e[a])&&c.get(f[a])===l&&(r[a]=l)}function k(t){return t.__data__}function C(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function D(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function E(t){return function(){this.removeAttribute(t)}}function $(t){return function(){this.removeAttributeNS(t.space,t.local)}}function T(t,e){return function(){this.setAttribute(t,e)}}function P(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function N(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function L(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function R(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Y(t){return function(){this.style.removeProperty(t)}}function U(t,e,n){return function(){this.style.setProperty(t,e,n)}}function O(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function F(t,e){return t.style.getPropertyValue(e)||R(t).getComputedStyle(t,null).getPropertyValue(e)}function j(t){return function(){delete this[t]}}function X(t,e){return function(){this[t]=e}}function H(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function I(t){return t.trim().split(/^|\s+/)}function z(t){return t.classList||new W(t)}function W(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function q(t,e){for(var n=z(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function B(t,e){for(var n=z(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function V(t){return function(){q(this,t)}}function Z(t){return function(){B(this,t)}}function G(t,e){return function(){(e.apply(this,arguments)?q:B)(this,t)}}function Q(){this.textContent=""}function J(t){return function(){this.textContent=t}}function K(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function tt(){this.innerHTML=""}function et(t){return function(){this.innerHTML=t}}function nt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function it(){this.nextSibling&&this.parentNode.appendChild(this)}function rt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ot(){return null}function st(){var t=this.parentNode;t&&t.removeChild(this)}function at(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function lt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ut(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,o=e.length;i<o;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.options);++r?e.length=r:delete this.__on}}}function ct(t,e,n){return function(){var i,r=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(r)for(var s=0,a=r.length;s<a;++s)if((i=r[s]).type===t.type&&i.name===t.name)return this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),void(i.value=e);this.addEventListener(t.type,o,n),i={type:t.type,name:t.name,value:e,listener:o,options:n},r?r.push(i):this.__on=[i]}}function ht(t,e,n){var i=R(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function dt(t,e){return function(){return ht(this,t,e)}}function ft(t,e){return function(){return ht(this,t,e.apply(this,arguments))}}A.prototype={constructor:A,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},W.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var gt=[null];function vt(t,e){this._groups=t,this._parents=e}function pt(){return new vt([[document.documentElement]],gt)}vt.prototype=pt.prototype={constructor:vt,select:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s,a=e[r],l=a.length,u=i[r]=new Array(l),c=0;c<l;++c)(o=a[c])&&(s=t.call(o,o.__data__,c,a))&&("__data__"in o&&(s.__data__=o.__data__),u[c]=s);return new vt(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(e=t.apply(this,arguments))?[]:Array.isArray(e)?e:Array.from(e);var e}}(t):v(t);for(var e=this._groups,n=e.length,i=[],r=[],o=0;o<n;++o)for(var s,a=e[o],l=a.length,u=0;u<l;++u)(s=a[u])&&(i.push(t.call(s,s.__data__,u,a)),r.push(s));return new vt(i,r)},selectChild:function(t){return this.select(null==t?x:function(t){return function(){return m.call(this.children,t)}}("function"==typeof t?t:y(t)))},selectChildren:function(t){return this.selectAll(null==t?b:function(t){return function(){return w.call(this.children,t)}}("function"==typeof t?t:y(t)))},filter:function(t){"function"!=typeof t&&(t=p(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s=e[r],a=s.length,l=i[r]=[],u=0;u<a;++u)(o=s[u])&&t.call(o,o.__data__,u,s)&&l.push(o);return new vt(i,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,k);var n,i=e?M:S,r=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=o.length,a=new Array(s),l=new Array(s),u=new Array(s),c=0;c<s;++c){var h=r[c],d=o[c],f=d.length,g=C(t.call(h,h&&h.__data__,c,r)),v=g.length,p=l[c]=new Array(v),y=a[c]=new Array(v);i(h,d,p,y,u[c]=new Array(f),g,e);for(var m,x,w=0,b=0;w<v;++w)if(m=p[w]){for(w>=b&&(b=w+1);!(x=y[b])&&++b<v;);m._next=x||null}}return(a=new vt(a,r))._enter=l,a._exit=u,a},enter:function(){return new vt(this._enter||this._groups.map(_),this._parents)},exit:function(){return new vt(this._exit||this._groups.map(_),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,o=this.exit();return"function"==typeof t?(i=t(i))&&(i=i.selection()):i=i.append(t+""),null!=e&&(r=e(r))&&(r=r.selection()),null==n?o.remove():n(o),i&&r?i.merge(r).order():r},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,i=e._groups,r=n.length,o=i.length,s=Math.min(r,o),a=new Array(r),l=0;l<s;++l)for(var u,c=n[l],h=i[l],d=c.length,f=a[l]=new Array(d),g=0;g<d;++g)(u=c[g]||h[g])&&(f[g]=u);for(;l<r;++l)a[l]=n[l];return new vt(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],o=r.length-1,s=r[o];--o>=0;)(i=r[o])&&(s&&4^i.compareDocumentPosition(s)&&s.parentNode.insertBefore(i,s),s=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=D);for(var n=this._groups,i=n.length,r=new Array(i),o=0;o<i;++o){for(var s,a=n[o],l=a.length,u=r[o]=new Array(l),c=0;c<l;++c)(s=a[c])&&(u[c]=s);u.sort(e)}return new vt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,o=i.length;r<o;++r){var s=i[r];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,o=e[n],s=0,a=o.length;s<a;++s)(r=o[s])&&t.call(r,r.__data__,s,o);return this},attr:function(t,e){var n=l(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?$:E:"function"==typeof e?n.local?L:N:n.local?P:T)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Y:"function"==typeof e?O:U)(t,e,null==n?"":n)):F(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?j:"function"==typeof e?H:X)(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var i=z(this.node()),r=-1,o=n.length;++r<o;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?G:e?V:Z)(n,e))},text:function(t){return arguments.length?this.each(null==t?Q:("function"==typeof t?K:J)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?tt:("function"==typeof t?nt:et)(t)):this.node().innerHTML},raise:function(){return this.each(it)},lower:function(){return this.each(rt)},append:function(t){var e="function"==typeof t?t:h(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:h(t),i=null==e?ot:"function"==typeof e?e:f(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(st)},clone:function(t){return this.select(t?lt:at)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?ct:ut,i=0;i<s;++i)this.each(a(o[i],e,n));return this}var a=this.node().__on;if(a)for(var l,u=0,c=a.length;u<c;++u)for(i=0,l=a[u];i<s;++i)if((r=o[i]).type===l.type&&r.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?ft:dt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i,r=t[e],o=0,s=r.length;o<s;++o)(i=r[o])&&(yield i)}};const yt=pt;function mt(t){return function(t){return"string"==typeof t?new vt([[document.querySelector(t)]],[document.documentElement]):new vt([[t]],gt)}(h(t).call(document.documentElement))}function xt(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function wt(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function bt(t){let e,n,i;function r(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<0?r=e+1:o=e}while(r<o)}return r}return 2!==t.length?(e=xt,n=(e,n)=>xt(t(e),n),i=(e,n)=>t(e)-n):(e=t===xt||t===wt?t:_t,n=t,i=t),{left:r,center:function(t,e,n=0,o=t.length){const s=r(t,e,n,o-1);return s>n&&i(t[s-1],e)>-i(t[s],e)?s-1:s},right:function(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<=0?r=e+1:o=e}while(r<o)}return r}}}function _t(){return 0}function At(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(n<r||void 0===n&&r>=r)&&(n=r)}return n}function St(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var i=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(r);++i<r;)o[i]=t+i*n;return o}const Mt=Math.sqrt(50),kt=Math.sqrt(10),Ct=Math.sqrt(2);function Dt(t,e,n){const i=(e-t)/Math.max(0,n),r=Math.floor(Math.log10(i)),o=i/Math.pow(10,r),s=o>=Mt?10:o>=kt?5:o>=Ct?2:1;let a,l,u;return r<0?(u=Math.pow(10,-r)/s,a=Math.round(t*u),l=Math.round(e*u),a/u<t&&++a,l/u>e&&--l,u=-u):(u=Math.pow(10,r)*s,a=Math.round(t/u),l=Math.round(e/u),a*u<t&&++a,l*u>e&&--l),l<a&&.5<=n&&n<2?Dt(t,e,2*n):[a,l,u]}function Et(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const i=e<t,[r,o,s]=i?Dt(e,t,n):Dt(t,e,n);if(!(o>=r))return[];const a=o-r+1,l=new Array(a);if(i)if(s<0)for(let t=0;t<a;++t)l[t]=(o-t)/-s;else for(let t=0;t<a;++t)l[t]=(o-t)*s;else if(s<0)for(let t=0;t<a;++t)l[t]=(r+t)/-s;else for(let t=0;t<a;++t)l[t]=(r+t)*s;return l}function $t(t,e,n){return Dt(t=+t,e=+e,n=+n)[2]}function Tt(t,e,n){n=+n;const i=(e=+e)<(t=+t),r=i?$t(e,t,n):$t(t,e,n);return(i?-1:1)*(r<0?1/-r:r)}function Pt(t){return t}var Nt=1,Lt=2,Rt=3,Yt=4,Ut=1e-6;function Ot(t){return"translate("+t+",0)"}function Ft(t){return"translate(0,"+t+")"}function jt(t){return e=>+t(e)}function Xt(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function Ht(){return!this.__axis}function It(t,e){var n=[],i=null,r=null,o=6,s=6,a=3,l="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,u=t===Nt||t===Yt?-1:1,c=t===Yt||t===Lt?"x":"y",h=t===Nt||t===Rt?Ot:Ft;function d(d){var f=null==i?e.ticks?e.ticks.apply(e,n):e.domain():i,g=null==r?e.tickFormat?e.tickFormat.apply(e,n):Pt:r,v=Math.max(o,0)+a,p=e.range(),y=+p[0]+l,m=+p[p.length-1]+l,x=(e.bandwidth?Xt:jt)(e.copy(),l),w=d.selection?d.selection():d,b=w.selectAll(".domain").data([null]),_=w.selectAll(".tick").data(f,e).order(),A=_.exit(),S=_.enter().append("g").attr("class","tick"),M=_.select("line"),k=_.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),_=_.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(c+"2",u*o)),k=k.merge(S.append("text").attr("fill","currentColor").attr(c,u*v).attr("dy",t===Nt?"0em":t===Rt?"0.71em":"0.32em")),d!==w&&(b=b.transition(d),_=_.transition(d),M=M.transition(d),k=k.transition(d),A=A.transition(d).attr("opacity",Ut).attr("transform",(function(t){return isFinite(t=x(t))?h(t+l):this.getAttribute("transform")})),S.attr("opacity",Ut).attr("transform",(function(t){var e=this.parentNode.__axis;return h((e&&isFinite(e=e(t))?e:x(t))+l)}))),A.remove(),b.attr("d",t===Yt||t===Lt?s?"M"+u*s+","+y+"H"+l+"V"+m+"H"+u*s:"M"+l+","+y+"V"+m:s?"M"+y+","+u*s+"V"+l+"H"+m+"V"+u*s:"M"+y+","+l+"H"+m),_.attr("opacity",1).attr("transform",(function(t){return h(x(t)+l)})),M.attr(c+"2",u*o),k.attr(c,u*v).text(g),w.filter(Ht).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Lt?"start":t===Yt?"end":"middle"),w.each((function(){this.__axis=x}))}return d.scale=function(t){return arguments.length?(e=t,d):e},d.ticks=function(){return n=Array.from(arguments),d},d.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),d):n.slice()},d.tickValues=function(t){return arguments.length?(i=null==t?null:Array.from(t),d):i&&i.slice()},d.tickFormat=function(t){return arguments.length?(r=t,d):r},d.tickSize=function(t){return arguments.length?(o=s=+t,d):o},d.tickSizeInner=function(t){return arguments.length?(o=+t,d):o},d.tickSizeOuter=function(t){return arguments.length?(s=+t,d):s},d.tickPadding=function(t){return arguments.length?(a=+t,d):a},d.offset=function(t){return arguments.length?(l=+t,d):l},d}function zt(t){return It(Rt,t)}function Wt(t){return It(Yt,t)}var qt={value:()=>{}};function Bt(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i||/[\s.]/.test(t))throw new Error("illegal type: "+t);i[t]=[]}return new Vt(i)}function Vt(t){this._=t}function Zt(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function Gt(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=qt,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}Vt.prototype=Bt.prototype={constructor:Vt,on:function(t,e){var n,i,r=this._,o=(i=r,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!i.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),s=-1,a=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++s<a;)if(n=(t=o[s]).type)r[n]=Gt(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Gt(r[n],t.name,null);return this}for(;++s<a;)if((n=(t=o[s]).type)&&(n=Zt(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Vt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),o=0;o<n;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(i=this._[t]).length;o<n;++o)i[o].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(e,n)}};const Qt=Bt;var Jt,Kt,te=0,ee=0,ne=0,ie=1e3,re=0,oe=0,se=0,ae="object"==typeof performance&&performance.now?performance:Date,le="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ue(){return oe||(le(ce),oe=ae.now()+se)}function ce(){oe=0}function he(){this._call=this._time=this._next=null}function de(t,e,n){var i=new he;return i.restart(t,e,n),i}function fe(){oe=(re=ae.now())+se,te=ee=0;try{!function(){ue(),++te;for(var t,e=Jt;e;)(t=oe-e._time)>=0&&e._call.call(void 0,t),e=e._next;--te}()}finally{te=0,function(){for(var t,e,n=Jt,i=1/0;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Jt=e);Kt=t,ve(i)}(),oe=0}}function ge(){var t=ae.now(),e=t-re;e>ie&&(se-=e,re=t)}function ve(t){te||(ee&&(ee=clearTimeout(ee)),t-oe>24?(t<1/0&&(ee=setTimeout(fe,t-ae.now()-se)),ne&&(ne=clearInterval(ne))):(ne||(re=ae.now(),ne=setInterval(ge,ie)),te=1,le(fe)))}function pe(t,e,n){var i=new he;return e=null==e?0:+e,i.restart((n=>{i.stop(),t(n+e)}),e,n),i}he.prototype=de.prototype={constructor:he,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ue():+n)+(null==e?0:+e),this._next||Kt===this||(Kt?Kt._next=this:Jt=this,Kt=this),this._call=t,this._time=n,ve()},stop:function(){this._call&&(this._call=null,this._time=1/0,ve())}};var ye=Qt("start","end","cancel","interrupt"),me=[],xe=0,we=3;function be(t,e,n,i,r,o){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function o(l){var u,c,h,d;if(1!==n.state)return a();for(u in r)if((d=r[u]).name===n.name){if(d.state===we)return pe(o);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[u]):+u<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete r[u])}if(pe((function(){n.state===we&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(l))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=we,i=new Array(h=n.tween.length),u=0,c=-1;u<h;++u)(d=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(i[++c]=d);i.length=c+1}}function s(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(a),n.state=5,1),o=-1,s=i.length;++o<s;)i[o].call(t,r);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),a())}function a(){for(var i in n.state=6,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=de((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:i,group:r,on:ye,tween:me,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:xe})}function _e(t,e){var n=Se(t,e);if(n.state>xe)throw new Error("too late; already scheduled");return n}function Ae(t,e){var n=Se(t,e);if(n.state>we)throw new Error("too late; already running");return n}function Se(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Me(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var ke,Ce=180/Math.PI,De={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ee(t,e,n,i,r,o){var s,a,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*i)&&(n-=t*l,i-=e*l),(a=Math.sqrt(n*n+i*i))&&(n/=a,i/=a,l/=a),t*i<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:r,translateY:o,rotate:Math.atan2(e,t)*Ce,skewX:Math.atan(l)*Ce,scaleX:s,scaleY:a}}function $e(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],l=[];return o=t(o),s=t(s),function(t,i,r,o,s,a){if(t!==r||i!==o){var l=s.push("translate(",null,e,null,n);a.push({i:l-4,x:Me(t,r)},{i:l-2,x:Me(i,o)})}else(r||o)&&s.push("translate("+r+e+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,a,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(r(n)+"rotate(",null,i)-2,x:Me(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(o.rotate,s.rotate,a,l),function(t,e,n,o){t!==e?o.push({i:n.push(r(n)+"skewX(",null,i)-2,x:Me(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(o.skewX,s.skewX,a,l),function(t,e,n,i,o,s){if(t!==n||e!==i){var a=o.push(r(o)+"scale(",null,",",null,")");s.push({i:a-4,x:Me(t,n)},{i:a-2,x:Me(e,i)})}else 1===n&&1===i||o.push(r(o)+"scale("+n+","+i+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,l),o=s=null,function(t){for(var e,n=-1,i=l.length;++n<i;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var Te=$e((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?De:Ee(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Pe=$e((function(t){return null==t?De:(ke||(ke=document.createElementNS("http://www.w3.org/2000/svg","g")),ke.setAttribute("transform",t),(t=ke.transform.baseVal.consolidate())?Ee((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):De)}),", ",")",")");function Ne(t,e){var n,i;return function(){var r=Ae(this,t),o=r.tween;if(o!==n)for(var s=0,a=(i=n=o).length;s<a;++s)if(i[s].name===e){(i=i.slice()).splice(s,1);break}r.tween=i}}function Le(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var o=Ae(this,t),s=o.tween;if(s!==i){r=(i=s).slice();for(var a={name:e,value:n},l=0,u=r.length;l<u;++l)if(r[l].name===e){r[l]=a;break}l===u&&r.push(a)}o.tween=r}}function Re(t,e,n){var i=t._id;return t.each((function(){var t=Ae(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Se(t,i).value[e]}}function Ye(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Ue(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function Oe(){}var Fe=.7,je=1/Fe,Xe="\\s*([+-]?\\d+)\\s*",He="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ie="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ze=/^#([0-9a-f]{3,8})$/,We=new RegExp(`^rgb\\(${Xe},${Xe},${Xe}\\)$`),qe=new RegExp(`^rgb\\(${Ie},${Ie},${Ie}\\)$`),Be=new RegExp(`^rgba\\(${Xe},${Xe},${Xe},${He}\\)$`),Ve=new RegExp(`^rgba\\(${Ie},${Ie},${Ie},${He}\\)$`),Ze=new RegExp(`^hsl\\(${He},${Ie},${Ie}\\)$`),Ge=new RegExp(`^hsla\\(${He},${Ie},${Ie},${He}\\)$`),Qe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Je(){return this.rgb().formatHex()}function Ke(){return this.rgb().formatRgb()}function tn(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ze.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?en(e):3===n?new on(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?nn(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?nn(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=We.exec(t))?new on(e[1],e[2],e[3],1):(e=qe.exec(t))?new on(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Be.exec(t))?nn(e[1],e[2],e[3],e[4]):(e=Ve.exec(t))?nn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ze.exec(t))?hn(e[1],e[2]/100,e[3]/100,1):(e=Ge.exec(t))?hn(e[1],e[2]/100,e[3]/100,e[4]):Qe.hasOwnProperty(t)?en(Qe[t]):"transparent"===t?new on(NaN,NaN,NaN,0):null}function en(t){return new on(t>>16&255,t>>8&255,255&t,1)}function nn(t,e,n,i){return i<=0&&(t=e=n=NaN),new on(t,e,n,i)}function rn(t,e,n,i){return 1===arguments.length?((r=t)instanceof Oe||(r=tn(r)),r?new on((r=r.rgb()).r,r.g,r.b,r.opacity):new on):new on(t,e,n,null==i?1:i);var r}function on(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function sn(){return`#${cn(this.r)}${cn(this.g)}${cn(this.b)}`}function an(){const t=ln(this.opacity);return`${1===t?"rgb(":"rgba("}${un(this.r)}, ${un(this.g)}, ${un(this.b)}${1===t?")":`, ${t})`}`}function ln(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function un(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function cn(t){return((t=un(t))<16?"0":"")+t.toString(16)}function hn(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new fn(t,e,n,i)}function dn(t){if(t instanceof fn)return new fn(t.h,t.s,t.l,t.opacity);if(t instanceof Oe||(t=tn(t)),!t)return new fn;if(t instanceof fn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),o=Math.max(e,n,i),s=NaN,a=o-r,l=(o+r)/2;return a?(s=e===o?(n-i)/a+6*(n<i):n===o?(i-e)/a+2:(e-n)/a+4,a/=l<.5?o+r:2-o-r,s*=60):a=l>0&&l<1?0:s,new fn(s,a,l,t.opacity)}function fn(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function gn(t){return(t=(t||0)%360)<0?t+360:t}function vn(t){return Math.max(0,Math.min(1,t||0))}function pn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function yn(t,e,n,i,r){var o=t*t,s=o*t;return((1-3*t+3*o-s)*e+(4-6*o+3*s)*n+(1+3*t+3*o-3*s)*i+s*r)/6}Ye(Oe,tn,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Je,formatHex:Je,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return dn(this).formatHsl()},formatRgb:Ke,toString:Ke}),Ye(on,rn,Ue(Oe,{brighter(t){return t=null==t?je:Math.pow(je,t),new on(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Fe:Math.pow(Fe,t),new on(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new on(un(this.r),un(this.g),un(this.b),ln(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:sn,formatHex:sn,formatHex8:function(){return`#${cn(this.r)}${cn(this.g)}${cn(this.b)}${cn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:an,toString:an})),Ye(fn,(function(t,e,n,i){return 1===arguments.length?dn(t):new fn(t,e,n,null==i?1:i)}),Ue(Oe,{brighter(t){return t=null==t?je:Math.pow(je,t),new fn(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Fe:Math.pow(Fe,t),new fn(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new on(pn(t>=240?t-240:t+120,r,i),pn(t,r,i),pn(t<120?t+240:t-120,r,i),this.opacity)},clamp(){return new fn(gn(this.h),vn(this.s),vn(this.l),ln(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=ln(this.opacity);return`${1===t?"hsl(":"hsla("}${gn(this.h)}, ${100*vn(this.s)}%, ${100*vn(this.l)}%${1===t?")":`, ${t})`}`}}));const mn=t=>()=>t;function xn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):mn(isNaN(t)?e:t)}const wn=function t(e){var n=function(t){return 1==(t=+t)?xn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):mn(isNaN(e)?n:e)}}(e);function i(t,e){var i=n((t=rn(t)).r,(e=rn(e)).r),r=n(t.g,e.g),o=n(t.b,e.b),s=xn(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=o(e),t.opacity=s(e),t+""}}return i.gamma=t,i}(1);function bn(t){return function(e){var n,i,r=e.length,o=new Array(r),s=new Array(r),a=new Array(r);for(n=0;n<r;++n)i=rn(e[n]),o[n]=i.r||0,s[n]=i.g||0,a[n]=i.b||0;return o=t(o),s=t(s),a=t(a),i.opacity=1,function(t){return i.r=o(t),i.g=s(t),i.b=a(t),i+""}}}bn((function(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],o=t[i+1],s=i>0?t[i-1]:2*r-o,a=i<e-1?t[i+2]:2*o-r;return yn((n-i/e)*e,s,r,o,a)}})),bn((function(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],o=t[i%e],s=t[(i+1)%e],a=t[(i+2)%e];return yn((n-i/e)*e,r,o,s,a)}}));var _n=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,An=new RegExp(_n.source,"g");function Sn(t,e){var n,i,r,o=_n.lastIndex=An.lastIndex=0,s=-1,a=[],l=[];for(t+="",e+="";(n=_n.exec(t))&&(i=An.exec(e));)(r=i.index)>o&&(r=e.slice(o,r),a[s]?a[s]+=r:a[++s]=r),(n=n[0])===(i=i[0])?a[s]?a[s]+=i:a[++s]=i:(a[++s]=null,l.push({i:s,x:Me(n,i)})),o=An.lastIndex;return o<e.length&&(r=e.slice(o),a[s]?a[s]+=r:a[++s]=r),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,i=0;i<e;++i)a[(n=l[i]).i]=n.x(t);return a.join("")})}function Mn(t,e){var n;return("number"==typeof e?Me:e instanceof tn?wn:(n=tn(e))?(e=n,wn):Sn)(t,e)}function kn(t){return function(){this.removeAttribute(t)}}function Cn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Dn(t,e,n){var i,r,o=n+"";return function(){var s=this.getAttribute(t);return s===o?null:s===i?r:r=e(i=s,n)}}function En(t,e,n){var i,r,o=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===i?r:r=e(i=s,n)}}function $n(t,e,n){var i,r,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttribute(t))===(a=l+"")?null:s===i&&a===r?o:(r=a,o=e(i=s,l));this.removeAttribute(t)}}function Tn(t,e,n){var i,r,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:s===i&&a===r?o:(r=a,o=e(i=s,l));this.removeAttributeNS(t.space,t.local)}}function Pn(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Nn(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Ln(t,e){return function(){_e(this,t).delay=+e.apply(this,arguments)}}function Rn(t,e){return e=+e,function(){_e(this,t).delay=e}}function Yn(t,e){return function(){Ae(this,t).duration=+e.apply(this,arguments)}}function Un(t,e){return e=+e,function(){Ae(this,t).duration=e}}var On=yt.prototype.constructor;function Fn(t){return function(){this.style.removeProperty(t)}}var jn=0;function Xn(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function Hn(){return++jn}var In=yt.prototype;Xn.prototype=function(t){return yt().transition(t)}.prototype={constructor:Xn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var i=this._groups,r=i.length,o=new Array(r),s=0;s<r;++s)for(var a,l,u=i[s],c=u.length,h=o[s]=new Array(c),d=0;d<c;++d)(a=u[d])&&(l=t.call(a,a.__data__,d,u))&&("__data__"in a&&(l.__data__=a.__data__),h[d]=l,be(h[d],e,n,d,h,Se(a,n)));return new Xn(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=v(t));for(var i=this._groups,r=i.length,o=[],s=[],a=0;a<r;++a)for(var l,u=i[a],c=u.length,h=0;h<c;++h)if(l=u[h]){for(var d,f=t.call(l,l.__data__,h,u),g=Se(l,n),p=0,y=f.length;p<y;++p)(d=f[p])&&be(d,e,n,p,f,g);o.push(f),s.push(l)}return new Xn(o,s,e,n)},selectChild:In.selectChild,selectChildren:In.selectChildren,filter:function(t){"function"!=typeof t&&(t=p(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s=e[r],a=s.length,l=i[r]=[],u=0;u<a;++u)(o=s[u])&&t.call(o,o.__data__,u,s)&&l.push(o);return new Xn(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,o=Math.min(i,r),s=new Array(i),a=0;a<o;++a)for(var l,u=e[a],c=n[a],h=u.length,d=s[a]=new Array(h),f=0;f<h;++f)(l=u[f]||c[f])&&(d[f]=l);for(;a<i;++a)s[a]=e[a];return new Xn(s,this._parents,this._name,this._id)},selection:function(){return new On(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Hn(),i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],l=a.length,u=0;u<l;++u)if(s=a[u]){var c=Se(s,e);be(s,t,n,u,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Xn(i,this._parents,t,n)},call:In.call,nodes:In.nodes,node:In.node,size:In.size,empty:In.empty,each:In.each,on:function(t,e){var n=this._id;return arguments.length<2?Se(this.node(),n).on.on(t):this.each(function(t,e,n){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?_e:Ae;return function(){var s=o(this,t),a=s.on;a!==i&&(r=(i=a).copy()).on(e,n),s.on=r}}(n,t,e))},attr:function(t,e){var n=l(t),i="transform"===n?Pe:Mn;return this.attrTween(t,"function"==typeof e?(n.local?Tn:$n)(n,i,Re(this,"attr."+t,e)):null==e?(n.local?Cn:kn)(n):(n.local?En:Dn)(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=l(t);return this.tween(n,(i.local?Pn:Nn)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?Te:Mn;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var o=F(this,t),s=(this.style.removeProperty(t),F(this,t));return o===s?null:o===n&&s===i?r:r=e(n=o,i=s)}}(t,i)).on("end.style."+t,Fn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,o;return function(){var s=F(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=F(this,t)),s===l?null:s===i&&l===r?o:(r=l,o=e(i=s,a))}}(t,i,Re(this,"style."+t,e))).each(function(t,e){var n,i,r,o,s="style."+e,a="end."+s;return function(){var l=Ae(this,t),u=l.on,c=null==l.value[s]?o||(o=Fn(e)):void 0;u===n&&r===c||(i=(n=u).copy()).on(a,r=c),l.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,o=n+"";return function(){var s=F(this,t);return s===o?null:s===i?r:r=e(i=s,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,function(t,e,n){var i,r;function o(){var o=e.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,e,n){return function(i){this.style.setProperty(t,e.call(this,i),n)}}(t,o,n)),i}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Re(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function i(){var i=t.apply(this,arguments);return i!==n&&(e=(n=i)&&function(t){return function(e){this.textContent=t.call(this,e)}}(i)),e}return i._value=t,i}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=Se(this.node(),n).tween,o=0,s=r.length;o<s;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==e?Ne:Le)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ln:Rn)(e,t)):Se(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Yn:Un)(e,t)):Se(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Ae(this,t).ease=e}}(e,t)):Se(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Ae(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise((function(o,s){var a={value:s},l={value:function(){0==--r&&o()}};n.each((function(){var n=Ae(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})),0===r&&o()}))},[Symbol.iterator]:In[Symbol.iterator]};var zn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Wn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}yt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,i,r,o=t.__transition,s=!0;if(o){for(r in e=null==e?null:e+"",o)(n=o[r]).name===e?(i=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[r]):s=!1;s&&delete t.__transition}}(this,t)}))},yt.prototype.transition=function(t){var e,n;t instanceof Xn?(e=t._id,t=t._name):(e=Hn(),(n=zn).time=ue(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],l=a.length,u=0;u<l;++u)(s=a[u])&&be(s,t,e,u,a,n||Wn(s,e));return new Xn(i,this._parents,t,e)};const{abs:qn,max:Bn,min:Vn}=Math;function Zn(t){return{type:t}}function Gn(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}["w","e"].map(Zn),["n","s"].map(Zn),["n","w","e","s","nw","ne","sw","se"].map(Zn);class Qn extends Map{constructor(t,e=Kn){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const[e,n]of t)this.set(e,n)}get(t){return super.get(Jn(this,t))}has(t){return super.has(Jn(this,t))}set(t,e){return super.set(function({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):(t.set(i,n),n)}(this,t),e)}delete(t){return super.delete(function({_intern:t,_key:e},n){const i=e(n);return t.has(i)&&(n=t.get(i),t.delete(i)),n}(this,t))}}function Jn({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):n}function Kn(t){return null!==t&&"object"==typeof t?t.valueOf():t}Set;const ti=Symbol("implicit");function ei(){var t=new Qn,e=[],n=[],i=ti;function r(r){let o=t.get(r);if(void 0===o){if(i!==ti)return i;t.set(r,o=e.push(r)-1)}return n[o%n.length]}return r.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Qn;for(const i of n)t.has(i)||t.set(i,e.push(i)-1);return r},r.range=function(t){return arguments.length?(n=Array.from(t),r):n.slice()},r.unknown=function(t){return arguments.length?(i=t,r):i},r.copy=function(){return ei(e,n).unknown(i)},Gn.apply(r,arguments),r}function ni(){var t,e,n=ei().unknown(void 0),i=n.domain,r=n.range,o=0,s=1,a=!1,l=0,u=0,c=.5;function h(){var n=i().length,h=s<o,d=h?s:o,f=h?o:s;t=(f-d)/Math.max(1,n-l+2*u),a&&(t=Math.floor(t)),d+=(f-d-t*(n-l))*c,e=t*(1-l),a&&(d=Math.round(d),e=Math.round(e));var g=St(n).map((function(e){return d+t*e}));return r(h?g.reverse():g)}return delete n.unknown,n.domain=function(t){return arguments.length?(i(t),h()):i()},n.range=function(t){return arguments.length?([o,s]=t,o=+o,s=+s,h()):[o,s]},n.rangeRound=function(t){return[o,s]=t,o=+o,s=+s,a=!0,h()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,h()):a},n.padding=function(t){return arguments.length?(l=Math.min(1,u=+t),h()):l},n.paddingInner=function(t){return arguments.length?(l=Math.min(1,t),h()):l},n.paddingOuter=function(t){return arguments.length?(u=+t,h()):u},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),h()):c},n.copy=function(){return ni(i(),[o,s]).round(a).paddingInner(l).paddingOuter(u).align(c)},Gn.apply(h(),arguments)}const ii=bt(xt),ri=ii.right,oi=(ii.left,bt((function(t){return null===t?NaN:+t})).center,ri);function si(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,o=new Array(r),s=new Array(i);for(n=0;n<r;++n)o[n]=ci(t[n],e[n]);for(;n<i;++n)s[n]=e[n];return function(t){for(n=0;n<r;++n)s[n]=o[n](t);return s}}function ai(t,e){var n=new Date;return t=+t,e=+e,function(i){return n.setTime(t*(1-i)+e*i),n}}function li(t,e){var n,i={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?i[n]=ci(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}}function ui(t,e){e||(e=[]);var n,i=t?Math.min(e.length,t.length):0,r=e.slice();return function(o){for(n=0;n<i;++n)r[n]=t[n]*(1-o)+e[n]*o;return r}}function ci(t,e){var n,i,r=typeof e;return null==e||"boolean"===r?mn(e):("number"===r?Me:"string"===r?(n=tn(e))?(e=n,wn):Sn:e instanceof tn?wn:e instanceof Date?ai:(i=e,!ArrayBuffer.isView(i)||i instanceof DataView?Array.isArray(e)?si:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?li:Me:ui))(t,e)}function hi(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function di(t){return+t}var fi=[0,1];function gi(t){return t}function vi(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function pi(t,e,n){var i=t[0],r=t[1],o=e[0],s=e[1];return r<i?(i=vi(r,i),o=n(s,o)):(i=vi(i,r),o=n(o,s)),function(t){return o(i(t))}}function yi(t,e,n){var i=Math.min(t.length,e.length)-1,r=new Array(i),o=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<i;)r[s]=vi(t[s],t[s+1]),o[s]=n(e[s],e[s+1]);return function(e){var n=oi(t,e,1,i)-1;return o[n](r[n](e))}}function mi(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function xi(){return function(){var t,e,n,i,r,o,s=fi,a=fi,l=ci,u=gi;function c(){var t,e,n,l=Math.min(s.length,a.length);return u!==gi&&(t=s[0],e=s[l-1],t>e&&(n=t,t=e,e=n),u=function(n){return Math.max(t,Math.min(e,n))}),i=l>2?yi:pi,r=o=null,h}function h(e){return null==e||isNaN(e=+e)?n:(r||(r=i(s.map(t),a,l)))(t(u(e)))}return h.invert=function(n){return u(e((o||(o=i(a,s.map(t),Me)))(n)))},h.domain=function(t){return arguments.length?(s=Array.from(t,di),c()):s.slice()},h.range=function(t){return arguments.length?(a=Array.from(t),c()):a.slice()},h.rangeRound=function(t){return a=Array.from(t),l=hi,c()},h.clamp=function(t){return arguments.length?(u=!!t||gi,c()):u!==gi},h.interpolate=function(t){return arguments.length?(l=t,c()):l},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,i){return t=n,e=i,c()}}()(gi,gi)}var wi,bi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function _i(t){if(!(e=bi.exec(t)))throw new Error("invalid format: "+t);var e;return new Ai({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Ai(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Si(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]}function Mi(t){return(t=Si(Math.abs(t)))?t[1]:NaN}function ki(t,e){var n=Si(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")}_i.prototype=Ai.prototype,Ai.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const Ci={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>ki(100*t,e),r:ki,s:function(t,e){var n=Si(t,e);if(!n)return t+"";var i=n[0],r=n[1],o=r-(wi=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return o===s?i:o>s?i+new Array(o-s+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+Si(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Di(t){return t}var Ei,$i,Ti,Pi=Array.prototype.map,Ni=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Li(t){var e=t.domain;return t.ticks=function(t){var n=e();return Et(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return function(t,e,n,i){var r,o=Tt(t,e,n);switch((i=_i(null==i?",f":i)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Mi(e)/3)))-Mi(Math.abs(t)))}(o,s))||(i.precision=r),Ti(i,s);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Mi(e)-Mi(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(r=function(t){return Math.max(0,-Mi(Math.abs(t)))}(o))||(i.precision=r-2*("%"===i.type))}return $i(i)}(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r,o=e(),s=0,a=o.length-1,l=o[s],u=o[a],c=10;for(u<l&&(r=l,l=u,u=r,r=s,s=a,a=r);c-- >0;){if((r=$t(l,u,n))===i)return o[s]=l,o[a]=u,e(o);if(r>0)l=Math.floor(l/r)*r,u=Math.ceil(u/r)*r;else{if(!(r<0))break;l=Math.ceil(l*r)/r,u=Math.floor(u*r)/r}i=r}return t},t}function Ri(){var t=xi();return t.copy=function(){return mi(t,Ri())},Gn.apply(t,arguments),Li(t)}function Yi(t){return Math.sign(t)*t*t}function Ui(){var t,e=xi(),n=[0,1],i=!1;function r(n){var r=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(e(n));return isNaN(r)?t:i?Math.round(r):r}return r.invert=function(t){return e.invert(Yi(t))},r.domain=function(t){return arguments.length?(e.domain(t),r):e.domain()},r.range=function(t){return arguments.length?(e.range((n=Array.from(t,di)).map(Yi)),r):n.slice()},r.rangeRound=function(t){return r.range(t).round(!0)},r.round=function(t){return arguments.length?(i=!!t,r):i},r.clamp=function(t){return arguments.length?(e.clamp(t),r):e.clamp()},r.unknown=function(e){return arguments.length?(t=e,r):t},r.copy=function(){return Ui(e.domain(),n).round(i).clamp(e.clamp()).unknown(t)},Gn.apply(r,arguments),Li(r)}Ei=function(t){var e,n,i=void 0===t.grouping||void 0===t.thousands?Di:(e=Pi.call(t.grouping,Number),n=t.thousands+"",function(t,i){for(var r=t.length,o=[],s=0,a=e[0],l=0;r>0&&a>0&&(l+a+1>i&&(a=Math.max(1,i-l)),o.push(t.substring(r-=a,r+a)),!((l+=a+1)>i));)a=e[s=(s+1)%e.length];return o.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Di:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Pi.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=_i(t)).fill,n=t.align,h=t.sign,d=t.symbol,f=t.zero,g=t.width,v=t.comma,p=t.precision,y=t.trim,m=t.type;"n"===m?(v=!0,m="g"):Ci[m]||(void 0===p&&(p=12),y=!0,m="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var x="$"===d?r:"#"===d&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===d?o:/[%p]/.test(m)?l:"",b=Ci[m],_=/[defgprs%]/.test(m);function A(t){var r,o,l,d=x,A=w;if("c"===m)A=b(t)+A,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:b(Math.abs(t),p),y&&(t=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(!+t[i])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),S&&0==+t&&"+"!==h&&(S=!1),d=(S?"("===h?h:u:"-"===h||"("===h?"":h)+d,A=("s"===m?Ni[8+wi/3]:"")+A+(S&&"("===h?")":""),_)for(r=-1,o=t.length;++r<o;)if(48>(l=t.charCodeAt(r))||l>57){A=(46===l?s+t.slice(r+1):t.slice(r))+A,t=t.slice(0,r);break}}v&&!f&&(t=i(t,1/0));var M=d.length+t.length+A.length,k=M<g?new Array(g-M+1).join(e):"";switch(v&&f&&(t=i(k+t,k.length?g-A.length:1/0),k=""),n){case"<":t=d+t+A+k;break;case"=":t=d+k+t+A;break;case"^":t=k.slice(0,M=k.length>>1)+d+t+A+k.slice(M);break;default:t=k+d+t+A}return a(t)}return p=void 0===p?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),A.toString=function(){return t+""},A}return{format:h,formatPrefix:function(t,e){var n=h(((t=_i(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Mi(e)/3))),r=Math.pow(10,-i),o=Ni[8+i/3];return function(t){return n(r*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),$i=Ei.format,Ti=Ei.formatPrefix;const Oi=function(t){for(var e=new Array(10),n=0;n<10;)e[n]="#"+t.slice(6*n,6*++n);return e}("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");function Fi(t){return function(){return t}}const ji=Math.abs,Xi=Math.atan2,Hi=Math.cos,Ii=Math.max,zi=Math.min,Wi=Math.sin,qi=Math.sqrt,Bi=1e-12,Vi=Math.PI,Zi=Vi/2,Gi=2*Vi;function Qi(t){return t>=1?Zi:t<=-1?-Zi:Math.asin(t)}const Ji=Math.PI,Ki=2*Ji,tr=1e-6,er=Ki-tr;function nr(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class ir{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?nr:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return nr;const n=10**e;return function(t){this._+=t[0];for(let e=1,i=t.length;e<i;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,i){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+i}`}bezierCurveTo(t,e,n,i,r,o){this._append`C${+t},${+e},${+n},${+i},${this._x1=+r},${this._y1=+o}`}arcTo(t,e,n,i,r){if(t=+t,e=+e,n=+n,i=+i,(r=+r)<0)throw new Error(`negative radius: ${r}`);let o=this._x1,s=this._y1,a=n-t,l=i-e,u=o-t,c=s-e,h=u*u+c*c;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(h>tr)if(Math.abs(c*a-l*u)>tr&&r){let d=n-o,f=i-s,g=a*a+l*l,v=d*d+f*f,p=Math.sqrt(g),y=Math.sqrt(h),m=r*Math.tan((Ji-Math.acos((g+h-v)/(2*p*y)))/2),x=m/y,w=m/p;Math.abs(x-1)>tr&&this._append`L${t+x*u},${e+x*c}`,this._append`A${r},${r},0,0,${+(c*d>u*f)},${this._x1=t+w*a},${this._y1=e+w*l}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,i,r,o){if(t=+t,e=+e,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let s=n*Math.cos(i),a=n*Math.sin(i),l=t+s,u=e+a,c=1^o,h=o?i-r:r-i;null===this._x1?this._append`M${l},${u}`:(Math.abs(this._x1-l)>tr||Math.abs(this._y1-u)>tr)&&this._append`L${l},${u}`,n&&(h<0&&(h=h%Ki+Ki),h>er?this._append`A${n},${n},0,1,${c},${t-s},${e-a}A${n},${n},0,1,${c},${this._x1=l},${this._y1=u}`:h>tr&&this._append`A${n},${n},0,${+(h>=Ji)},${c},${this._x1=t+n*Math.cos(r)},${this._y1=e+n*Math.sin(r)}`)}rect(t,e,n,i){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+i}h${-n}Z`}toString(){return this._}}function rr(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new ir(e)}function or(t){return t.innerRadius}function sr(t){return t.outerRadius}function ar(t){return t.startAngle}function lr(t){return t.endAngle}function ur(t){return t&&t.padAngle}function cr(t,e,n,i,r,o,s){var a=t-n,l=e-i,u=(s?o:-o)/qi(a*a+l*l),c=u*l,h=-u*a,d=t+c,f=e+h,g=n+c,v=i+h,p=(d+g)/2,y=(f+v)/2,m=g-d,x=v-f,w=m*m+x*x,b=r-o,_=d*v-g*f,A=(x<0?-1:1)*qi(Ii(0,b*b*w-_*_)),S=(_*x-m*A)/w,M=(-_*m-x*A)/w,k=(_*x+m*A)/w,C=(-_*m+x*A)/w,D=S-p,E=M-y,$=k-p,T=C-y;return D*D+E*E>$*$+T*T&&(S=k,M=C),{cx:S,cy:M,x01:-c,y01:-h,x11:S*(r/b-1),y11:M*(r/b-1)}}function hr(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function dr(t,e){if((r=t.length)>1)for(var n,i,r,o=1,s=t[e[0]],a=s.length;o<r;++o)for(i=s,s=t[e[o]],n=0;n<a;++n)s[n][1]+=s[n][0]=isNaN(i[n][1])?i[n][0]:i[n][1]}function fr(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n}function gr(t,e){return t[e]}function vr(t){const e=[];return e.key=t,e}function pr(t,e,n){this.k=t,this.x=e,this.y=n}ir.prototype,Array.prototype.slice,pr.prototype={constructor:pr,scale:function(t){return 1===t?this:new pr(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new pr(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new pr(1,0,0),pr.prototype;const yr=1e3,mr=6e4,xr=36e5,wr=864e5,br=6048e5,_r=31536e6,Ar=new Date,Sr=new Date;function Mr(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=e=>(t(e=new Date(+e)),e),r.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),r.round=t=>{const e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),r.range=(n,i,o)=>{const s=[];if(n=r.ceil(n),o=null==o?1:Math.floor(o),!(n<i&&o>0))return s;let a;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<i);return s},r.filter=n=>Mr((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,i)=>{if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););})),n&&(r.count=(e,i)=>(Ar.setTime(+e),Sr.setTime(+i),t(Ar),t(Sr),Math.floor(n(Ar,Sr))),r.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?e=>i(e)%t==0:e=>r.count(0,e)%t==0):r:null)),r}const kr=Mr((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));kr.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?Mr((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):kr:null),kr.range;const Cr=Mr((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*yr)}),((t,e)=>(e-t)/yr),(t=>t.getUTCSeconds())),Dr=(Cr.range,Mr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*yr)}),((t,e)=>{t.setTime(+t+e*mr)}),((t,e)=>(e-t)/mr),(t=>t.getMinutes()))),Er=(Dr.range,Mr((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*mr)}),((t,e)=>(e-t)/mr),(t=>t.getUTCMinutes()))),$r=(Er.range,Mr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*yr-t.getMinutes()*mr)}),((t,e)=>{t.setTime(+t+e*xr)}),((t,e)=>(e-t)/xr),(t=>t.getHours()))),Tr=($r.range,Mr((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*xr)}),((t,e)=>(e-t)/xr),(t=>t.getUTCHours()))),Pr=(Tr.range,Mr((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*mr)/wr),(t=>t.getDate()-1))),Nr=(Pr.range,Mr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/wr),(t=>t.getUTCDate()-1))),Lr=(Nr.range,Mr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/wr),(t=>Math.floor(t/wr))));function Rr(t){return Mr((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*mr)/br))}Lr.range;const Yr=Rr(0),Ur=Rr(1),Or=Rr(2),Fr=Rr(3),jr=Rr(4),Xr=Rr(5),Hr=Rr(6);function Ir(t){return Mr((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/br))}Yr.range,Ur.range,Or.range,Fr.range,jr.range,Xr.range,Hr.range;const zr=Ir(0),Wr=Ir(1),qr=Ir(2),Br=Ir(3),Vr=Ir(4),Zr=Ir(5),Gr=Ir(6),Qr=(zr.range,Wr.range,qr.range,Br.range,Vr.range,Zr.range,Gr.range,Mr((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth()))),Jr=(Qr.range,Mr((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth()))),Kr=(Jr.range,Mr((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear())));Kr.every=t=>isFinite(t=Math.floor(t))&&t>0?Mr((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null,Kr.range;const to=Mr((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));function eo(t,e,n,i,r,o){const s=[[Cr,1,yr],[Cr,5,5e3],[Cr,15,15e3],[Cr,30,3e4],[o,1,mr],[o,5,3e5],[o,15,9e5],[o,30,18e5],[r,1,xr],[r,3,108e5],[r,6,216e5],[r,12,432e5],[i,1,wr],[i,2,1728e5],[n,1,br],[e,1,2592e6],[e,3,7776e6],[t,1,_r]];function a(e,n,i){const r=Math.abs(n-e)/i,o=bt((([,,t])=>t)).right(s,r);if(o===s.length)return t.every(Tt(e/_r,n/_r,i));if(0===o)return kr.every(Math.max(Tt(e,n,i),1));const[a,l]=s[r/s[o-1][2]<s[o][2]/r?o-1:o];return a.every(l)}return[function(t,e,n){const i=e<t;i&&([t,e]=[e,t]);const r=n&&"function"==typeof n.range?n:a(t,e,n),o=r?r.range(t,+e+1):[];return i?o.reverse():o},a]}to.every=t=>isFinite(t=Math.floor(t))&&t>0?Mr((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null,to.range;const[no,io]=eo(to,Jr,zr,Lr,Tr,Er),[ro,oo]=eo(Kr,Qr,Yr,Pr,$r,Dr);function so(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ao(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function lo(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var uo,co,ho={"-":"",_:" ",0:"0"},fo=/^\s*\d+/,go=/^%/,vo=/[\\^$*+?|[\]().{}]/g;function po(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<n?new Array(n-o+1).join(e)+r:r)}function yo(t){return t.replace(vo,"\\$&")}function mo(t){return new RegExp("^(?:"+t.map(yo).join("|")+")","i")}function xo(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function wo(t,e,n){var i=fo.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function bo(t,e,n){var i=fo.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function _o(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function Ao(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function So(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function Mo(t,e,n){var i=fo.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function ko(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function Co(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function Do(t,e,n){var i=fo.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function Eo(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function $o(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function To(t,e,n){var i=fo.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function Po(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function No(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function Lo(t,e,n){var i=fo.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function Ro(t,e,n){var i=fo.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function Yo(t,e,n){var i=fo.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function Uo(t,e,n){var i=go.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function Oo(t,e,n){var i=fo.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function Fo(t,e,n){var i=fo.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function jo(t,e){return po(t.getDate(),e,2)}function Xo(t,e){return po(t.getHours(),e,2)}function Ho(t,e){return po(t.getHours()%12||12,e,2)}function Io(t,e){return po(1+Pr.count(Kr(t),t),e,3)}function zo(t,e){return po(t.getMilliseconds(),e,3)}function Wo(t,e){return zo(t,e)+"000"}function qo(t,e){return po(t.getMonth()+1,e,2)}function Bo(t,e){return po(t.getMinutes(),e,2)}function Vo(t,e){return po(t.getSeconds(),e,2)}function Zo(t){var e=t.getDay();return 0===e?7:e}function Go(t,e){return po(Yr.count(Kr(t)-1,t),e,2)}function Qo(t){var e=t.getDay();return e>=4||0===e?jr(t):jr.ceil(t)}function Jo(t,e){return t=Qo(t),po(jr.count(Kr(t),t)+(4===Kr(t).getDay()),e,2)}function Ko(t){return t.getDay()}function ts(t,e){return po(Ur.count(Kr(t)-1,t),e,2)}function es(t,e){return po(t.getFullYear()%100,e,2)}function ns(t,e){return po((t=Qo(t)).getFullYear()%100,e,2)}function is(t,e){return po(t.getFullYear()%1e4,e,4)}function rs(t,e){var n=t.getDay();return po((t=n>=4||0===n?jr(t):jr.ceil(t)).getFullYear()%1e4,e,4)}function os(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+po(e/60|0,"0",2)+po(e%60,"0",2)}function ss(t,e){return po(t.getUTCDate(),e,2)}function as(t,e){return po(t.getUTCHours(),e,2)}function ls(t,e){return po(t.getUTCHours()%12||12,e,2)}function us(t,e){return po(1+Nr.count(to(t),t),e,3)}function cs(t,e){return po(t.getUTCMilliseconds(),e,3)}function hs(t,e){return cs(t,e)+"000"}function ds(t,e){return po(t.getUTCMonth()+1,e,2)}function fs(t,e){return po(t.getUTCMinutes(),e,2)}function gs(t,e){return po(t.getUTCSeconds(),e,2)}function vs(t){var e=t.getUTCDay();return 0===e?7:e}function ps(t,e){return po(zr.count(to(t)-1,t),e,2)}function ys(t){var e=t.getUTCDay();return e>=4||0===e?Vr(t):Vr.ceil(t)}function ms(t,e){return t=ys(t),po(Vr.count(to(t),t)+(4===to(t).getUTCDay()),e,2)}function xs(t){return t.getUTCDay()}function ws(t,e){return po(Wr.count(to(t)-1,t),e,2)}function bs(t,e){return po(t.getUTCFullYear()%100,e,2)}function _s(t,e){return po((t=ys(t)).getUTCFullYear()%100,e,2)}function As(t,e){return po(t.getUTCFullYear()%1e4,e,4)}function Ss(t,e){var n=t.getUTCDay();return po((t=n>=4||0===n?Vr(t):Vr.ceil(t)).getUTCFullYear()%1e4,e,4)}function Ms(){return"+0000"}function ks(){return"%"}function Cs(t){return+t}function Ds(t){return Math.floor(+t/1e3)}function Es(t){return new Date(t)}function $s(t){return t instanceof Date?+t:+new Date(+t)}function Ts(t,e,n,i,r,o,s,a,l,u){var c=xi(),h=c.invert,d=c.domain,f=u(".%L"),g=u(":%S"),v=u("%I:%M"),p=u("%I %p"),y=u("%a %d"),m=u("%b %d"),x=u("%B"),w=u("%Y");function b(t){return(l(t)<t?f:a(t)<t?g:s(t)<t?v:o(t)<t?p:i(t)<t?r(t)<t?y:m:n(t)<t?x:w)(t)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?d(Array.from(t,$s)):d().map(Es)},c.ticks=function(e){var n=d();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?b:u(e)},c.nice=function(t){var n=d();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?d(function(t,e){var n,i=0,r=(t=t.slice()).length-1,o=t[i],s=t[r];return s<o&&(n=i,i=r,r=n,n=o,o=s,s=n),t[i]=e.floor(o),t[r]=e.ceil(s),t}(n,t)):c},c.copy=function(){return mi(c,Ts(t,e,n,i,r,o,s,a,l,u))},c}function Ps(t){this._context=t}function Ns(t){return new Ps(t)}function Ls(t){return t[0]}function Rs(t){return t[1]}function Ys(t,e){var n=Fi(!0),i=null,r=Ns,o=null,s=rr(a);function a(a){var l,u,c,h=(a=hr(a)).length,d=!1;for(null==i&&(o=r(c=s())),l=0;l<=h;++l)!(l<h&&n(u=a[l],l,a))===d&&((d=!d)?o.lineStart():o.lineEnd()),d&&o.point(+t(u,l,a),+e(u,l,a));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?Ls:Fi(t),e="function"==typeof e?e:void 0===e?Rs:Fi(e),a.x=function(e){return arguments.length?(t="function"==typeof e?e:Fi(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Fi(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Fi(!!t),a):n},a.curve=function(t){return arguments.length?(r=t,null!=i&&(o=r(i)),a):r},a.context=function(t){return arguments.length?(null==t?i=o=null:o=r(i=t),a):i},a}function Us(t,e,n){var i=null,r=Fi(!0),o=null,s=Ns,a=null,l=rr(u);function u(u){var c,h,d,f,g,v=(u=hr(u)).length,p=!1,y=new Array(v),m=new Array(v);for(null==o&&(a=s(g=l())),c=0;c<=v;++c){if(!(c<v&&r(f=u[c],c,u))===p)if(p=!p)h=c,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),d=c-1;d>=h;--d)a.point(y[d],m[d]);a.lineEnd(),a.areaEnd()}p&&(y[c]=+t(f,c,u),m[c]=+e(f,c,u),a.point(i?+i(f,c,u):y[c],n?+n(f,c,u):m[c]))}if(g)return a=null,g+""||null}function c(){return Ys().defined(r).curve(s).context(o)}return t="function"==typeof t?t:void 0===t?Ls:Fi(+t),e="function"==typeof e?e:Fi(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?Rs:Fi(+n),u.x=function(e){return arguments.length?(t="function"==typeof e?e:Fi(+e),i=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:Fi(+e),u):t},u.x1=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:Fi(+t),u):i},u.y=function(t){return arguments.length?(e="function"==typeof t?t:Fi(+t),n=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:Fi(+t),u):e},u.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Fi(+t),u):n},u.lineX0=u.lineY0=function(){return c().x(t).y(e)},u.lineY1=function(){return c().x(t).y(n)},u.lineX1=function(){return c().x(i).y(e)},u.defined=function(t){return arguments.length?(r="function"==typeof t?t:Fi(!!t),u):r},u.curve=function(t){return arguments.length?(s=t,null!=o&&(a=s(o)),u):s},u.context=function(t){return arguments.length?(null==t?o=a=null:a=s(o=t),u):o},u}uo=function(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,o=t.days,s=t.shortDays,a=t.months,l=t.shortMonths,u=mo(r),c=xo(r),h=mo(o),d=xo(o),f=mo(s),g=xo(s),v=mo(a),p=xo(a),y=mo(l),m=xo(l),x={a:function(t){return s[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:jo,e:jo,f:Wo,g:ns,G:rs,H:Xo,I:Ho,j:Io,L:zo,m:qo,M:Bo,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Cs,s:Ds,S:Vo,u:Zo,U:Go,V:Jo,w:Ko,W:ts,x:null,X:null,y:es,Y:is,Z:os,"%":ks},w={a:function(t){return s[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:ss,e:ss,f:hs,g:_s,G:Ss,H:as,I:ls,j:us,L:cs,m:ds,M:fs,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Cs,s:Ds,S:gs,u:vs,U:ps,V:ms,w:xs,W:ws,x:null,X:null,y:bs,Y:As,Z:Ms,"%":ks},b={a:function(t,e,n){var i=f.exec(e.slice(n));return i?(t.w=g.get(i[0].toLowerCase()),n+i[0].length):-1},A:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=d.get(i[0].toLowerCase()),n+i[0].length):-1},b:function(t,e,n){var i=y.exec(e.slice(n));return i?(t.m=m.get(i[0].toLowerCase()),n+i[0].length):-1},B:function(t,e,n){var i=v.exec(e.slice(n));return i?(t.m=p.get(i[0].toLowerCase()),n+i[0].length):-1},c:function(t,n,i){return S(t,e,n,i)},d:$o,e:$o,f:Yo,g:ko,G:Mo,H:Po,I:Po,j:To,L:Ro,m:Eo,M:No,p:function(t,e,n){var i=u.exec(e.slice(n));return i?(t.p=c.get(i[0].toLowerCase()),n+i[0].length):-1},q:Do,Q:Oo,s:Fo,S:Lo,u:bo,U:_o,V:Ao,w:wo,W:So,x:function(t,e,i){return S(t,n,e,i)},X:function(t,e,n){return S(t,i,e,n)},y:ko,Y:Mo,Z:Co,"%":Uo};function _(t,e){return function(n){var i,r,o,s=[],a=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++a<u;)37===t.charCodeAt(a)&&(s.push(t.slice(l,a)),null!=(r=ho[i=t.charAt(++a)])?i=t.charAt(++a):r="e"===i?" ":"0",(o=e[i])&&(i=o(n,r)),s.push(i),l=a+1);return s.push(t.slice(l,a)),s.join("")}}function A(t,e){return function(n){var i,r,o=lo(1900,void 0,1);if(S(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=ao(lo(o.y,0,1))).getUTCDay(),i=r>4||0===r?Wr.ceil(i):Wr(i),i=Nr.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=so(lo(o.y,0,1))).getDay(),i=r>4||0===r?Ur.ceil(i):Ur(i),i=Pr.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?ao(lo(o.y,0,1)).getUTCDay():so(lo(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,ao(o)):so(o)}}function S(t,e,n,i){for(var r,o,s=0,a=e.length,l=n.length;s<a;){if(i>=l)return-1;if(37===(r=e.charCodeAt(s++))){if(r=e.charAt(s++),!(o=b[r in ho?e.charAt(s++):r])||(i=o(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return x.x=_(n,x),x.X=_(i,x),x.c=_(e,x),w.x=_(n,w),w.X=_(i,w),w.c=_(e,w),{format:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},parse:function(t){var e=A(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=A(t+="",!0);return e.toString=function(){return t},e}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),uo.format,uo.parse,co=uo.utcFormat,uo.utcParse,Ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Os,Fs,js=Hs(Ns);function Xs(t){this._curve=t}function Hs(t){function e(e){return new Xs(t(e))}return e._curve=t,e}function Is(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(Hs(t)):e()._curve},t}function zs(){return Is(Ys().curve(js))}function Ws(){}function qs(t){this._context=t}function Bs(t){return new qs(t)}function Vs(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){t.done?r(t.value):function(t){return t instanceof n?t:new n((function(e){e(t)}))}(t.value).then(s,a)}l((i=i.apply(t,e||[])).next())}))}Xs.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}},qs.prototype={areaStart:Ws,areaEnd:Ws,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},"function"==typeof SuppressedError&&SuppressedError,function(t){t.x="x",t.y="y",t.z="z",t.color="color"}(Os||(Os={})),function(t){t.line="line",t.area="area",t.scatter="scatter",t.box="box",t.bar="bar",t.stacked="stacked",t.anomaly="anomaly",t.curtain="curtain",t.curtain_anomaly="curtain_anomaly",t.seasonal="seasonal",t.radial="radial",t.pie="pie",t.windrose="windrose"}(Fs||(Fs={}));class Zs extends i.ZC{constructor(t){super(t),this.scrubSettingsDefaults={enabled:!0,axis:Os.x},this.legendSettingsDefaults={hide:!1,axis:Os.y},this.id=t.id,this.type=t.type,this.chart=t.chart,this.dimensions=t.dimensions,this.style=t.style,this.scrubbing=t.scrubbing,this.onDataLoad=t.onDataLoad,this.axisSettings=t.axisSettings,this.scrubSettings=Object.assign(Object.assign({},this.scrubSettingsDefaults),t.scrubSettings),this.legendSettings=Object.assign(Object.assign({},this.legendSettingsDefaults),t.legendSettings),this.runtime={}}getAxisSetting(t){if(void 0===this.axisSettings)return{};const e=this.axisSettings[t];return void 0===e?{}:e}getDomainAccessor(t){var e,n,i,r,o,s;const a=void 0!==(null===(i=null===(n=null===(e=this.runtime)||void 0===e?void 0:e.data)||void 0===n?void 0:n.parsed)||void 0===i?void 0:i.domainAccessors)?this.runtime.data.parsed.domainAccessors:{},l=void 0!==(null===(s=null===(o=null===(r=this.runtime)||void 0===r?void 0:r.data)||void 0===o?void 0:o.parsed)||void 0===s?void 0:s.accessors)?this.runtime.data.parsed.accessors:{};return void 0!==a[t]?a[t]:void 0!==l[t]?l[t]:e=>"number"==typeof e||e instanceof Date||"string"==typeof e?e:e[t]}getAvailableAccessors(){var t,e,n;return void 0!==(null===(n=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===n?void 0:n.accessors)?this.runtime.data.parsed.accessors:{}}getAccessorsAtAxis(t){const e=this.getAvailableAccessors(),n=this.getAxisSetting(t),i=void 0!==n.accessProperties?n.accessProperties:{},r=Object.keys(e).filter((e=>e.startsWith(t))),o=Object.fromEntries(r.map((t=>[t,e[t]])));return Object.keys(i).forEach((t=>{const n=i[t],r=e[n];void 0!==r&&(o[t]=r)})),o}getAccessorAtAxis(t){const e=this.getAccessorsAtAxis(t)[t];if(void 0!==e)return e;const n=this.getAvailableAccessors();return void 0!==n[t]?n[t]:void 0}getDomain(t){var e;return Vs(this,void 0,void 0,(function*(){const n=yield this.getData(),i=void 0!==(null===(e=null==n?void 0:n.parsed)||void 0===e?void 0:e.data)?n.parsed.data:[],o=this.getDomainAccessor(t),s=i.map((t=>o(t))).flat().filter((t=>null!=t));return(0,r.A)(s)}))}getXDomain(){return Vs(this,void 0,void 0,(function*(){return yield this.getDomain("x")}))}getYDomain(){return Vs(this,void 0,void 0,(function*(){return yield this.getDomain("y")}))}draw(){return Vs(this,void 0,void 0,(function*(){this.data=yield this.getData()}))}onLegendReady(t){this.chart.emitPlotLegendReady(this.id,t)}onScrub(t){this.chart.emitPlotScrub(this.id,t)}onScrubEnd(){this.chart.emitPlotScrubEnd(this.id)}destroy(){}}class Gs{constructor(t){this.plots=t.plots.map((t=>Object.assign({},t))),this.settings=t.settings,this.element=t.element,this.onChartDrew=t.onChartDrew,this.onPlotDataLoad=t.onPlotDataLoad,this.onPlotLegendReady=t.onPlotLegendReady,this.onPlotScrub=t.onPlotScrub,this.onPlotScrubEnd=t.onPlotScrubEnd,this.runtime={prevWidth:0,prevHeight:0}}emitPlotLegendReady(t,e){void 0!==this.onPlotLegendReady&&this.onPlotLegendReady(t,e)}emitPlotScrub(t,e){void 0!==this.onPlotScrub&&this.onPlotScrub(t,e)}emitPlotScrubEnd(t){void 0!==this.onPlotScrubEnd&&this.onPlotScrubEnd(t)}onError(t){}onResize(t,e){console.log("RESIZE!"),console.log(this)}getWidth(){return"auto"===this.settings.width?null!=this.element?this.element.clientWidth:400:this.settings.width}onDraw(){}getDomainForPlotImplementations(t,e){return Vs(this,void 0,void 0,(function*(){const n=yield Promise.all(t.map((t=>Vs(this,void 0,void 0,(function*(){return yield t.getDomain(e)})))));return(0,r.A)(n.flat())}))}reversePlotAxis(t,e){return!0===t.getAxisSetting(e).reverse}getDimensionAxisParam(t,e){const n=t.dimensions[e],i=t.getAxisSetting(e);let r=e;return void 0!==i.parameter?r=i.parameter:void 0!==n&&(void 0!==n.parameter?r=n.parameter:void 0!==n.property?r=n.property:void 0!==n.properties&&(r=n.properties.join(","))),r}getPlotImplementationGroups(t,e){const n=(0,o.groupBy)(t,(t=>`${this.getDimensionAxisParam(t,e)}${this.reversePlotAxis(t,e)?".reverse":""}`)),i={};return Object.keys(n).forEach((t=>{const r={plots:n[t],reverse:this.reversePlotAxis(n[t][0],e),parameter:this.getDimensionAxisParam(n[t][0],e)};i[t]=r})),i}getXRange(t){return[0,t]}getYRange(t){return[t,0]}getChartWidth(){const t=this.getYAxesWidth();return this.getWidth()-t-this.settings.margin.right}getChartHeight(){const t=void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"x"):{},e=Object.keys(t).length;return this.settings.height-this.settings.margin.top-this.settings.margin.bottom*e}getYAxesWidth(){const t=void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"y"):{};return this.settings.margin.left*Object.keys(t).length}debouncedResize(){var t;void 0!==(null===(t=this.runtime.resizeEventHandler)||void 0===t?void 0:t.cancel)&&(this.runtime.resizeEventHandler.cancel(),console.log("cancel")),this.runtime.resizeEventHandler=(0,o.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),this.runtime.resizeEventHandler()}init(t=!1){var e;return Vs(this,void 0,void 0,(function*(){this.runtime.resizeEventHandler=(0,o.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),window.addEventListener("resize",(()=>{this.debouncedResize()})),null===(e=this.plotImplementations)||void 0===e||e.forEach((t=>{t.destroy()})),this.plotImplementations=this.createPlots();const{margin:n}=this.settings,i=this.getPlotImplementationGroups(this.plotImplementations,"x"),r=this.getChartHeight(),s=this.getPlotImplementationGroups(this.plotImplementations,"y"),a=[],l=this.getYRange(r);yield Promise.all(Object.keys(s).map(((t,e)=>Vs(this,void 0,void 0,(function*(){const i=s[t],r=i.plots,o={scale:{domain:yield this.getDomainForPlotImplementations(s[t].plots,Os.y),range:i.reverse?l.slice().reverse():l},plots:r,key:t,offset:{x:n.left+n.left*e,y:n.top}};r.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.y=o})),a.push(o)}))))),this.showYAxes(a);const u=this.getYAxesWidth(),c=this.getChartWidth(),h=this.getXRange(c),d=[];yield Promise.all(Object.keys(i).map(((t,e)=>Vs(this,void 0,void 0,(function*(){const o=i[t],s=o.plots,a={scale:{domain:yield this.getDomainForPlotImplementations(s,Os.x),range:o.reverse?h.slice().reverse():h},plots:s,key:t,offset:{x:u,y:n.top+r+n.bottom*e}};s.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.x=a})),d.push(a)}))))),this.showXAxes(d),t&&(yield this.draw())}))}showAxes(t,e){}showYAxes(t){}showXAxes(t){}adjustYAxis(){}draw(){return Vs(this,void 0,void 0,(function*(){const t=this.plotImplementations;void 0!==t&&(yield Promise.all(t.map((t=>Vs(this,void 0,void 0,(function*(){yield t.draw()}))))),void 0!==this.onChartDrew&&this.onChartDrew())}))}destroy(){}createPlots(){return this.plots.map((t=>this.createPlot(t)))}getPlotImplementationProps(t){return Object.assign(Object.assign({},t),{chart:this,onDataLoad:this.onPlotDataLoad})}createPlot(t){return new Zs(this.getPlotImplementationProps(t))}}class Qs extends Zs{}class Js extends Qs{constructor(){super(...arguments),this.onMouseScrub=t=>{const e=this.chart;if(void 0===e.onPlotScrub)return;const n=this.getAccessorAtAxis("x"),i=this.getAccessorAtAxis("y");if(void 0===this.scrubSettings.axis||void 0===this.xScale||void 0===this.yScale||void 0===n||void 0===i||void 0===this.parsedData||void 0===this.offset)return;const r=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,n,i,this.parsedData,this.offset);void 0!==r&&void 0!==r.x&&(this.onScrub(r),e.drawPlotScrubbing(this.id,r,this.style,this.scrubSettings))},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}getDomainAccessor(t){var e,n,i;const r=void 0!==(null===(i=null===(n=null===(e=this.runtime)||void 0===e?void 0:e.data)||void 0===n?void 0:n.parsed)||void 0===i?void 0:i.accessors)?this.runtime.data.parsed.accessors:{};return void 0!==r[t]?r[t]:e=>"number"==typeof e||e instanceof Date||"string"==typeof e?e:e[t]}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,g;return Vs(this,void 0,void 0,(function*(){const v=void 0!==this.style?this.style:{};if(void 0===this.parsedData){const t=yield this.getData();this.emitDataLoad(t),this.parsedData=null===(e=null==t?void 0:t.parsed)||void 0===e?void 0:e.data}const p=this.getAccessorAtAxis("x"),y=this.getAccessorAtAxis("y"),m=this.chart,x=m.getCanvasContext();if(null===x)return;const w=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,b=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===w||void 0===b||void 0===this.parsedData||void 0===p||void 0===y)return;this.offset={x:void 0!==(null===(l=null===(a=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.x)||void 0===a?void 0:a.offset)||void 0===l?void 0:l.x)?this.axes.x.offset.x:0,y:void 0!==(null===(h=null===(c=null===(u=null==this?void 0:this.axes)||void 0===u?void 0:u.y)||void 0===c?void 0:c.offset)||void 0===h?void 0:h.y)?this.axes.y.offset.y:0},this.xScale=m.getD3XScale(w),this.yScale=m.getD3YScale(b),x.strokeStyle=this.getStrokeStyle(),x.lineWidth=this.getLineWidth(),x.setLineDash([]),x.lineCap="square";const _=Ys().x((t=>{if(void 0===this.xScale||void 0===this.offset)return 0;const e=p(t),n=this.xScale(e);return void 0===n?0:n+this.offset.x})).y((t=>{if(void 0===this.yScale||void 0===this.offset)return 0;const e=y(t),n=this.yScale(e);return void 0===n?0:n+this.offset.y})).defined((t=>{const e=y(t);return!(null==e||isNaN(+e))}));if(_.context(x),x.beginPath(),void 0!==(null==v?void 0:v.strokeDash)&&x.setLineDash(v.strokeDash),_(this.parsedData),x.stroke(),void 0!==this.legendSettings.axis&&void 0!==this.axes&&(null===(d=this.legendSettings.hide)||void 0===d||!d)){const e=this.axes[this.legendSettings.axis];void 0!==e&&t.onLegendReady.call(this,[{id:e.key,label:null!==(g=null!==(f=m.getAxisLabel(e,this.legendSettings.axis))&&void 0!==f?f:e.label)&&void 0!==g?g:e.key,style:{backgroundColor:x.strokeStyle}}])}this.setupScrubbing()}))}setupScrubbing(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.addEventListener("mouseleave",this.onScrubEnd))}getStrokeStyle(){const t=void 0!==this.style?this.style:{};return void 0!==t.strokeColor?t.strokeColor:"#333"}getLineWidth(){const t=void 0!==this.style?this.style:{};return void 0!==t.strokeWidth?t.strokeWidth:1}emitDataLoad(t){void 0!==this.onDataLoad&&this.onDataLoad({plotId:this.id,data:t})}destroy(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.removeEventListener("mouseleave",this.onScrubEnd))}}class Ks extends Qs{getMaxAccessorAtAxis(t){return this.getAccessorsAtAxis(t)[`${t}1`]}getMinAccessorAtAxis(t){return this.getAccessorsAtAxis(t)[`${t}0`]}getDomainAccessor(t){const e=this.getMinAccessorAtAxis(t),n=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==n)return t=>[e(t),n(t)];const i=this.getAccessorAtAxis(t);return void 0!==i?i:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:function(t,e){let n=0;for(let e of t)(e=+e)&&(n+=e);return n}(Object.values(t))}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,g;return Vs(this,void 0,void 0,(function*(){const v=void 0!==this.style?this.style:{},p=yield this.getData(),y=null===(e=null==p?void 0:p.parsed)||void 0===e?void 0:e.data,m=this.getAccessorsAtAxis("x"),x=this.getAccessorAtAxis("x"),w=m.x0,b=m.x1,_=this.getAccessorsAtAxis("y"),A=this.getAccessorAtAxis("y"),S=_.y0,M=_.y1,k={x:void 0!==(null===(r=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.offset)||void 0===r?void 0:r.x)?this.axes.x.offset.x:0,y:void 0!==(null===(a=null===(s=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===s?void 0:s.offset)||void 0===a?void 0:a.y)?this.axes.y.offset.y:0},C=this.chart,D=C.getCanvasContext();if(null===D)return;const E=null===(u=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.x)||void 0===u?void 0:u.scale,$=null===(h=null===(c=null==this?void 0:this.axes)||void 0===c?void 0:c.y)||void 0===h?void 0:h.scale;if(void 0===E||void 0===$||void 0===y||void 0===x&&void 0===w&&void 0===b||void 0===A&&void 0===S&&void 0===M)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const T=C.getD3XScale(E),P=C.getD3YScale($),N=(t,e,n)=>i=>{const r=t(i),o=e(r);return void 0===o?0:o+n};D.fillStyle=void 0!==v.fill?v.fill:"#EDEDED";const L=Us();var R;void 0!==w&&void 0!==b?(L.x0(N(w,T,k.x)),L.x1(N(b,T,k.x))):void 0!==x&&L.x(N(x,T,k.x)),void 0!==S&&void 0!==M?(L.y0(N(S,P,k.y)),L.y1(N(M,P,k.y)),L.defined((R=M,t=>{const e=R(t);return!(null==e||isNaN(+e))}))):void 0!==A&&L.y(N(A,P,k.y)),L.context(D),D.beginPath(),L(y),D.fill(),void 0===(null===(d=this.axes)||void 0===d?void 0:d.y)||null!==(f=this.legendSettings.hide)&&void 0!==f&&f||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(g=C.getAxisLabel(this.axes.y,"y"))&&void 0!==g?g:this.axes.y.key,style:{backgroundColor:D.fillStyle}}])}))}}const ta={Line:Js,Area:Ks,Scatter:class extends Qs{constructor(){super(...arguments),this.circleClass=`${this.id}-scrub-circle`,this.onMouseScrub=t=>{const e=this.chart;if(void 0===e.onPlotScrub)return;const n=this.getAccessorAtAxis("x"),i=this.getAccessorAtAxis("y");if(void 0===this.scrubSettings.axis||void 0===this.xScale||void 0===this.yScale||void 0===n||void 0===i||void 0===this.parsedData||void 0===this.offset)return;const r=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,n,i,this.parsedData,this.offset);void 0!==r&&void 0!==r.x&&(this.onScrub(r),e.drawPlotScrubbing(this.id,r,this.style,this.scrubSettings))},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}getDomainAccessor(t){var e,n,i;const r=void 0!==(null===(i=null===(n=null===(e=this.runtime)||void 0===e?void 0:e.data)||void 0===n?void 0:n.parsed)||void 0===i?void 0:i.accessors)?this.runtime.data.parsed.accessors:{};return void 0!==r[t]?r[t]:e=>"number"==typeof e||e instanceof Date||"string"==typeof e?e:e[t]}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,g;return Vs(this,void 0,void 0,(function*(){const v=void 0!==this.style?this.style:{},p=yield this.getData();this.parsedData=null===(e=null==p?void 0:p.parsed)||void 0===e?void 0:e.data;const y=this.getAccessorAtAxis("x"),m=this.getAccessorAtAxis("y"),x=this.chart,w=x.getCanvasContext();if(null===w)return;const b=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,_=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===b||void 0===_||void 0===this.parsedData||void 0===y||void 0===m)return;this.offset={x:void 0!==(null===(l=null===(a=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.x)||void 0===a?void 0:a.offset)||void 0===l?void 0:l.x)?this.axes.x.offset.x:0,y:void 0!==(null===(h=null===(c=null===(u=null==this?void 0:this.axes)||void 0===u?void 0:u.y)||void 0===c?void 0:c.offset)||void 0===h?void 0:h.y)?this.axes.y.offset.y:0},this.xScale=x.getD3XScale(b);const A=t=>{if(void 0===this.xScale||void 0===this.offset)return 0;const e=y(t),n=this.xScale(e);return void 0===n?0:n+this.offset.x};this.yScale=x.getD3YScale(_);const S=t=>{if(void 0===this.yScale||void 0===this.offset)return 0;const e=m(t),n=this.yScale(e);return void 0===n?0:n+this.offset.y};w.strokeStyle=void 0!==v.strokeColor?v.strokeColor:"#FFF";const M=void 0!==v.radius?v.radius:2;w.lineWidth=void 0!==v.strokeWidth||void 0!==v.strokeColor?(void 0!==v.strokeWidth?v.strokeWidth:1)+M:0,w.fillStyle=void 0!==v.fill?v.fill:"#666",this.parsedData.forEach((t=>{(t=>{const e=m(t);return!(null==e||isNaN(+e))})(t)&&(w.beginPath(),w.arc(A(t),S(t),M,0,2*Math.PI),w.stroke(),w.fill())})),void 0===(null===(d=this.axes)||void 0===d?void 0:d.y)||null!==(f=this.legendSettings.hide)&&void 0!==f&&f||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(g=x.getAxisLabel(this.axes.y,"y"))&&void 0!==g?g:this.axes.y.key,style:{backgroundColor:w.fillStyle,border:`1px solid ${w.strokeStyle}`}}]),this.setupScrubbing()}))}setupScrubbing(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.addEventListener("mouseleave",this.onScrubEnd))}destroy(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.removeEventListener("mouseleave",this.onScrubEnd))}},Bar:class extends Qs{constructor(t){super(t),this.legendHeight=12,this.legendPaddingTop=8;const e=this.chart.getChartElements();void 0!==(null==e?void 0:e.svg)&&e.svg.style("z-index",20)}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o;return Vs(this,void 0,void 0,(function*(){const s=yield this.getData(),a=null===(e=null==s?void 0:s.parsed)||void 0===e?void 0:e.data;if(void 0===a)return;const l=this.getAccessorAtAxis("x"),u=null===(n=s.parsed)||void 0===n?void 0:n.accessors.y;if(void 0===l||void 0===u)return;const c=null===(i=s.parsed)||void 0===i?void 0:i.accessors.y2,h=this.dimensions,d=h.y.property,f=h.y.label,g=this.dimensions.y2.property,v=this.dimensions.y2.label,p=this.chart,y=p.getChartElements();if(void 0===y||null===y.svg||void 0===d||void 0===f)return;void 0!==y.svg.select("g")&&y.svg.select("g").remove();let{height:m}=p.settings,x=p.getWidth();x=Number(x),m=Number(m);const w=void 0===g?0:1,b=24*w,_=36*w*w+b,A=m-48-this.legendHeight-this.legendPaddingTop-4,S=x-36-24-_,M=x-S-_,k=x-_,C=a.map((t=>l(t))),D=[d];void 0!==g&&void 0!==c&&D.push(g);const E=ei(null!==(o=null===(r=this.style)||void 0===r?void 0:r.colors)&&void 0!==o?o:Oi).domain(D),$=y.svg.insert("g"),T=this.getXScale(M,k,C),P=this.getYScale(A,4,a,u),N=this.getY2Scale(A,4,a,c),L=this.getSubgroupScales(d,P,g,N),R=ni().domain(D).range([0,T.bandwidth()]).padding(.05);var Y;$.append("g").attr("width",S).attr("height",A).selectAll("g").data(a).enter().append("g").attr("transform",(t=>`translate(${Number(T(l(t)))}, 0)`)).selectAll("rect").data((t=>Object.keys(this.dimensions).filter((t=>"x"!==t)).map((e=>{var n,i,r,o,s;return{label:null!==(n=this.dimensions[e].label)&&void 0!==n?n:e,key:null!==(i=this.dimensions[e].property)&&void 0!==i?i:"",x:t[null!==(o=null===(r=this.dimensions.x)||void 0===r?void 0:r.property)&&void 0!==o?o:"x"],value:t[null!==(s=this.dimensions[e].property)&&void 0!==s?s:""]}})))).enter().append("rect").attr("x",(t=>Number(R(t.key)))).attr("y",(t=>Number(L[t.key](t.value)))).attr("width",R.bandwidth()).attr("height",(t=>A-Number(L[t.key](t.value)))).attr("fill",(t=>E(t.key))).classed("bar",!0).on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})),$.append("g").attr("transform",`translate(0, ${A})`).call(zt(T)).selectAll("text").attr("text-anchor","end").attr("transform","rotate(-45)translate(-10, 0)"),$.append("g").call(Wt(P)).attr("transform","translate(60, 0)"),void 0!==N&&$.append("g").call((Y=N,It(Lt,Y))).attr("transform",`translate(${x-_}, 0)`),$.append("text").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-1*A/2).attr("y",24).attr("font-weight",800).text(f),void 0!==v&&$.append("text").attr("text-anchor","middle").attr("transform","rotate(90)").attr("x",1*A/2).attr("y",-1*(x-b)).attr("font-weight",800).text(v),t.onLegendReady.call(this,Object.keys(this.dimensions).filter((t=>"x"!==t)).map((t=>{var e,n;return{id:t,label:null!==(e=this.dimensions[t].label)&&void 0!==e?e:t,style:{backgroundColor:void 0===this.dimensions[t].property?"":E(null!==(n=this.dimensions[t].property)&&void 0!==n?n:"")}}})))}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.x},y:{position:t.offsetY,value:e.value}})}getXScale(t,e,n){return ni().domain(n).range([t,e]).padding(.25)}getYScale(t,e,n,i){return Ri().domain([0,Number(At(n,(t=>i(t))))]).range([t,e])}getY2Scale(t,e,n,i){if(void 0!==i)return this.getYScale(t,e,n,i)}getSubgroupScales(t,e,n,i){const r={[t]:e};return void 0!==n&&void 0!==i&&(r[n]=i),r}}};!function(t,e){void 0===e&&(e={});var n=e.insertAt;if(t&&"undefined"!=typeof document){var i=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===n&&i.firstChild?i.insertBefore(r,i.firstChild):i.appendChild(r),r.styleSheet?r.styleSheet.cssText=t:r.appendChild(document.createTextNode(t))}}(".chart .axis .tick text{\n    fill:#333;\n    font-size:12px;\n}\n\n.chart .y-axis .radial-axis .tick text{\n    stroke:#FFF;\n    stroke-width:5px;\n    paint-order: stroke;\n    font-size:14px;\n    fill:#000;\n\n}\n\n.chart .axis .tick line,\n.chart .axis .tick circle{\n    stroke:#CCC;\n    stroke-width:.5px;\n}");class ea extends Gs{updateD3AxisSettings(t,e){void 0!==e.ticks&&t.ticks(e.ticks),void 0!==e.tickFormat&&t.tickFormat(e.tickFormat)}getD3Scale(t){const e=t.domain[0]instanceof Date?function(){return Gn.apply(Ts(no,io,to,Jr,zr,Nr,Tr,Er,Cr,co).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}().domain(t.domain).range(t.range):Ri().domain(t.domain).range(t.range);return e}getD3YScale(t){return this.getD3Scale(t)}getD3XScale(t){return this.getD3Scale(t)}getYAxis(t,e,n){if(void 0===t.scale)return t=>t;const i=Wt(this.getD3YScale(t.scale));this.updateD3AxisSettings(i,e);const r=t.scale.range[1]-t.scale.range[0],o=Math.min(r/2,void 0!==e.tickSpace?e.tickSpace:50);i.ticks(Math.floor(r/o));const s=this.getyAxisOffset(t);return t=>{const e=t.attr("transform",`translate(${s.x},${s.y})`).call(i);return e.select(".domain").remove(),e}}getXAxis(t,e){if(void 0===t.scale)return t=>t;const n=zt(this.getD3XScale(t.scale));this.updateD3AxisSettings(n,e);const i=t.scale.range[1]-t.scale.range[0],r=Math.min(i/2,void 0!==e.tickSpace?e.tickSpace:50);void 0===e.ticks&&n.ticks(Math.floor(i/r));const o=this.getXAxisOffset(t);return t=>{const e=t.attr("transform",`translate(${o.x},${o.y+1})`).call(n);return e.select(".domain").remove(),e}}adjustYAxis(){console.log("here");const t=this.getChartElements();if(void 0===t)return;const{svg:e,canvas:n}=t;let i=e.selectAll(".y-axis").nodes()[0];null!=i&&(console.log(i),e.selectAll(".y-axis").attr("translate","transform(100px, 100px)").attr("width",100),n.attr("width",this.getWidth()-45.7),n.attr("transform","translate(45.7, 0)"))}showYAxes(t){const e=this.getChartElements();if(void 0===e)return;const{svg:n}=e;t.forEach(((t,e)=>{const i={};if(void 0!==(null==t?void 0:t.scale)){const r=this.getYAxis(t,i,e),o=(n.select(".y-axis").size()>0?n.select(".y-axis"):n.append("g").attr("class","y-axis axis")).append("g").call(r);if(t.plots.length!==this.plots.length){const e=this.getAxisColor(t);o.attr("stroke",e)}}})),"timeseries"===this.settings.layout&&this.showYLabelsForTimeSeries(t,this.plots)}getAxisLabel(t,e){var n;return null===(n=t.plots[0])||void 0===n?void 0:n.dimensions[e].label}showYLabelsForTimeSeries(t,e){const n=void 0!==[Fs.line,Fs.scatter,Fs.seasonal,Fs.area].find((t=>t===e[0].type));if(0===e.length||!n)return;const i=this.getChartElements();if(void 0===i)return;const{svg:r}=i,o=r.select(".y-axis").size()>0?r.select(".y-axis"):r.append("g").attr("class","y-axis axis");t.forEach((t=>{var e;o.append("text").attr("class","y-label").attr("transform","rotate(-90)").style("text-anchor","middle").attr("x",-1*Math.floor(this.getChartHeight()/2)).attr("y",""+(this.getyAxisOffset(t).x-24-3)).attr("font-size",".75rem").text(null!==(e=this.getAxisLabel(t,"y"))&&void 0!==e?e:"")}))}getXAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.height-this.settings.margin.bottom},t.offset)}getyAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.margin.top},t.offset)}showXAxes(t){const e=this.getChartElements();if(void 0===e)return;const{svg:n}=e;t.forEach(((t,e)=>{var i;if(void 0!==(null==t?void 0:t.scale)){const e=void 0===this.settings.axes?{}:null!==(i=this.settings.axes[t.key])&&void 0!==i?i:{},r=this.getXAxis(t,e),o=(n.select(".x-axis").size()>0?n.select(".x-axis"):n.append("g").attr("class","x-axis axis")).append("g").call(r);if(t.plots.length!==this.plots.length){const e=this.getAxisColor(t);o.attr("stroke",e)}}}))}getCanvasContext(){if(void 0!==this.chartElements){const{canvas:t}=this.chartElements,e=t.node();if(null!=e)return e.getContext("2d")}return null}onResize(t,e){if("auto"===this.settings.width){const{height:n}=this.settings,i=this.getWidth(),r=this.getCanvasContext();if(!0===this.runtime.busy||null===r||void 0===this.chartElements||void 0===r||t===i&&e===n)console.log("skipping resize!");else{this.runtime.busy=!0;const{svg:t,canvas:e}=this.chartElements;t.selectAll("*").remove(),t.attr("viewBox",[0,0,i,n]).attr("width",i),r.clearRect(0,0,+e.attr("width"),+e.attr("height")),e.attr("width",i).attr("height",n),this.init(!0).then((()=>{this.runtime.busy=!1,console.log("drawn")})).catch((t=>{this.onError(t)}))}}}getChartElements(){if(void 0!==this.chartElements)return this.chartElements;const{height:t}=this.settings,e=this.getWidth(),n=mt("svg").attr("viewBox",[0,0,e,t]).attr("width",e).attr("height",t).style("position","absolute").style("z-index",20),i=mt("canvas").attr("width",e).attr("height",t).style("position","absolute");if(null!==i&&null!==n){this.chartElements={canvas:i,svg:n};const t=this.getCanvasContext();null!==t&&(t.imageSmoothingQuality="high")}return this.chartElements}drawPlotScrubbing(t,e,n,i){const r=this.getChartElements();if(void 0===r)return;if(void 0===e||void 0===e.x||void 0===e.y)return;const{x:o,y:s}=e;this.drawScrubLine(t,e,r.svg,n,i),this.drawPlotScrubCircle(t,null==o?void 0:o.position,null==s?void 0:s.position,r.svg,n)}drawScrubLine(t,e,n,i,r){var o,s,a,l,u,c,h,d;const f=this.getPlotScrubLineClass(t);n.selectAll(`.${f}`).remove();const g=n.insert("line").classed(f,!0);if((null==r?void 0:r.axis)===Os.x){const t=this.settings.height-this.settings.margin.bottom;g.attr("x1",null!==(s=null===(o=e.x)||void 0===o?void 0:o.position)&&void 0!==s?s:0).attr("y1",0).attr("x2",null!==(l=null===(a=e.x)||void 0===a?void 0:a.position)&&void 0!==l?l:0).attr("y2",t).attr("stroke",this.getPlotStrokeColor(i)).style("stroke-width",this.getPlotStrokeWidth(i))}else{const t=this.getChartWidth(),n=t-this.settings.margin.left;g.attr("x1",this.settings.margin.left).attr("y1",null!==(c=null===(u=e.y)||void 0===u?void 0:u.position)&&void 0!==c?c:0).attr("x2",t+n).attr("y2",null!==(d=null===(h=e.y)||void 0===h?void 0:h.position)&&void 0!==d?d:0).attr("stroke",this.getPlotStrokeColor(i)).style("stroke-width",this.getPlotStrokeWidth(i))}}drawPlotScrubCircle(t,e,n,i,r){i.selectAll(`.${this.getPlotScrubCircleClass(t)}`).remove(),i.insert("circle").classed(this.getPlotScrubCircleClass(t),!0).attr("r",6).attr("cx",e).attr("cy",n).style("stroke",this.getPlotStrokeColor(r)).style("stroke-width",this.getPlotStrokeWidth(r)).style("fill-opacity","0")}erasePlotScrub(t){void 0!==this.chartElements&&(this.chartElements.svg.select(`.${this.getPlotScrubCircleClass(t)}`).remove(),this.chartElements.svg.select(`.${this.getPlotScrubLineClass(t)}`).remove())}getScrubEvent(t,e,n,i,r,o,s,a){let l,u,c,h,d;e===Os.x?(l=t.offsetX,u=a.x,c=n,h=r,d=o):(l=t.offsetY,u=a.y,c=i,h=o,d=r);const f=c.invert(l-u),g=(0,bt((t=>h(t))).center)(s,f),v=this.getDataRowNearestToScrub(g,f,s,d,h),p=r(v),y=n(p)+a.x,m=o(v);return{x:{position:y,value:p},y:{position:i(m)+a.y,value:m}}}getDataRowNearestToScrub(t,e,n,i,r){const o=n.filter((t=>null!==i(t)&&void 0!==i(t)));let s=Number.MAX_VALUE,a=n[t];for(let t=0;t<o.length;t+=1){const n=r(o[t]),i=Math.abs(+n-+e);i<s&&(s=i,a=o[t])}return a}getPlotStrokeColor(t){var e;return null!==(e=null==t?void 0:t.strokeColor)&&void 0!==e?e:"#333"}getAxisColor(t){var e,n;let i=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.fill)}));return void 0!==i?null===(e=i.style)||void 0===e?void 0:e.fill:(i=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.strokeColor)})),void 0!==i?null===(n=i.style)||void 0===n?void 0:n.strokeColor:"#000")}getPlotStrokeWidth(t){var e;return null!==(e=null==t?void 0:t.strokeWidth)&&void 0!==e?e:1}getPlotScrubCircleClass(t){return`${t}-scrub-circle`}getPlotScrubLineClass(t){return`${t}-scrub-line`}attachChartElements(){const t=this.getChartElements();if(void 0!==this.element&&void 0!==t){const{svg:e,canvas:n}=t,i=null==e?void 0:e.node(),r=null==n?void 0:n.node();null!==i&&null!==r&&(this.element.innerHTML="",this.element.append(i),this.element.append(r))}}createPlot(t){const e=this.getPlotImplementationProps(t);return t.type===Fs.line?new ta.Line(e):t.type===Fs.area?new ta.Area(e):t.type===Fs.scatter?new ta.Scatter(e):t.type===Fs.bar?new ta.Bar(e):new Zs(e)}clearCanvas(){const t=this.getCanvasContext();null!==t&&t.clearRect(0,0,t.canvas.width,t.canvas.height)}init(t=!1){const e=Object.create(null,{init:{get:()=>super.init}});return Vs(this,void 0,void 0,(function*(){yield e.init.call(this,t),this.attachChartElements()}))}destroy(){console.log("destroy"),this.chartElements=void 0,super.destroy()}}class na extends Js{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l;return Vs(this,void 0,void 0,(function*(){const u=void 0!==this.style?this.style:{},c=yield this.getData(),h=null===(e=null==c?void 0:c.parsed)||void 0===e?void 0:e.data,d=this.getAccessorAtAxis("x"),f=this.getAccessorAtAxis("y"),g=this.chart,v=g.getChartElements();if(void 0===v||null===v.svg)return;const p=v.svg,y=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,m=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===y||void 0===m||void 0===h||void 0===d||void 0===f)return;const x=g.getD3RadialXScale(y),w=g.getD3RadialYScale(m),b=zs().angle((t=>{const e=d(t),n=x(e);return void 0===n?0:n})).radius((t=>{const e=f(t),n=w(e);return void 0===n?0:n})).curve(Bs),_=h.slice(),A=g.getChartOffset(),S=void 0!==u.strokeColor?u.strokeColor:"#333";p.append("g").attr("transform",`translate(${A.x},${A.y})`).attr("class","radial-line").append("path").attr("fill","none").attr("stroke",S).attr("stroke-width",void 0!==u.strokeWidth?u.strokeWidth:1).attr("d",b(_)),void 0===(null===(s=this.axes)||void 0===s?void 0:s.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=g.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:S}}])}))}}class ia extends Js{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l;return Vs(this,void 0,void 0,(function*(){const u=yield this.getData(),c=null===(e=null==u?void 0:u.parsed)||void 0===e?void 0:e.data,h=this.getAccessorAtAxis("x"),d=this.getAccessorAtAxis("y"),f=this.chart,g=f.getChartElements();if(void 0===g||null===g.svg)return;const v=g.svg,p=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,y=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===p||void 0===y||void 0===c||void 0===h||void 0===d)return;const m=f.getD3RadialXScale(p),x=f.getD3RadialYScale(y),w=v.append("g").attr("transform",`translate(${f.getChartSize()/2},${f.getChartSize()/2})`).attr("class","radial-scatter"),b=void 0!==this.style?this.style:{},_=void 0!==b.radius?b.radius:2,A=void 0!==b.fill?b.fill:"#333",S=void 0!==b.strokeColor?b.strokeColor:"#CCC";c.forEach((t=>{const e=(n=(t=>{const e=h(t),n=m(e);return void 0===n?0:n})(t),i=(t=>{const e=d(t),n=x(e);return void 0===n?0:n})(t),[(i=+i)*Math.cos(n-=Math.PI/2),i*Math.sin(n)]);var n,i;w.append("circle").attr("r",2*_).attr("fill",A).attr("stroke",S).attr("stroke-width",void 0!==b.strokeWidth||void 0!==b.strokeColor?void 0!==b.strokeWidth?b.strokeWidth:1:0).attr("cx",e[0]+f.settings.margin.left).attr("cy",e[1]+f.settings.margin.top)})),void 0===(null===(s=this.axes)||void 0===s?void 0:s.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=f.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:A,border:`1px solid ${S}`}}])}))}}class ra extends Ks{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l;return Vs(this,void 0,void 0,(function*(){const u=void 0!==this.style?this.style:{},c=yield this.getData(),h=null===(e=null==c?void 0:c.parsed)||void 0===e?void 0:e.data,d=this.getAccessorsAtAxis("x"),f=this.getAccessorAtAxis("x"),g=d.x0,v=d.x1,p=this.getAccessorsAtAxis("y"),y=this.getAccessorAtAxis("y"),m=p.y0,x=p.y1,w=this.chart,b=w.getChartElements();if(void 0===b||null===b.svg)return;const _=b.svg,A=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,S=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===A||void 0===S||void 0===h||void 0===f&&void 0===g&&void 0===v||void 0===y&&void 0===m&&void 0===x)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const M=w.getD3RadialXScale(A),k=w.getD3RadialYScale(S),C=(t,e)=>n=>{const i=t(n),r=e(i);return void 0===r?0:r};if(void 0===f||void 0===m||void 0===x)return;const D=($=Us().curve(js),T=$.curve,P=$.lineX0,N=$.lineX1,L=$.lineY0,R=$.lineY1,$.angle=$.x,delete $.x,$.startAngle=$.x0,delete $.x0,$.endAngle=$.x1,delete $.x1,$.radius=$.y,delete $.y,$.innerRadius=$.y0,delete $.y0,$.outerRadius=$.y1,delete $.y1,$.lineStartAngle=function(){return Is(P())},delete $.lineX0,$.lineEndAngle=function(){return Is(N())},delete $.lineX1,$.lineInnerRadius=function(){return Is(L())},delete $.lineY0,$.lineOuterRadius=function(){return Is(R())},delete $.lineY1,$.curve=function(t){return arguments.length?T(Hs(t)):T()._curve},$).angle(C(f,M)).innerRadius(C(m,k)).outerRadius(C(x,k)).defined((E=x,t=>{const e=E(t);return!(null==e||isNaN(+e))})).curve(Bs);var E,$,T,P,N,L,R;const Y=h.slice(),U=w.getChartOffset(),O=void 0!==u.fill?u.fill:"#EDEDED99";_.insert("g","g.axis").attr("transform",`translate(${U.x},${U.y})`).attr("class","radial-area").append("path").attr("fill",O).attr("stroke-width",void 0!==u.strokeWidth?u.strokeWidth:1).attr("d",D(Y)),void 0===(null===(s=this.axes)||void 0===s?void 0:s.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=w.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:O}}])}))}}class oa extends Qs{constructor(){super(...arguments),this.data=void 0,this.numBins=16,this.speedBins=St(1,8,1),this.stacks=void 0,this.directionMode="to"}setStackedData(){var t,e,n;return Vs(this,void 0,void 0,(function*(){let i=[];void 0===this.data&&(this.data=yield this.getData(),i=null!==(e=null===(t=this.data.parsed)||void 0===t?void 0:t.data)&&void 0!==e?e:[]);const r=null===(n=this.data.parsed)||void 0===n?void 0:n.accessors.y;void 0===this.stacks&&void 0!==r&&(this.stacks=this.getStackedData(i,r))}))}getDomain(t){return Vs(this,void 0,void 0,(function*(){return yield this.setStackedData(),void 0===this.stacks?[0,10]:[0,this.getMaxStackTotal(this.stacks)]}))}getStackedData(t,e){const n=360/this.numBins,i=St(0,360,n),r=t.map((t=>t.value));this.speedBins=Et(function(t,e){let n;for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);return n}(r),At(r),5);const o=[];return i.forEach((t=>{const e={minDirection:t};this.speedBins.forEach((t=>{e[t]=0})),o.push(e)})),t.forEach((t=>{const i=Math.floor(t.direction/n),r=o[i],s=Number(e(t)),a=this.speedBins.find((t=>s<t));void 0!==a&&(r[a]+=1)})),o}getMaxStackTotal(t){var e;return null!==(e=At(t,(t=>this.speedBins.reduce(((e,n)=>e+t[n]),0))))&&void 0!==e?e:0}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s;return Vs(this,void 0,void 0,(function*(){const a=this.getAccessorsAtAxis("x"),l=this.getAccessorAtAxis("x"),u=a.x0,c=a.x1,h=this.getAccessorsAtAxis("y"),d=this.getAccessorAtAxis("y"),f=h.y0,g=h.y1;yield this.setStackedData();const v=this.chart,p=v.getChartElements();if(void 0===p||null===p.svg)return;const y=p.svg,m=null===(n=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===n?void 0:n.scale,x=null===(r=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.y)||void 0===r?void 0:r.scale;if(void 0===m||void 0===x||void 0===l&&void 0===u&&void 0===c||void 0===d&&void 0===f&&void 0===g)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");if(void 0===this.stacks||void 0===this.speedBins)return;const w=this.getMaxStackTotal(this.stacks),b=ni().domain(St(0,360,360/this.numBins)).range([0,2*Math.PI]),_=Ui().domain([0,w]).range([v.getInnerRadius(),v.getOuterRadius()]),A=null!==(s=null===(o=this.style)||void 0===o?void 0:o.colors)&&void 0!==s?s:Oi,S=ei().range(A),M=function(){var t=Fi([]),e=fr,n=dr,i=gr;function r(r){var o,s,a=Array.from(t.apply(this,arguments),vr),l=a.length,u=-1;for(const t of r)for(o=0,++u;o<l;++o)(a[o][u]=[0,+i(t,a[o].key,u,r)]).data=t;for(o=0,s=hr(e(a));o<l;++o)a[s[o]].index=o;return n(a,s),a}return r.keys=function(e){return arguments.length?(t="function"==typeof e?e:Fi(Array.from(e)),r):t},r.value=function(t){return arguments.length?(i="function"==typeof t?t:Fi(+t),r):i},r.order=function(t){return arguments.length?(e=null==t?fr:"function"==typeof t?t:Fi(Array.from(t)),r):e},r.offset=function(t){return arguments.length?(n=null==t?dr:t,r):n},r}().keys(this.speedBins.map((t=>String(t))))(this.stacks);M.forEach(((t,e)=>{t.forEach((t=>{t.bin={index:e,label:this.speedBins[e]}}))}));const k=v.getChartOffset(),C=2*Math.PI/this.numBins,D=t=>{const e="from"===this.directionMode?b(t):b((t+180)%360);return(null!=e?e:0)-C/2},E=t=>{const e="from"===this.directionMode?b(t):b((t+180)%360);return(null!=e?e:0)+C/2};y.insert("g","g.axis").attr("transform",`translate(${k.x},${k.y})`).selectAll("g").data(M).enter().append("g").attr("fill",(t=>S(t.key))).selectAll("path").data((t=>t)).enter().append("path").on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})).attr("d",function(){var t=or,e=sr,n=Fi(0),i=null,r=ar,o=lr,s=ur,a=null,l=rr(u);function u(){var u,c,h,d=+t.apply(this,arguments),f=+e.apply(this,arguments),g=r.apply(this,arguments)-Zi,v=o.apply(this,arguments)-Zi,p=ji(v-g),y=v>g;if(a||(a=u=l()),f<d&&(c=f,f=d,d=c),f>Bi)if(p>Gi-Bi)a.moveTo(f*Hi(g),f*Wi(g)),a.arc(0,0,f,g,v,!y),d>Bi&&(a.moveTo(d*Hi(v),d*Wi(v)),a.arc(0,0,d,v,g,y));else{var m,x,w=g,b=v,_=g,A=v,S=p,M=p,k=s.apply(this,arguments)/2,C=k>Bi&&(i?+i.apply(this,arguments):qi(d*d+f*f)),D=zi(ji(f-d)/2,+n.apply(this,arguments)),E=D,$=D;if(C>Bi){var T=Qi(C/d*Wi(k)),P=Qi(C/f*Wi(k));(S-=2*T)>Bi?(_+=T*=y?1:-1,A-=T):(S=0,_=A=(g+v)/2),(M-=2*P)>Bi?(w+=P*=y?1:-1,b-=P):(M=0,w=b=(g+v)/2)}var N=f*Hi(w),L=f*Wi(w),R=d*Hi(A),Y=d*Wi(A);if(D>Bi){var U,O=f*Hi(b),F=f*Wi(b),j=d*Hi(_),X=d*Wi(_);if(p<Vi)if(U=function(t,e,n,i,r,o,s,a){var l=n-t,u=i-e,c=s-r,h=a-o,d=h*l-c*u;if(!(d*d<Bi))return[t+(d=(c*(e-o)-h*(t-r))/d)*l,e+d*u]}(N,L,j,X,O,F,R,Y)){var H=N-U[0],I=L-U[1],z=O-U[0],W=F-U[1],q=1/Wi(((h=(H*z+I*W)/(qi(H*H+I*I)*qi(z*z+W*W)))>1?0:h<-1?Vi:Math.acos(h))/2),B=qi(U[0]*U[0]+U[1]*U[1]);E=zi(D,(d-B)/(q-1)),$=zi(D,(f-B)/(q+1))}else E=$=0}M>Bi?$>Bi?(m=cr(j,X,N,L,f,$,y),x=cr(O,F,R,Y,f,$,y),a.moveTo(m.cx+m.x01,m.cy+m.y01),$<D?a.arc(m.cx,m.cy,$,Xi(m.y01,m.x01),Xi(x.y01,x.x01),!y):(a.arc(m.cx,m.cy,$,Xi(m.y01,m.x01),Xi(m.y11,m.x11),!y),a.arc(0,0,f,Xi(m.cy+m.y11,m.cx+m.x11),Xi(x.cy+x.y11,x.cx+x.x11),!y),a.arc(x.cx,x.cy,$,Xi(x.y11,x.x11),Xi(x.y01,x.x01),!y))):(a.moveTo(N,L),a.arc(0,0,f,w,b,!y)):a.moveTo(N,L),d>Bi&&S>Bi?E>Bi?(m=cr(R,Y,O,F,d,-E,y),x=cr(N,L,j,X,d,-E,y),a.lineTo(m.cx+m.x01,m.cy+m.y01),E<D?a.arc(m.cx,m.cy,E,Xi(m.y01,m.x01),Xi(x.y01,x.x01),!y):(a.arc(m.cx,m.cy,E,Xi(m.y01,m.x01),Xi(m.y11,m.x11),!y),a.arc(0,0,d,Xi(m.cy+m.y11,m.cx+m.x11),Xi(x.cy+x.y11,x.cx+x.x11),y),a.arc(x.cx,x.cy,E,Xi(x.y11,x.x11),Xi(x.y01,x.x01),!y))):a.arc(0,0,d,A,_,y):a.lineTo(R,Y)}else a.moveTo(0,0);if(a.closePath(),u)return a=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,i=(+r.apply(this,arguments)+ +o.apply(this,arguments))/2-Vi/2;return[Hi(i)*n,Wi(i)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Fi(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Fi(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Fi(+t),u):n},u.padRadius=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:Fi(+t),u):i},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Fi(+t),u):r},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Fi(+t),u):o},u.padAngle=function(t){return arguments.length?(s="function"==typeof t?t:Fi(+t),u):s},u.context=function(t){return arguments.length?(a=null==t?null:t,u):a},u}().innerRadius((t=>_(t[0]))).outerRadius((t=>_(t[1]))).startAngle((t=>D(t.data.minDirection))).endAngle((t=>E(t.data.minDirection))).padAngle(.01).padRadius(v.getInnerRadius())),t.onLegendReady.call(this,M.map(((t,e)=>{var n,i;return{id:t.key,label:`< ${this.speedBins[e]} ${null!==(i=null===(n=this.dimensions.z.displayUnits)||void 0===n?void 0:n.label)&&void 0!==i?i:""}`,style:{backgroundColor:S(t.key)}}})))}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.data.angle},y:{position:t.offsetY,value:Object.assign({},e)}})}}const sa={box:class extends Zs{draw(){return Vs(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}},line:class extends Zs{draw(){return Vs(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}}},aa=Object.assign(Object.assign({},sa),{line:Js}),la={Chart:ea,RadialChart:class extends ea{getInnerRadius(){return this.getChartSize()/5}getOuterRadius(){return this.getChartSize()/2}getXRange(t){return[0,2*Math.PI]}getYRange(t){return[this.getInnerRadius(),this.getOuterRadius()]}getYAxesWidth(){return this.settings.margin.left}getChartSize(){const t=this.getWidth()-this.settings.margin.left-this.settings.margin.right,e=this.settings.height-this.settings.margin.top-this.settings.margin.bottom;return Math.min(t,e)}getChartWidth(){return this.getChartSize()}getChartHeight(){return this.getChartSize()}getD3RadialYScale(t){return Ui().domain(t.domain).range(t.range)}getD3RadialXScale(t,e=12){const n=2*Math.PI,i=super.getD3XScale(t);return i.range([0,n-n/e]),i}getYAxis(t,e,n){if(void 0===t.scale)return t=>t;const i=this.getyAxisOffset(t),r=this.getD3RadialYScale(t.scale),o=r.tickFormat(),s=r.range()[1]-r.range()[0],a=Math.floor(s/30),l=r.ticks(a).map(o),u=t=>Number(t.replace(/,/g,""));return t=>{const e=0!==n&&n%2!=0?1:-1;return t.attr("class","radial-axis").attr("transform",`translate(${i.x},${i.y})`).attr("text-anchor","middle").selectAll().data(l.reverse()).join("g").attr("class","tick").call((t=>n>0?t:t.append("circle").attr("fill","none").attr("stroke","currentColor").attr("r",(t=>r(u(t)))))).call((t=>t.append("text").attr("y",(t=>e*r(u(t)))).attr("dy","0.35em").attr("stroke","#FFF").attr("strokewidth",5).attr("paint-order","stroke").attr("transform",`rotate(${n>1?-20*(n-1):0})`).text(((t,e)=>`${String(t)}`)))),t}}getChartOffset(){return{x:this.settings.margin.left+this.getChartSize()/2,y:this.settings.margin.top+this.getChartSize()/2}}getXAxisOffset(t){return this.getChartOffset()}getyAxisOffset(t){return this.getChartOffset()}getXAxis(t,e){var n,i,r;if(void 0===t.scale)return t=>t;const o=this.getInnerRadius(),s=this.getOuterRadius(),a=this.getXAxisOffset(t),l=this.getD3RadialXScale(t.scale),u=l.tickFormat(),c=null!==(r=null===(i=null===(n=this.settings.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.ticks)&&void 0!==r?r:l.ticks().map(u);return t=>(t.append("g").attr("class","radial-axis").attr("transform",`translate(${a.x},${a.y}) rotate(-90)`).attr("text-anchor","left").call((t=>t.selectAll("g").data(c).join("g").attr("transform",((t,e,n)=>{return`\n            rotate(${i=e,r=n.length,360*i/r})\n            translate(${o},0)\n          `;var i,r})).attr("class","tick").call((t=>t.append("line").attr("x1",-5).attr("x2",s-o+10))).call((t=>t.append("text").attr("text-anchor","middle").attr("transform","rotate(90)translate(0,16)").text((t=>t)))))),t)}createPlot(t){const e=this.getPlotImplementationProps(t);return"line"===t.type?new na(e):"scatter"===t.type?new ia(e):"area"===t.type?new ra(e):"windrose"===t.type?new oa(e):new na(e)}},plotTypes:aa}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,