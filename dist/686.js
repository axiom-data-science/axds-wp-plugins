"use strict";(self.webpackChunkaxds_wp_plugins=self.webpackChunkaxds_wp_plugins||[]).push([[686],{686:(t,e,i)=>{i.r(e),i.d(e,{default:()=>mt});var s=i(975),n=i(454);function o(t,e){let i=0;if(void 0===e)for(let e of t)(e=+e)&&(i+=e);else{let s=-1;for(let n of t)(n=+e(n,++s,t))&&(i+=n)}return i}var r=i(543),a=i(663),l=i(183);function d(t){return(0,l.A)((0,a.A)(t).call(document.documentElement))}var c=i(459),u=i(321),h=i(946),v=i(134),g=i(591);const f=(0,g.f)((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));f.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?(0,g.f)((e=>{e.setTime(Math.floor(e/t)*t)}),((e,i)=>{e.setTime(+e+i*t)}),((e,i)=>(i-e)/t)):f:null),f.range;const x=(0,g.f)((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*v.Tt)}),((t,e)=>(e-t)/v.Tt),(t=>t.getUTCSeconds())),y=(x.range,(0,g.f)((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*v.Tt)}),((t,e)=>{t.setTime(+t+e*v.rR)}),((t,e)=>(e-t)/v.rR),(t=>t.getMinutes()))),p=(y.range,(0,g.f)((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*v.rR)}),((t,e)=>(e-t)/v.rR),(t=>t.getUTCMinutes()))),m=(p.range,(0,g.f)((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*v.Tt-t.getMinutes()*v.rR)}),((t,e)=>{t.setTime(+t+e*v.JJ)}),((t,e)=>(e-t)/v.JJ),(t=>t.getHours()))),A=(m.range,(0,g.f)((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*v.JJ)}),((t,e)=>(e-t)/v.JJ),(t=>t.getUTCHours())));A.range;var S=i(334),b=i(926);const k=(0,g.f)((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth())),C=(k.range,(0,g.f)((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth())));C.range;var D=i(355);function E(t,e,i,s,n,o){const r=[[x,1,v.Tt],[x,5,5*v.Tt],[x,15,15*v.Tt],[x,30,30*v.Tt],[o,1,v.rR],[o,5,5*v.rR],[o,15,15*v.rR],[o,30,30*v.rR],[n,1,v.JJ],[n,3,3*v.JJ],[n,6,6*v.JJ],[n,12,12*v.JJ],[s,1,v.Nm],[s,2,2*v.Nm],[i,1,v.Fq],[e,1,v.Pv],[e,3,3*v.Pv],[t,1,v.MP]];function a(e,i,s){const n=Math.abs(i-e)/s,o=(0,u.A)((([,,t])=>t)).right(r,n);if(o===r.length)return t.every((0,h.sG)(e/v.MP,i/v.MP,s));if(0===o)return f.every(Math.max((0,h.sG)(e,i,s),1));const[a,l]=r[n/r[o-1][2]<r[o][2]/n?o-1:o];return a.every(l)}return[function(t,e,i){const s=e<t;s&&([t,e]=[e,t]);const n=i&&"function"==typeof i.range?i:a(t,e,i),o=n?n.range(t,+e+1):[];return s?o.reverse():o},a]}const[P,w]=E(D.Mb,C,b.Hl,S.TW,A,p),[R,M]=E(D.he,k,b.YP,S.UA,m,y);var L=i(328),T=i(627);function O(t){return new Date(t)}function Y(t){return t instanceof Date?+t:+new Date(+t)}function W(t,e,i,s,n,o,r,a,l,d){var c=(0,T.Ay)(),u=c.invert,h=c.domain,v=d(".%L"),g=d(":%S"),f=d("%I:%M"),x=d("%I %p"),y=d("%a %d"),p=d("%b %d"),m=d("%B"),A=d("%Y");function S(t){return(l(t)<t?v:a(t)<t?g:r(t)<t?f:o(t)<t?x:s(t)<t?n(t)<t?y:p:i(t)<t?m:A)(t)}return c.invert=function(t){return new Date(u(t))},c.domain=function(t){return arguments.length?h(Array.from(t,Y)):h().map(O)},c.ticks=function(e){var i=h();return t(i[0],i[i.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?S:d(e)},c.nice=function(t){var i=h();return t&&"function"==typeof t.range||(t=e(i[0],i[i.length-1],null==t?10:t)),t?h(function(t,e){var i,s=0,n=(t=t.slice()).length-1,o=t[s],r=t[n];return r<o&&(i=s,s=n,n=i,i=o,o=r,r=i),t[s]=e.floor(o),t[n]=e.ceil(r),t}(i,t)):c},c.copy=function(){return(0,T.C)(c,W(t,e,i,s,n,o,r,a,l,d))},c}var $=i(65),_=i(969),X=i(519),j=i(90),z=i(298),I=i(565);function B(t){this._context=t}function F(t){return new B(t)}B.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var N=i(509);function H(t){return t[0]}function U(t){return t[1]}function J(t,e){var i=(0,I.A)(!0),s=null,n=F,o=null,r=(0,N.i)(a);function a(a){var l,d,c,u=(a=(0,z.A)(a)).length,h=!1;for(null==s&&(o=n(c=r())),l=0;l<=u;++l)!(l<u&&i(d=a[l],l,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(d,l,a),+e(d,l,a));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?H:(0,I.A)(t),e="function"==typeof e?e:void 0===e?U:(0,I.A)(e),a.x=function(e){return arguments.length?(t="function"==typeof e?e:(0,I.A)(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:(0,I.A)(+t),a):e},a.defined=function(t){return arguments.length?(i="function"==typeof t?t:(0,I.A)(!!t),a):i},a.curve=function(t){return arguments.length?(n=t,null!=s&&(o=n(s)),a):n},a.context=function(t){return arguments.length?(null==t?s=o=null:o=n(s=t),a):s},a}function G(t,e,i){var s=null,n=(0,I.A)(!0),o=null,r=F,a=null,l=(0,N.i)(d);function d(d){var c,u,h,v,g,f=(d=(0,z.A)(d)).length,x=!1,y=new Array(f),p=new Array(f);for(null==o&&(a=r(g=l())),c=0;c<=f;++c){if(!(c<f&&n(v=d[c],c,d))===x)if(x=!x)u=c,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),h=c-1;h>=u;--h)a.point(y[h],p[h]);a.lineEnd(),a.areaEnd()}x&&(y[c]=+t(v,c,d),p[c]=+e(v,c,d),a.point(s?+s(v,c,d):y[c],i?+i(v,c,d):p[c]))}if(g)return a=null,g+""||null}function c(){return J().defined(n).curve(r).context(o)}return t="function"==typeof t?t:void 0===t?H:(0,I.A)(+t),e="function"==typeof e?e:void 0===e?(0,I.A)(0):(0,I.A)(+e),i="function"==typeof i?i:void 0===i?U:(0,I.A)(+i),d.x=function(e){return arguments.length?(t="function"==typeof e?e:(0,I.A)(+e),s=null,d):t},d.x0=function(e){return arguments.length?(t="function"==typeof e?e:(0,I.A)(+e),d):t},d.x1=function(t){return arguments.length?(s=null==t?null:"function"==typeof t?t:(0,I.A)(+t),d):s},d.y=function(t){return arguments.length?(e="function"==typeof t?t:(0,I.A)(+t),i=null,d):e},d.y0=function(t){return arguments.length?(e="function"==typeof t?t:(0,I.A)(+t),d):e},d.y1=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:(0,I.A)(+t),d):i},d.lineX0=d.lineY0=function(){return c().x(t).y(e)},d.lineY1=function(){return c().x(t).y(i)},d.lineX1=function(){return c().x(s).y(e)},d.defined=function(t){return arguments.length?(n="function"==typeof t?t:(0,I.A)(!!t),d):n},d.curve=function(t){return arguments.length?(r=t,null!=o&&(a=r(o)),d):r},d.context=function(t){return arguments.length?(null==t?o=a=null:a=r(o=t),d):o},d}var V,Z,q=K(F);function Q(t){this._curve=t}function K(t){function e(e){return new Q(t(e))}return e._curve=t,e}function tt(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(K(t)):e()._curve},t}function et(){return tt(J().curve(q))}function it(){}function st(t){this._context=t}function nt(t){return new st(t)}function ot(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{l(s.next(t))}catch(t){o(t)}}function a(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((s=s.apply(t,e||[])).next())}))}Q.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}},st.prototype={areaStart:it,areaEnd:it,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},"function"==typeof SuppressedError&&SuppressedError,function(t){t.x="x",t.y="y",t.z="z",t.color="color"}(V||(V={})),function(t){t.line="line",t.area="area",t.scatter="scatter",t.box="box",t.bar="bar",t.time_series_bar="time_series_bar",t.stacked="stacked",t.anomaly="anomaly",t.curtain="curtain",t.curtain_anomaly="curtain_anomaly",t.seasonal="seasonal",t.radial="radial",t.pie="pie",t.windrose="windrose"}(Z||(Z={}));class rt extends s.ZC{constructor(t){super(t),this.scrubSettingsDefaults={enabled:!0,axis:V.x},this.legendSettingsDefaults={hide:!1,axis:V.y},this.id=t.id,this.type=t.type,this.chart=t.chart,this.dimensions=t.dimensions,this.style=t.style,this.scrubbing=t.scrubbing,this.onDataLoad=t.onDataLoad,this.axisSettings=t.axisSettings,this.scrubSettings=Object.assign(Object.assign({},this.scrubSettingsDefaults),t.scrubSettings),this.interpolate=t.interpolate,this.legendSettings=Object.assign(Object.assign({},this.legendSettingsDefaults),t.legendSettings),this.runtime={}}createAccessorGroupingsAtAxis(t,e){const i=this.getAxisSetting(e),s=void 0!==i.accessProperties?i.accessProperties:{},n=Object.keys(t).filter((t=>t.startsWith(e))),o=Object.fromEntries(n.map((e=>[e,t[e]])));return Object.keys(s).forEach((e=>{const i=s[e],n=t[i];void 0!==n&&(o[e]=n)})),o}getStyle(){return void 0!==this.style?this.style:{}}getAxisSetting(t){if(void 0===this.axisSettings)return{};const e=this.axisSettings[t];return void 0===e?{}:e}getDomainAccessorAtAxis(t){var e,i,s,n,o,r;const a=void 0!==(null===(s=null===(i=null===(e=this.runtime)||void 0===e?void 0:e.data)||void 0===i?void 0:i.parsed)||void 0===s?void 0:s.domainAccessors)?this.runtime.data.parsed.domainAccessors:{},l=void 0!==(null===(r=null===(o=null===(n=this.runtime)||void 0===n?void 0:n.data)||void 0===o?void 0:o.parsed)||void 0===r?void 0:r.accessors)?this.runtime.data.parsed.accessors:{};return void 0!==a[t]?a[t]:void 0!==l[t]?l[t]:e=>"number"==typeof e||e instanceof Date||"string"==typeof e?e:e[t]}getAvailableDomainAccessors(){var t,e,i,s,n,o,r,a,l;return void 0!==(null===(i=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===i?void 0:i.domainAccessors)?this.runtime.data.parsed.domainAccessors:void 0!==(null===(o=null===(n=null===(s=this.runtime)||void 0===s?void 0:s.data)||void 0===n?void 0:n.parsed)||void 0===o?void 0:o.accessors)?null===(l=null===(a=null===(r=this.runtime)||void 0===r?void 0:r.data)||void 0===a?void 0:a.parsed)||void 0===l?void 0:l.accessors:{}}getDomainAccessorsAtAxis(t){const e=this.getAvailableDomainAccessors();return this.createAccessorGroupingsAtAxis(e,t)}getAvailableAccessors(){var t,e,i;return void 0!==(null===(i=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===i?void 0:i.accessors)?this.runtime.data.parsed.accessors:{}}getAccessorsAtAxis(t){const e=this.getAvailableAccessors();return this.createAccessorGroupingsAtAxis(e,t)}getAccessorAtAxis(t){const e=this.getAccessorsAtAxis(t)[t];if(void 0!==e)return e;const i=this.getAvailableAccessors();return void 0!==i[t]?i[t]:void 0}getDomain(t){var e;return ot(this,void 0,void 0,(function*(){const i=yield this.getData(),s=void 0!==(null===(e=null==i?void 0:i.parsed)||void 0===e?void 0:e.data)?i.parsed.data:[],o=this.getDomainAccessorAtAxis(t),r=s.map((t=>o(t))).flat().filter((t=>null!=t));return(0,n.A)(r)}))}getXDomain(){return ot(this,void 0,void 0,(function*(){return yield this.getDomain("x")}))}getYDomain(){return ot(this,void 0,void 0,(function*(){return yield this.getDomain("y")}))}draw(){return ot(this,void 0,void 0,(function*(){this.data=yield this.getData()}))}onLegendReady(t){this.chart.emitPlotLegendReady(this.id,t)}onScrub(t){this.chart.emitPlotScrub(this.id,t)}onScrubEnd(){this.chart.emitPlotScrubEnd(this.id)}destroy(){}}class at{constructor(t){this.plots=t.plots.map((t=>Object.assign({},t))),this.settings=t.settings,this.element=t.element,this.onChartDrew=t.onChartDrew,this.onPlotDataLoad=t.onPlotDataLoad,this.onPlotLegendReady=t.onPlotLegendReady,this.onPlotScrub=t.onPlotScrub,this.onPlotScrubEnd=t.onPlotScrubEnd,this.runtime={prevWidth:0,prevHeight:0}}emitPlotLegendReady(t,e){void 0!==this.onPlotLegendReady&&this.onPlotLegendReady(t,e)}emitPlotScrub(t,e){void 0!==this.onPlotScrub&&this.onPlotScrub(t,e)}emitPlotScrubEnd(t){void 0!==this.onPlotScrubEnd&&this.onPlotScrubEnd(t)}onError(t){}onResize(t,e){console.log("RESIZE!"),console.log(this)}getWidth(){return"auto"===this.settings.width?null!=this.element?this.element.clientWidth:400:this.settings.width}onDraw(){}getDomainForPlotImplementations(t,e){var i,s;return ot(this,void 0,void 0,(function*(){const o=null===(s=null===(i=this.settings)||void 0===i?void 0:i.axes)||void 0===s?void 0:s[String(e)];if(void 0!==(null==o?void 0:o.domain))return o.domain;const r=yield Promise.all(t.map((t=>ot(this,void 0,void 0,(function*(){return yield t.getDomain(e)})))));return(0,n.A)(r.flat())}))}reversePlotAxis(t,e){return!0===t.getAxisSetting(e).reverse}getDimensionAxisParam(t,e){const i=t.dimensions[e],s=t.getAxisSetting(e);let n=e;return void 0!==s.parameter?n=s.parameter:void 0!==i&&(void 0!==i.parameter?n=i.parameter:void 0!==i.property?n=i.property:void 0!==i.properties&&(n=i.properties.join(","))),n}getPlotImplementationGroups(t,e){const i=(0,r.groupBy)(t,(t=>`${this.getDimensionAxisParam(t,e)}${this.reversePlotAxis(t,e)?".reverse":""}`)),s={};return Object.keys(i).forEach((t=>{const n={plots:i[t],reverse:this.reversePlotAxis(i[t][0],e),parameter:this.getDimensionAxisParam(i[t][0],e)};s[t]=n})),s}getXRange(t){return[0,t]}getYRange(t){return[t,0]}getChartWidth(){const t=this.getYAxesWidth();return this.getWidth()-t-this.settings.margin.right}getXAxesGroups(){return void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"x"):{}}getChartHeight(){const t=this.getXAxesGroups(),e=Object.keys(t).length;return this.settings.height-this.settings.margin.top-this.settings.margin.bottom*e}getYAxesWidth(){const t=void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"y"):{};return this.settings.margin.left*Object.keys(t).length}debouncedResize(){var t;void 0!==(null===(t=this.runtime.resizeEventHandler)||void 0===t?void 0:t.cancel)&&(this.runtime.resizeEventHandler.cancel(),console.log("cancel")),this.runtime.resizeEventHandler=(0,r.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),this.runtime.resizeEventHandler()}init(t=!1){var e;return ot(this,void 0,void 0,(function*(){this.runtime.resizeEventHandler=(0,r.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),window.addEventListener("resize",(()=>{this.debouncedResize()})),null===(e=this.plotImplementations)||void 0===e||e.forEach((t=>{t.destroy()})),this.plotImplementations=this.createPlots();const{margin:i}=this.settings,s=this.getXAxesGroups(),n=this.getChartHeight(),o=this.getPlotImplementationGroups(this.plotImplementations,"y"),a=[],l=this.getYRange(n);yield Promise.all(Object.keys(o).map(((t,e)=>ot(this,void 0,void 0,(function*(){const s=o[t],n=s.plots,r={scale:{domain:yield this.getDomainForPlotImplementations(o[t].plots,V.y),range:s.reverse?l.slice().reverse():l},plots:n,key:t,offset:{x:i.left+i.left*e,y:i.top}};n.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.y=r})),a.push(r)}))))),this.showYAxes(a);const d=this.getYAxesWidth(),c=this.getChartWidth(),u=this.getXRange(c),h=[];yield Promise.all(Object.keys(s).map(((t,e)=>ot(this,void 0,void 0,(function*(){const o=s[t],r=o.plots,a={scale:{domain:yield this.getDomainForPlotImplementations(r,V.x),range:o.reverse?u.slice().reverse():u},plots:r,key:t,offset:{x:d,y:i.top+n+i.bottom*e}};r.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.x=a})),h.push(a)}))))),this.showXAxes(h),t&&(yield this.draw())}))}showAxes(t,e){}showYAxes(t){}showXAxes(t){}adjustYAxis(){}draw(){return ot(this,void 0,void 0,(function*(){const t=this.plotImplementations;void 0!==t&&(yield Promise.all(t.map((t=>ot(this,void 0,void 0,(function*(){yield t.draw()}))))),void 0!==this.onChartDrew&&this.onChartDrew())}))}destroy(){}createPlots(){return this.plots.map((t=>this.createPlot(t)))}getPlotImplementationProps(t){return Object.assign(Object.assign({},t),{chart:this,onDataLoad:this.onPlotDataLoad})}createPlot(t){return new rt(this.getPlotImplementationProps(t))}}class lt extends rt{}class dt extends lt{constructor(){super(...arguments),this.onMouseScrub=t=>{const e=this.chart;if(void 0===e.onPlotScrub)return;const i=this.getAccessorAtAxis("x"),s=this.getAccessorAtAxis("y");if(void 0===this.scrubSettings.axis||void 0===this.xScale||void 0===this.yScale||void 0===i||void 0===s||void 0===this.parsedData||void 0===this.offset)return;const n=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,i,s,this.parsedData,this.offset);void 0!==n&&void 0!==n.x&&(this.onScrub(n),e.drawPlotScrubbing(this.id,n,this.style,this.scrubSettings))},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l,d,u,h,v,g,f;return ot(this,void 0,void 0,(function*(){const x=this.getStyle();if(void 0===this.parsedData){const t=yield this.getData();this.emitDataLoad(t),this.parsedData=null===(e=null==t?void 0:t.parsed)||void 0===e?void 0:e.data}const y=this.getAccessorAtAxis("x"),p=this.getAccessorAtAxis("y"),m=this.chart,A=m.getCanvasContext();if(null===A)return;const S=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.scale,b=null===(o=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.y)||void 0===o?void 0:o.scale;if(void 0===S||void 0===b||void 0===this.parsedData||void 0===y||void 0===p)return;this.offset={x:void 0!==(null===(l=null===(a=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.x)||void 0===a?void 0:a.offset)||void 0===l?void 0:l.x)?this.axes.x.offset.x:0,y:void 0!==(null===(h=null===(u=null===(d=null==this?void 0:this.axes)||void 0===d?void 0:d.y)||void 0===u?void 0:u.offset)||void 0===h?void 0:h.y)?this.axes.y.offset.y:0},this.xScale=m.getD3XScale(S),this.yScale=m.getD3YScale(b),A.strokeStyle=this.getStrokeStyle(),A.lineWidth=this.getLineWidth(),void 0!==x.lineDash?A.setLineDash(x.lineDash):A.setLineDash([]),A.lineCap="square";const k=J().x((t=>{if(void 0===this.xScale||void 0===this.offset)return 0;const e=y(t),i=this.xScale(e);return void 0===i?0:i+this.offset.x})).y((t=>{if(void 0===this.yScale||void 0===this.offset)return 0;const e=p(t),i=this.yScale(e);return void 0===i?0:i+this.offset.y})).defined((t=>{const e=p(t);return!(null==e||isNaN(+e))}));if("step"===this.interpolate?k.curve(c.GZz):"cardinal"===this.interpolate?k.curve(c.y8u):"catmullRom"===this.interpolate?k.curve(c.oDi):"monotone"===this.interpolate?k.curve(c.nVG):"natural"===this.interpolate&&k.curve(c.Xf2),k.context(A),A.beginPath(),k(this.parsedData),A.stroke(),void 0!==this.legendSettings.axis&&void 0!==this.axes&&(null===(v=this.legendSettings.hide)||void 0===v||!v)){const e=this.axes[this.legendSettings.axis];void 0!==e&&t.onLegendReady.call(this,[{id:e.key,label:null!==(f=null!==(g=m.getAxisLabel(e,this.legendSettings.axis))&&void 0!==g?g:e.label)&&void 0!==f?f:e.key,style:{backgroundColor:A.strokeStyle}}])}this.setupScrubbing()}))}setupScrubbing(){var t,e,i;const s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.addEventListener("mouseleave",this.onScrubEnd))}getStrokeStyle(){const t=this.getStyle();return void 0!==t.strokeColor?t.strokeColor:"#333"}getLineWidth(){const t=this.getStyle();return void 0!==t.strokeWidth?t.strokeWidth:1}emitDataLoad(t){void 0!==this.onDataLoad&&this.onDataLoad({plotId:this.id,data:t})}destroy(){var t,e,i;const s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.removeEventListener("mouseleave",this.onScrubEnd))}}class ct extends lt{getMaxAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}1`]}getMinAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}0`]}getDomainAccessor(t){const e=this.getMinAccessorAtAxis(t),i=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==i)return t=>[e(t),i(t)];const s=this.getAccessorAtAxis(t);return void 0!==s?s:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:o(Object.values(t))}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l,d,u,h,v,g,f;return ot(this,void 0,void 0,(function*(){const x=void 0!==this.style?this.style:{},y=yield this.getData(),p=null===(e=null==y?void 0:y.parsed)||void 0===e?void 0:e.data,m=this.getAccessorsAtAxis("x"),A=this.getAccessorAtAxis("x"),S=m.x0,b=m.x1,k=this.getAccessorsAtAxis("y"),C=this.getAccessorAtAxis("y"),D=k.y0,E=k.y1,P={x:void 0!==(null===(n=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.offset)||void 0===n?void 0:n.x)?this.axes.x.offset.x:0,y:void 0!==(null===(a=null===(r=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===r?void 0:r.offset)||void 0===a?void 0:a.y)?this.axes.y.offset.y:0},w=this.chart,R=w.getCanvasContext();if(null===R)return;const M=null===(d=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.x)||void 0===d?void 0:d.scale,L=null===(h=null===(u=null==this?void 0:this.axes)||void 0===u?void 0:u.y)||void 0===h?void 0:h.scale;if(void 0===M||void 0===L||void 0===p||void 0===A&&void 0===S&&void 0===b||void 0===C&&void 0===D&&void 0===E)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const T=w.getD3XScale(M),O=w.getD3YScale(L),Y=(t,e,i)=>s=>{const n=t(s),o=e(n);return void 0===o?0:o+i};R.fillStyle=void 0!==x.fill?x.fill:"#EDEDED";const W=G();var $;void 0!==S&&void 0!==b?(W.x0(Y(S,T,P.x)),W.x1(Y(b,T,P.x))):void 0!==A&&W.x(Y(A,T,P.x)),void 0!==D&&void 0!==E?(W.y0(Y(D,O,P.y)),W.y1(Y(E,O,P.y)),W.defined(($=E,t=>{const e=$(t);return!(null==e||isNaN(+e))}))):void 0!==C&&W.y(Y(C,O,P.y)),"step"===this.interpolate?W.curve(c.GZz):"cardinal"===this.interpolate?W.curve(c.y8u):"catmullRom"===this.interpolate?W.curve(c.oDi):"monotone"===this.interpolate?W.curve(c.nVG):"natural"===this.interpolate&&W.curve(c.Xf2),W.context(R),R.beginPath(),W(p),R.fill(),void 0===(null===(v=this.axes)||void 0===v?void 0:v.y)||null!==(g=this.legendSettings.hide)&&void 0!==g&&g||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(f=w.getAxisLabel(this.axes.y,"y"))&&void 0!==f?f:this.axes.y.key,style:{backgroundColor:R.fillStyle}}])}))}}const ut={Line:dt,Area:ct,Scatter:class extends lt{constructor(){super(...arguments),this.circleClass=`${this.id}-scrub-circle`,this.onMouseScrub=t=>{const e=this.chart;if(void 0===e.onPlotScrub)return;const i=this.getAccessorAtAxis("x"),s=this.getAccessorAtAxis("y");if(void 0===this.scrubSettings.axis||void 0===this.xScale||void 0===this.yScale||void 0===i||void 0===s||void 0===this.parsedData||void 0===this.offset)return;const n=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,i,s,this.parsedData,this.offset);void 0!==n&&void 0!==n.x&&(this.onScrub(n),e.drawPlotScrubbing(this.id,n,this.style,this.scrubSettings))},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l,d,c,u,h,v,g;return ot(this,void 0,void 0,(function*(){const f=void 0!==this.style?this.style:{},x=yield this.getData();this.parsedData=null===(e=null==x?void 0:x.parsed)||void 0===e?void 0:e.data;const y=this.getAccessorAtAxis("x"),p=this.getAccessorAtAxis("y"),m=this.chart,A=m.getCanvasContext();if(null===A)return;const S=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.scale,b=null===(o=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.y)||void 0===o?void 0:o.scale;if(void 0===S||void 0===b||void 0===this.parsedData||void 0===y||void 0===p)return;this.offset={x:void 0!==(null===(l=null===(a=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.x)||void 0===a?void 0:a.offset)||void 0===l?void 0:l.x)?this.axes.x.offset.x:0,y:void 0!==(null===(u=null===(c=null===(d=null==this?void 0:this.axes)||void 0===d?void 0:d.y)||void 0===c?void 0:c.offset)||void 0===u?void 0:u.y)?this.axes.y.offset.y:0},this.xScale=m.getD3XScale(S);const k=t=>{if(void 0===this.xScale||void 0===this.offset)return 0;const e=y(t),i=this.xScale(e);return void 0===i?0:i+this.offset.x};this.yScale=m.getD3YScale(b);const C=t=>{if(void 0===this.yScale||void 0===this.offset)return 0;const e=p(t),i=this.yScale(e);return void 0===i?0:i+this.offset.y};A.strokeStyle=void 0!==f.strokeColor?f.strokeColor:"#FFF";const D=void 0!==f.radius?f.radius:2;A.lineWidth=void 0!==f.strokeWidth||void 0!==f.strokeColor?(void 0!==f.strokeWidth?f.strokeWidth:1)+D:0,A.fillStyle=void 0!==f.fill?f.fill:"#666",this.parsedData.forEach((t=>{(t=>{const e=p(t);return!(null==e||isNaN(+e))})(t)&&(A.beginPath(),A.arc(k(t),C(t),D,0,2*Math.PI),A.stroke(),A.fill())})),void 0===(null===(h=this.axes)||void 0===h?void 0:h.y)||null!==(v=this.legendSettings.hide)&&void 0!==v&&v||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(g=m.getAxisLabel(this.axes.y,"y"))&&void 0!==g?g:this.axes.y.key,style:{backgroundColor:A.fillStyle,border:`1px solid ${A.strokeStyle}`}}]),this.setupScrubbing()}))}setupScrubbing(){var t,e,i;const s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.addEventListener("mouseleave",this.onScrubEnd))}destroy(){var t,e,i;const s=this.chart.getChartElements();void 0!==s&&(null===(t=s.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=s.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(i=s.svg.node())||void 0===i||i.removeEventListener("mouseleave",this.onScrubEnd))}},Bar:class extends lt{getMaxAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}1`]}getMinAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}0`]}getDomainAccessor(t){const e=this.getMinAccessorAtAxis(t),i=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==i)return t=>[e(t),i(t)];const s=this.getAccessorAtAxis(t);return void 0!==s?s:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:o(Object.values(t))}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l,d,c,u,h,v,g;return ot(this,void 0,void 0,(function*(){const f=void 0!==this.style?this.style:{},x=yield this.getData(),y=null===(e=null==x?void 0:x.parsed)||void 0===e?void 0:e.data,p=this.getAccessorsAtAxis("x"),m=this.getAccessorAtAxis("x"),A=p.x0,S=p.x1,b=this.getAccessorsAtAxis("y"),k=this.getAccessorAtAxis("y"),C=b.y0,D=b.y1,E={x:void 0!==(null===(n=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.offset)||void 0===n?void 0:n.x)?this.axes.x.offset.x:0,y:void 0!==(null===(a=null===(r=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===r?void 0:r.offset)||void 0===a?void 0:a.y)?this.axes.y.offset.y:0},P=this.chart,w=P.getCanvasContext();if(null===w)return;const R=null===(d=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.x)||void 0===d?void 0:d.scale,M=null===(u=null===(c=null==this?void 0:this.axes)||void 0===c?void 0:c.y)||void 0===u?void 0:u.scale;if(void 0===R||void 0===M||void 0===y||void 0===m&&void 0===A&&void 0===S||void 0===k&&void 0===C&&void 0===D)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const L=P.getD3XScale(R),T=P.getD3YScale(M),O=(t,e,i)=>s=>{const n=t(s),o=e(n);return void 0===o?0:o+i};w.fillStyle=void 0!==f.fill?f.fill:"#EDEDED";const Y={};void 0!==A&&void 0!==S?(Y.x0=O(A,L,E.x),Y.x1=O(S,L,E.x)):void 0!==m&&(Y.x=O(m,L,E.x)),void 0!==C&&void 0!==D?(Y.y0=O(C,T,E.y),Y.y1=O(D,T,E.y)):void 0!==k&&(Y.y=O(k,T,E.y)),w.beginPath();const W=!(void 0===Y.x0||void 0===Y.x1),$=Math.abs(M.range[1]-M.range[0]),_=Math.abs(R.range[1]-R.range[0]),X=y.filter((t=>W?+Y.y(t)>=M.range[0]&&+Y.y(t)<=M.range[1]:+Y.x(t)>=R.range[0]+E.x&&+Y.x(t)<=R.range[1]+E.x)),j=Math.round(((W?$:_)-X.length)/X.length),z=Math.max(1,j-.2*j);X.forEach(((t,e)=>{if(W){const e=Y.x0(t);if(null!=e){const i=Math.abs(Y.x1(t)-e),s=Y.y(t),n=z;w.rect(e,s,i,n)}}else{const e=Y.y0(t),i=Y.y1(t);if(null!=e&&null!=i){const s=Y.x(t)-z/2;w.fillRect(s,e,z,i-e)}}})),w.fill(),void 0===(null===(h=this.axes)||void 0===h?void 0:h.y)||null!==(v=this.legendSettings.hide)&&void 0!==v&&v||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(g=P.getAxisLabel(this.axes.y,"y"))&&void 0!==g?g:this.axes.y.key,style:{backgroundColor:w.fillStyle}}])}))}},CategoricalBar:class extends lt{constructor(t){super(t),this.legendHeight=12,this.legendPaddingTop=8;const e=this.chart.getChartElements();void 0!==(null==e?void 0:e.svg)&&e.svg.style("z-index",20)}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o;return ot(this,void 0,void 0,(function*(){const r=yield this.getData(),a=null===(e=null==r?void 0:r.parsed)||void 0===e?void 0:e.data;if(void 0===a)return;const l=this.getAccessorAtAxis("x"),d=null===(i=r.parsed)||void 0===i?void 0:i.accessors.y;if(void 0===l||void 0===d)return;const u=null===(s=r.parsed)||void 0===s?void 0:s.accessors.y2,h=this.dimensions,v=h.y.property,g=h.y.label,f=this.dimensions.y2.property,x=this.dimensions.y2.label,y=this.chart,p=y.getChartElements();if(void 0===p||null===p.svg||void 0===v||void 0===g)return;void 0!==p.svg.select("g")&&p.svg.select("g").remove();let{height:m}=y.settings,A=y.getWidth();A=Number(A),m=Number(m);const S=void 0===f?0:1,b=24*S,k=36*S*S+b,C=m-48-this.legendHeight-this.legendPaddingTop-4,D=A-36-24-k,E=A-D-k,P=A-k,w=a.map((t=>l(t))),R=[v];void 0!==f&&void 0!==u&&R.push(f);const M=null!==(o=null===(n=this.style)||void 0===n?void 0:n.colors)&&void 0!==o?o:c.zt,L=c.UMr(M).domain(R),T=p.svg.insert("g"),O=this.getXScale(E,P,w),Y=this.getYScale(C,4,a,d),W=this.getY2Scale(C,4,a,u),$=this.getSubgroupScales(v,Y,f,W),_=c.WH().domain(R).range([0,O.bandwidth()]).padding(.05);T.append("g").attr("width",D).attr("height",C).selectAll("g").data(a).enter().append("g").attr("transform",(t=>`translate(${Number(O(l(t)))}, 0)`)).selectAll("rect").data((t=>Object.keys(this.dimensions).filter((t=>"x"!==t)).map((e=>{var i,s,n,o,r;return{label:null!==(i=this.dimensions[e].label)&&void 0!==i?i:e,key:null!==(s=this.dimensions[e].property)&&void 0!==s?s:"",x:t[null!==(o=null===(n=this.dimensions.x)||void 0===n?void 0:n.property)&&void 0!==o?o:"x"],value:t[null!==(r=this.dimensions[e].property)&&void 0!==r?r:""]}})))).enter().append("rect").attr("x",(t=>Number(_(t.key)))).attr("y",(t=>Number($[t.key](t.value)))).attr("width",_.bandwidth()).attr("height",(t=>C-Number($[t.key](t.value)))).attr("fill",(t=>L(t.key))).classed("bar",!0).on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})),T.append("g").attr("transform",`translate(0, ${C})`).call(c.l78(O)).selectAll("text").attr("text-anchor","end").attr("transform","rotate(-45)translate(-10, 0)"),T.append("g").call(c.V4s(Y)).attr("transform","translate(60, 0)"),void 0!==W&&T.append("g").call(c.eH3(W)).attr("transform",`translate(${A-k}, 0)`),T.append("text").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-1*C/2).attr("y",24).attr("font-weight",800).text(g),void 0!==x&&T.append("text").attr("text-anchor","middle").attr("transform","rotate(90)").attr("x",1*C/2).attr("y",-1*(A-b)).attr("font-weight",800).text(x),t.onLegendReady.call(this,Object.keys(this.dimensions).filter((t=>"x"!==t)).map((t=>{var e,i;return{id:t,label:null!==(e=this.dimensions[t].label)&&void 0!==e?e:t,style:{backgroundColor:void 0===this.dimensions[t].property?"":L(null!==(i=this.dimensions[t].property)&&void 0!==i?i:"")}}})))}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.x},y:{position:t.offsetY,value:e.value}})}getXScale(t,e,i){return c.WH().domain(i).range([t,e]).padding(.25)}getYScale(t,e,i,s){return c.m4Y().domain([0,Number(c.T9B(i,(t=>s(t))))]).range([t,e])}getY2Scale(t,e,i,s){if(void 0!==s)return this.getYScale(t,e,i,s)}getSubgroupScales(t,e,i,s){const n={[t]:e};return void 0!==i&&void 0!==s&&(n[i]=s),n}}};!function(t,e){void 0===e&&(e={});var i=e.insertAt;if(t&&"undefined"!=typeof document){var s=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===i&&s.firstChild?s.insertBefore(n,s.firstChild):s.appendChild(n),n.styleSheet?n.styleSheet.cssText=t:n.appendChild(document.createTextNode(t))}}(".chart .axis .tick text{\r\n    fill:#333;\r\n    font-size:12px;\r\n}\r\n\r\n.chart .y-axis .radial-axis .tick text{\r\n    stroke:#FFF;\r\n    stroke-width:5px;\r\n    paint-order: stroke;\r\n    font-size:14px;\r\n    fill:#000;\r\n\r\n}\r\n\r\n.chart .axis .tick line,\r\n.chart .axis .tick circle{\r\n    stroke:#CCC;\r\n    stroke-width:.5px;\r\n}");class ht extends at{updateD3AxisSettings(t,e){void 0!==e.ticks&&t.ticks(e.ticks),void 0!==e.tickFormat&&t.tickFormat(e.tickFormat),void 0!==e.tickSpace&&t.tickPadding(e.tickSpace)}getD3Scale(t){const e=t.domain[0]instanceof Date?function(){return $.C.apply(W(P,w,D.Mb,C,b.Hl,S.dA,A,p,x,L.aL).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}().domain(t.domain).range(t.range):(0,_.A)().domain(t.domain).range(t.range);return e}getD3YScale(t){return this.getD3Scale(t)}getD3XScale(t){return this.getD3Scale(t)}getYAxis(t,e,i){if(void 0===t.scale)return t=>t;const s=this.getD3YScale(t.scale),n=(0,j.V4)(s);this.updateD3AxisSettings(n,e);const o=t.scale.range[1]-t.scale.range[0],r=Math.min(o/2,void 0!==e.tickSpace?e.tickSpace:50);n.ticks(Math.floor(o/r));const a=this.getyAxisOffset(t);return t=>{const i=t.attr("transform",`translate(${a.x},${a.y})`).call(n);return i.select(".domain").remove(),void 0!==e.rotate&&i.selectAll(".tick").attr("transform",(function(){return null!==this?`${(0,c.Ltv)(this).attr("transform")} rotate(${String(e.rotate)})`:""})),i}}getXAxis(t,e){if(void 0===t.scale)return t=>t;const i=this.getD3XScale(t.scale),s=(0,j.l7)(i);this.updateD3AxisSettings(s,e);const n=t.scale.range[1]-t.scale.range[0],o=Math.min(n/2,void 0!==e.tickSpace?e.tickSpace:200);void 0===e.ticks&&s.ticks(Math.floor(n/o*2));const r=this.getXAxisOffset(t);return t=>{const i=t.attr("transform",`translate(${r.x},${r.y+1})`).call(s);return i.select(".domain").remove(),void 0!==e.rotate&&i.selectAll(".tick").attr("transform",(function(){return null!==this?`${(0,c.Ltv)(this).attr("transform")} rotate(${String(e.rotate)})`:""})),i}}adjustYAxis(){console.log("here");const t=this.getChartElements();if(void 0===t)return;const{svg:e,canvas:i}=t;let s=e.selectAll(".y-axis").nodes()[0];null!=s&&(console.log(s),e.selectAll(".y-axis").attr("translate","transform(100px, 100px)").attr("width",100),i.attr("width",this.getWidth()-45.7),i.attr("transform","translate(45.7, 0)"))}showYAxes(t){var e,i,s;const n=null!==(s=null===(i=null===(e=null==this?void 0:this.settings)||void 0===e?void 0:e.axes)||void 0===i?void 0:i.y)&&void 0!==s?s:{};if(!0===n.exclude)return;const o=this.getChartElements();if(void 0===o)return;const{svg:r}=o;t.forEach(((t,e)=>{if(void 0!==(null==t?void 0:t.scale)){const i=this.getYAxis(t,n,e),s=(r.select(".y-axis").size()>0?r.select(".y-axis"):r.append("g").attr("class","y-axis axis")).append("g").call(i);if(t.plots.length!==this.plots.length){const e=this.getAxisColor(t);s.attr("stroke",e)}}})),"timeseries"===this.settings.layout&&this.showYLabelsForTimeSeries(t,this.plots)}getAxisLabel(t,e){var i;return null===(i=t.plots[0])||void 0===i?void 0:i.dimensions[e].label}showYLabelsForTimeSeries(t,e){const i=void 0!==[Z.line,Z.scatter,Z.seasonal,Z.area].find((t=>t===e[0].type));if(0===e.length||!i)return;const s=this.getChartElements();if(void 0===s)return;const{svg:n}=s,o=n.select(".y-axis").size()>0?n.select(".y-axis"):n.append("g").attr("class","y-axis axis");t.forEach((t=>{var e;o.append("text").attr("class","y-label").attr("transform","rotate(-90)").style("text-anchor","middle").attr("x",-1*Math.floor(this.getChartHeight()/2)).attr("y",""+(this.getyAxisOffset(t).x-24-3)).attr("font-size",".75rem").text(null!==(e=this.getAxisLabel(t,"y"))&&void 0!==e?e:"")}))}getXAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.height+this.settings.margin.top},t.offset)}getyAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.margin.top},t.offset)}showXAxes(t){var e,i,s;const n=null!==(s=null===(i=null===(e=null==this?void 0:this.settings)||void 0===e?void 0:e.axes)||void 0===i?void 0:i.x)&&void 0!==s?s:{};if(!0===n.exclude)return;const o=this.getChartElements();if(void 0===o)return;const{svg:r}=o;t.forEach(((t,e)=>{if(void 0!==(null==t?void 0:t.scale)){const e=this.getXAxis(t,n),i=(r.select(".x-axis").size()>0?r.select(".x-axis"):r.append("g").attr("class","x-axis axis")).append("g").call(e);if(t.plots.length!==this.plots.length){const e=this.getAxisColor(t);i.attr("stroke",e)}}}))}getCanvasContext(){const t=this.getChartElements();if(void 0!==t){const{canvas:e}=t,i=e.node();if(null!=i)return i.getContext("2d")}return null}onResize(t,e){if("auto"===this.settings.width){const{height:i}=this.settings,s=this.getWidth(),n=this.getCanvasContext();if(!0===this.runtime.busy||null===n||void 0===this.chartElements||void 0===n||t===s&&e===i)console.log("skipping resize!");else{this.runtime.busy=!0;const{svg:t,canvas:e}=this.chartElements;t.selectAll("*").remove(),t.attr("viewBox",[0,0,s,i]).attr("width",s),n.clearRect(0,0,+e.attr("width"),+e.attr("height")),e.attr("width",s).attr("height",i),this.init(!0).then((()=>{this.runtime.busy=!1,console.log("drawn")})).catch((t=>{this.onError(t)}))}}}getChartElements(){if(void 0!==this.chartElements)return this.chartElements;const{height:t}=this.settings,e=this.getWidth(),i=d("svg").attr("viewBox",[0,0,e,t]).attr("width",e).attr("height",t).style("position","absolute").style("z-index",20),s=d("canvas").attr("width",e).attr("height",t).style("position","absolute");if(null!==s&&null!==i){this.chartElements={canvas:s,svg:i};const t=this.getCanvasContext();null!==t&&(t.imageSmoothingQuality="high")}return this.chartElements}drawPlotScrubbing(t,e,i,s){const n=this.getChartElements();if(void 0===n)return;if(void 0===e||void 0===e.x||void 0===e.y)return;const{x:o,y:r}=e;this.drawScrubLine(t,e,n.svg,i,s),this.drawPlotScrubCircle(t,null==o?void 0:o.position,null==r?void 0:r.position,n.svg,i)}drawScrubLine(t,e,i,s,n){var o,r,a,l,d,c,u,h;const v=this.getPlotScrubLineClass(t);i.selectAll(`.${v}`).remove();const g=i.insert("line").classed(v,!0);if((null==n?void 0:n.axis)===V.x){const t=this.settings.height-this.settings.margin.bottom;g.attr("x1",null!==(r=null===(o=e.x)||void 0===o?void 0:o.position)&&void 0!==r?r:0).attr("y1",0).attr("x2",null!==(l=null===(a=e.x)||void 0===a?void 0:a.position)&&void 0!==l?l:0).attr("y2",t).attr("stroke",this.getPlotStrokeColor(s)).style("stroke-width",this.getPlotStrokeWidth(s))}else{const t=this.getChartWidth(),i=t-this.settings.margin.left;g.attr("x1",this.settings.margin.left).attr("y1",null!==(c=null===(d=e.y)||void 0===d?void 0:d.position)&&void 0!==c?c:0).attr("x2",t+i).attr("y2",null!==(h=null===(u=e.y)||void 0===u?void 0:u.position)&&void 0!==h?h:0).attr("stroke",this.getPlotStrokeColor(s)).style("stroke-width",this.getPlotStrokeWidth(s))}}drawPlotScrubCircle(t,e,i,s,n){s.selectAll(`.${this.getPlotScrubCircleClass(t)}`).remove(),s.insert("circle").classed(this.getPlotScrubCircleClass(t),!0).attr("r",6).attr("cx",e).attr("cy",i).style("stroke",this.getPlotStrokeColor(n)).style("stroke-width",this.getPlotStrokeWidth(n)).style("fill-opacity","0")}erasePlotScrub(t){void 0!==this.chartElements&&(this.chartElements.svg.select(`.${this.getPlotScrubCircleClass(t)}`).remove(),this.chartElements.svg.select(`.${this.getPlotScrubLineClass(t)}`).remove())}getScrubEvent(t,e,i,s,n,o,r,a){let l,d,u,h,v;e===V.x?(l=t.offsetX,d=a.x,u=i,h=n,v=o):(l=t.offsetY,d=a.y,u=s,h=o,v=n);const g=u.invert(l-d),f=(0,(0,c.ylB)((t=>h(t))).center)(r,g),x=this.getDataRowNearestToScrub(f,g,r,v,h),y=n(x),p=i(y)+a.x,m=o(x);return{x:{position:p,value:y},y:{position:s(m)+a.y,value:m}}}getDataRowNearestToScrub(t,e,i,s,n){const o=i.filter((t=>null!==s(t)&&void 0!==s(t)));let r=Number.MAX_VALUE,a=i[t];for(let t=0;t<o.length;t+=1){const i=n(o[t]),s=Math.abs(+i-+e);s<r&&(r=s,a=o[t])}return a}getPlotStrokeColor(t){var e;return null!==(e=null==t?void 0:t.strokeColor)&&void 0!==e?e:"#333"}getAxisColor(t){var e,i;let s=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.fill)}));return void 0!==s?null===(e=s.style)||void 0===e?void 0:e.fill:(s=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.strokeColor)})),void 0!==s?null===(i=s.style)||void 0===i?void 0:i.strokeColor:"#000")}getPlotStrokeWidth(t){var e;return null!==(e=null==t?void 0:t.strokeWidth)&&void 0!==e?e:1}getPlotScrubCircleClass(t){return`${t}-scrub-circle`}getPlotScrubLineClass(t){return`${t}-scrub-line`}attachChartElements(){const t=this.getChartElements();if(void 0!==this.element&&void 0!==t){const{svg:e,canvas:i}=t,s=null==e?void 0:e.node(),n=null==i?void 0:i.node();null!==s&&null!==n&&(this.element.innerHTML="",this.element.append(s),this.element.append(n))}}createPlot(t){const e=this.getPlotImplementationProps(t);return t.type===Z.line?new ut.Line(e):t.type===Z.area?new ut.Area(e):t.type===Z.scatter?new ut.Scatter(e):t.type===Z.bar?new ut.Bar(e):new rt(e)}clearCanvas(){const t=this.getCanvasContext();null!==t&&t.clearRect(0,0,t.canvas.width,t.canvas.height)}init(t=!1){const e=Object.create(null,{init:{get:()=>super.init}});return ot(this,void 0,void 0,(function*(){yield e.init.call(this,t),this.attachChartElements()}))}destroy(){console.log("destroy"),this.chartElements=void 0,super.destroy()}}class vt extends dt{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l;return ot(this,void 0,void 0,(function*(){const d=void 0!==this.style?this.style:{},c=yield this.getData(),u=null===(e=null==c?void 0:c.parsed)||void 0===e?void 0:e.data,h=this.getAccessorAtAxis("x"),v=this.getAccessorAtAxis("y"),g=this.chart,f=g.getChartElements();if(void 0===f||null===f.svg)return;const x=f.svg,y=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.scale,p=null===(o=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.y)||void 0===o?void 0:o.scale;if(void 0===y||void 0===p||void 0===u||void 0===h||void 0===v)return;const m=g.getD3RadialXScale(y),A=g.getD3RadialYScale(p),S=et().angle((t=>{const e=h(t),i=m(e);return void 0===i?0:i})).radius((t=>{const e=v(t),i=A(e);return void 0===i?0:i})).curve(nt),b=u.slice(),k=g.getChartOffset(),C=void 0!==d.strokeColor?d.strokeColor:"#333";x.append("g").attr("transform",`translate(${k.x},${k.y})`).attr("class","radial-line").append("path").attr("fill","none").attr("stroke",C).attr("stroke-width",void 0!==d.strokeWidth?d.strokeWidth:1).attr("d",S(b)),void 0===(null===(r=this.axes)||void 0===r?void 0:r.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=g.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:C}}])}))}}class gt extends dt{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l;return ot(this,void 0,void 0,(function*(){const d=yield this.getData(),c=null===(e=null==d?void 0:d.parsed)||void 0===e?void 0:e.data,u=this.getAccessorAtAxis("x"),h=this.getAccessorAtAxis("y"),v=this.chart,g=v.getChartElements();if(void 0===g||null===g.svg)return;const f=g.svg,x=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.scale,y=null===(o=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.y)||void 0===o?void 0:o.scale;if(void 0===x||void 0===y||void 0===c||void 0===u||void 0===h)return;const p=v.getD3RadialXScale(x),m=v.getD3RadialYScale(y),A=f.append("g").attr("transform",`translate(${v.getChartSize()/2},${v.getChartSize()/2})`).attr("class","radial-scatter"),S=void 0!==this.style?this.style:{},b=void 0!==S.radius?S.radius:2,k=void 0!==S.fill?S.fill:"#333",C=void 0!==S.strokeColor?S.strokeColor:"#CCC";c.forEach((t=>{const e=(i=(t=>{const e=u(t),i=p(e);return void 0===i?0:i})(t),s=(t=>{const e=h(t),i=m(e);return void 0===i?0:i})(t),[(s=+s)*Math.cos(i-=Math.PI/2),s*Math.sin(i)]);var i,s;A.append("circle").attr("r",2*b).attr("fill",k).attr("stroke",C).attr("stroke-width",void 0!==S.strokeWidth||void 0!==S.strokeColor?void 0!==S.strokeWidth?S.strokeWidth:1:0).attr("cx",e[0]+v.settings.margin.left).attr("cy",e[1]+v.settings.margin.top)})),void 0===(null===(r=this.axes)||void 0===r?void 0:r.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=v.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:k,border:`1px solid ${C}`}}])}))}}class ft extends ct{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r,a,l;return ot(this,void 0,void 0,(function*(){const d=void 0!==this.style?this.style:{},c=yield this.getData(),u=null===(e=null==c?void 0:c.parsed)||void 0===e?void 0:e.data,h=this.getAccessorsAtAxis("x"),v=this.getAccessorAtAxis("x"),g=h.x0,f=h.x1,x=this.getAccessorsAtAxis("y"),y=this.getAccessorAtAxis("y"),p=x.y0,m=x.y1,A=this.chart,S=A.getChartElements();if(void 0===S||null===S.svg)return;const b=S.svg,k=null===(s=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.scale,C=null===(o=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.y)||void 0===o?void 0:o.scale;if(void 0===k||void 0===C||void 0===u||void 0===v&&void 0===g&&void 0===f||void 0===y&&void 0===p&&void 0===m)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const D=A.getD3RadialXScale(k),E=A.getD3RadialYScale(C),P=(t,e)=>i=>{const s=t(i),n=e(s);return void 0===n?0:n};if(void 0===v||void 0===p||void 0===m)return;const w=(M=G().curve(q),L=M.curve,T=M.lineX0,O=M.lineX1,Y=M.lineY0,W=M.lineY1,M.angle=M.x,delete M.x,M.startAngle=M.x0,delete M.x0,M.endAngle=M.x1,delete M.x1,M.radius=M.y,delete M.y,M.innerRadius=M.y0,delete M.y0,M.outerRadius=M.y1,delete M.y1,M.lineStartAngle=function(){return tt(T())},delete M.lineX0,M.lineEndAngle=function(){return tt(O())},delete M.lineX1,M.lineInnerRadius=function(){return tt(Y())},delete M.lineY0,M.lineOuterRadius=function(){return tt(W())},delete M.lineY1,M.curve=function(t){return arguments.length?L(K(t)):L()._curve},M).angle(P(v,D)).innerRadius(P(p,E)).outerRadius(P(m,E)).defined((R=m,t=>{const e=R(t);return!(null==e||isNaN(+e))})).curve(nt);var R,M,L,T,O,Y,W;const $=u.slice(),_=A.getChartOffset(),X=void 0!==d.fill?d.fill:"#EDEDED99";b.insert("g","g.axis").attr("transform",`translate(${_.x},${_.y})`).attr("class","radial-area").append("path").attr("fill",X).attr("stroke-width",void 0!==d.strokeWidth?d.strokeWidth:1).attr("d",w($)),void 0===(null===(r=this.axes)||void 0===r?void 0:r.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=A.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:X}}])}))}}class xt extends lt{constructor(){super(...arguments),this.data=void 0,this.numBins=16,this.speedBins=c.y17(1,8,1),this.stacks=void 0,this.directionMode="to"}setStackedData(){var t,e,i;return ot(this,void 0,void 0,(function*(){let s=[];void 0===this.data&&(this.data=yield this.getData(),s=null!==(e=null===(t=this.data.parsed)||void 0===t?void 0:t.data)&&void 0!==e?e:[]);const n=null===(i=this.data.parsed)||void 0===i?void 0:i.accessors.y;void 0===this.stacks&&void 0!==n&&(this.stacks=this.getStackedData(s,n))}))}getDomain(t){return ot(this,void 0,void 0,(function*(){return yield this.setStackedData(),void 0===this.stacks?[0,10]:[0,this.getMaxStackTotal(this.stacks)]}))}getStackedData(t,e){const i=360/this.numBins,s=c.y17(0,360,i),n=t.map((t=>t.value));this.speedBins=c.ZcS(c.jkA(n),c.T9B(n),5);const o=[];return s.forEach((t=>{const e={minDirection:t};this.speedBins.forEach((t=>{e[t]=0})),o.push(e)})),t.forEach((t=>{const s=Math.floor(t.direction/i),n=o[s],r=Number(e(t)),a=this.speedBins.find((t=>r<t));void 0!==a&&(n[a]+=1)})),o}getMaxStackTotal(t){var e;return null!==(e=c.T9B(t,(t=>this.speedBins.reduce(((e,i)=>e+t[i]),0))))&&void 0!==e?e:0}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,i,s,n,o,r;return ot(this,void 0,void 0,(function*(){const a=this.getAccessorsAtAxis("x"),l=this.getAccessorAtAxis("x"),d=a.x0,u=a.x1,h=this.getAccessorsAtAxis("y"),v=this.getAccessorAtAxis("y"),g=h.y0,f=h.y1;yield this.setStackedData();const x=this.chart,y=x.getChartElements();if(void 0===y||null===y.svg)return;const p=y.svg,m=null===(i=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===i?void 0:i.scale,A=null===(n=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.y)||void 0===n?void 0:n.scale;if(void 0===m||void 0===A||void 0===l&&void 0===d&&void 0===u||void 0===v&&void 0===g&&void 0===f)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");if(void 0===this.stacks||void 0===this.speedBins)return;const S=this.getMaxStackTotal(this.stacks),b=c.WH().domain(c.y17(0,360,360/this.numBins)).range([0,2*Math.PI]),k=c.afO().domain([0,S]).range([x.getInnerRadius(),x.getOuterRadius()]),C=null!==(r=null===(o=this.style)||void 0===o?void 0:o.colors)&&void 0!==r?r:c.zt,D=c.UMr().range(C),E=c.t$z().keys(this.speedBins.map((t=>String(t))))(this.stacks);E.forEach(((t,e)=>{t.forEach((t=>{t.bin={index:e,label:this.speedBins[e]}}))}));const P=x.getChartOffset(),w=2*Math.PI/this.numBins,R=t=>{const e="from"===this.directionMode?b(t):b((t+180)%360);return(null!=e?e:0)-w/2},M=t=>{const e="from"===this.directionMode?b(t):b((t+180)%360);return(null!=e?e:0)+w/2};p.insert("g","g.axis").attr("transform",`translate(${P.x},${P.y})`).selectAll("g").data(E).enter().append("g").attr("fill",(t=>D(t.key))).selectAll("path").data((t=>t)).enter().append("path").on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})).attr("d",c.JLW().innerRadius((t=>k(t[0]))).outerRadius((t=>k(t[1]))).startAngle((t=>R(t.data.minDirection))).endAngle((t=>M(t.data.minDirection))).padAngle(.01).padRadius(x.getInnerRadius())),t.onLegendReady.call(this,E.map(((t,e)=>{var i,s;return{id:t.key,label:`< ${this.speedBins[e]} ${null!==(s=null===(i=this.dimensions.z.displayUnits)||void 0===i?void 0:i.label)&&void 0!==s?s:""}`,style:{backgroundColor:D(t.key)}}})))}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.data.angle},y:{position:t.offsetY,value:Object.assign({},e)}})}}const yt={box:class extends rt{draw(){return ot(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}},line:class extends rt{draw(){return ot(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}}},pt=Object.assign(Object.assign({},yt),{line:dt}),mt={Chart:ht,RadialChart:class extends ht{getInnerRadius(){return this.getChartSize()/5}getOuterRadius(){return this.getChartSize()/2}getXRange(t){return[0,2*Math.PI]}getYRange(t){return[this.getInnerRadius(),this.getOuterRadius()]}getYAxesWidth(){return this.settings.margin.left}getChartSize(){const t=this.getWidth()-this.settings.margin.left-this.settings.margin.right,e=this.settings.height-this.settings.margin.top-this.settings.margin.bottom;return Math.min(t,e)}getChartWidth(){return this.getChartSize()}getChartHeight(){return this.getChartSize()}getD3RadialYScale(t){return(0,X.A)().domain(t.domain).range(t.range)}getD3RadialXScale(t,e=12){const i=2*Math.PI,s=super.getD3XScale(t);return s.range([0,i-i/e]),s}getYAxis(t,e,i){if(void 0===t.scale)return t=>t;const s=this.getyAxisOffset(t),n=this.getD3RadialYScale(t.scale),o=n.tickFormat(),r=n.range()[1]-n.range()[0],a=Math.floor(r/30),l=n.ticks(a).map(o),d=t=>Number(t.replace(/,/g,""));return t=>{const e=0!==i&&i%2!=0?1:-1;return t.attr("class","radial-axis").attr("transform",`translate(${s.x},${s.y})`).attr("text-anchor","middle").selectAll().data(l.reverse()).join("g").attr("class","tick").call((t=>i>0?t:t.append("circle").attr("fill","none").attr("stroke","currentColor").attr("r",(t=>n(d(t)))))).call((t=>t.append("text").attr("y",(t=>e*n(d(t)))).attr("dy","0.35em").attr("stroke","#FFF").attr("strokewidth",5).attr("paint-order","stroke").attr("transform",`rotate(${i>1?-20*(i-1):0})`).text(((t,e)=>`${String(t)}`)))),t}}getChartOffset(){return{x:this.settings.margin.left+this.getChartSize()/2,y:this.settings.margin.top+this.getChartSize()/2}}getXAxisOffset(t){return this.getChartOffset()}getyAxisOffset(t){return this.getChartOffset()}getXAxis(t,e){var i,s,n;if(void 0===t.scale)return t=>t;const o=this.getInnerRadius(),r=this.getOuterRadius(),a=this.getXAxisOffset(t),l=this.getD3RadialXScale(t.scale),d=l.tickFormat(),c=null!==(n=null===(s=null===(i=this.settings.axes)||void 0===i?void 0:i.x)||void 0===s?void 0:s.ticks)&&void 0!==n?n:l.ticks().map(d);return t=>(t.append("g").attr("class","radial-axis").attr("transform",`translate(${a.x},${a.y}) rotate(-90)`).attr("text-anchor","left").call((t=>t.selectAll("g").data(c).join("g").attr("transform",((t,e,i)=>{return`\n            rotate(${s=e,n=i.length,360*s/n})\n            translate(${o},0)\n          `;var s,n})).attr("class","tick").call((t=>t.append("line").attr("x1",-5).attr("x2",r-o+10))).call((t=>t.append("text").attr("text-anchor","middle").attr("transform","rotate(90)translate(0,16)").text((t=>t)))))),t)}createPlot(t){const e=this.getPlotImplementationProps(t);return"line"===t.type?new vt(e):"scatter"===t.type?new gt(e):"area"===t.type?new ft(e):"windrose"===t.type?new xt(e):new vt(e)}},plotTypes:pt}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,