"use strict";(self.webpackChunkaxds_wp_plugins=self.webpackChunkaxds_wp_plugins||[]).push([[99],{99:(t,e,n)=>{n.r(e),n.d(e,{default:()=>ka});var i=n(975),r=n(454);function o(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let i=-1;for(let r of t)(r=+e(r,++i,t))&&(n+=r)}return n}var s=n(543),a="http://www.w3.org/1999/xhtml";const l={svg:"http://www.w3.org/2000/svg",xhtml:a,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function u(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),l.hasOwnProperty(e)?{space:l[e],local:t}:t}function c(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===a&&e.documentElement.namespaceURI===a?e.createElement(t):e.createElementNS(n,t)}}function h(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function d(t){var e=u(t);return(e.local?h:c)(e)}function f(){}function v(t){return null==t?f:function(){return this.querySelector(t)}}function g(){return[]}function p(t){return null==t?g:function(){return this.querySelectorAll(t)}}function y(t){return function(){return this.matches(t)}}function x(t){return function(e){return e.matches(t)}}var m=Array.prototype.find;function _(){return this.firstElementChild}var w=Array.prototype.filter;function b(){return Array.from(this.children)}function A(t){return new Array(t.length)}function S(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function M(t,e,n,i,r,o){for(var s,a=0,l=e.length,u=o.length;a<u;++a)(s=e[a])?(s.__data__=o[a],i[a]=s):n[a]=new S(t,o[a]);for(;a<l;++a)(s=e[a])&&(r[a]=s)}function k(t,e,n,i,r,o,s){var a,l,u,c=new Map,h=e.length,d=o.length,f=new Array(h);for(a=0;a<h;++a)(l=e[a])&&(f[a]=u=s.call(l,l.__data__,a,e)+"",c.has(u)?r[a]=l:c.set(u,l));for(a=0;a<d;++a)u=s.call(t,o[a],a,o)+"",(l=c.get(u))?(i[a]=l,l.__data__=o[a],c.delete(u)):n[a]=new S(t,o[a]);for(a=0;a<h;++a)(l=e[a])&&c.get(f[a])===l&&(r[a]=l)}function C(t){return t.__data__}function D(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function E(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function T(t){return function(){this.removeAttribute(t)}}function $(t){return function(){this.removeAttributeNS(t.space,t.local)}}function N(t,e){return function(){this.setAttribute(t,e)}}function P(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function L(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function R(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function Y(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function O(t){return function(){this.style.removeProperty(t)}}function U(t,e,n){return function(){this.style.setProperty(t,e,n)}}function F(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function j(t,e){return t.style.getPropertyValue(e)||Y(t).getComputedStyle(t,null).getPropertyValue(e)}function X(t){return function(){delete this[t]}}function H(t,e){return function(){this[t]=e}}function z(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function I(t){return t.trim().split(/^|\s+/)}function W(t){return t.classList||new q(t)}function q(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function B(t,e){for(var n=W(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function V(t,e){for(var n=W(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function Z(t){return function(){B(this,t)}}function G(t){return function(){V(this,t)}}function Q(t,e){return function(){(e.apply(this,arguments)?B:V)(this,t)}}function J(){this.textContent=""}function K(t){return function(){this.textContent=t}}function tt(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function et(){this.innerHTML=""}function nt(t){return function(){this.innerHTML=t}}function it(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function rt(){this.nextSibling&&this.parentNode.appendChild(this)}function ot(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function st(){return null}function at(){var t=this.parentNode;t&&t.removeChild(this)}function lt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ut(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ct(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,o=e.length;i<o;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.options);++r?e.length=r:delete this.__on}}}function ht(t,e,n){return function(){var i,r=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(r)for(var s=0,a=r.length;s<a;++s)if((i=r[s]).type===t.type&&i.name===t.name)return this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),void(i.value=e);this.addEventListener(t.type,o,n),i={type:t.type,name:t.name,value:e,listener:o,options:n},r?r.push(i):this.__on=[i]}}function dt(t,e,n){var i=Y(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function ft(t,e){return function(){return dt(this,t,e)}}function vt(t,e){return function(){return dt(this,t,e.apply(this,arguments))}}S.prototype={constructor:S,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var gt=[null];function pt(t,e){this._groups=t,this._parents=e}function yt(){return new pt([[document.documentElement]],gt)}pt.prototype=yt.prototype={constructor:pt,select:function(t){"function"!=typeof t&&(t=v(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s,a=e[r],l=a.length,u=i[r]=new Array(l),c=0;c<l;++c)(o=a[c])&&(s=t.call(o,o.__data__,c,a))&&("__data__"in o&&(s.__data__=o.__data__),u[c]=s);return new pt(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(e=t.apply(this,arguments))?[]:Array.isArray(e)?e:Array.from(e);var e}}(t):p(t);for(var e=this._groups,n=e.length,i=[],r=[],o=0;o<n;++o)for(var s,a=e[o],l=a.length,u=0;u<l;++u)(s=a[u])&&(i.push(t.call(s,s.__data__,u,a)),r.push(s));return new pt(i,r)},selectChild:function(t){return this.select(null==t?_:function(t){return function(){return m.call(this.children,t)}}("function"==typeof t?t:x(t)))},selectChildren:function(t){return this.selectAll(null==t?b:function(t){return function(){return w.call(this.children,t)}}("function"==typeof t?t:x(t)))},filter:function(t){"function"!=typeof t&&(t=y(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s=e[r],a=s.length,l=i[r]=[],u=0;u<a;++u)(o=s[u])&&t.call(o,o.__data__,u,s)&&l.push(o);return new pt(i,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,C);var n,i=e?k:M,r=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=o.length,a=new Array(s),l=new Array(s),u=new Array(s),c=0;c<s;++c){var h=r[c],d=o[c],f=d.length,v=D(t.call(h,h&&h.__data__,c,r)),g=v.length,p=l[c]=new Array(g),y=a[c]=new Array(g);i(h,d,p,y,u[c]=new Array(f),v,e);for(var x,m,_=0,w=0;_<g;++_)if(x=p[_]){for(_>=w&&(w=_+1);!(m=y[w])&&++w<g;);x._next=m||null}}return(a=new pt(a,r))._enter=l,a._exit=u,a},enter:function(){return new pt(this._enter||this._groups.map(A),this._parents)},exit:function(){return new pt(this._exit||this._groups.map(A),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,o=this.exit();return"function"==typeof t?(i=t(i))&&(i=i.selection()):i=i.append(t+""),null!=e&&(r=e(r))&&(r=r.selection()),null==n?o.remove():n(o),i&&r?i.merge(r).order():r},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,i=e._groups,r=n.length,o=i.length,s=Math.min(r,o),a=new Array(r),l=0;l<s;++l)for(var u,c=n[l],h=i[l],d=c.length,f=a[l]=new Array(d),v=0;v<d;++v)(u=c[v]||h[v])&&(f[v]=u);for(;l<r;++l)a[l]=n[l];return new pt(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],o=r.length-1,s=r[o];--o>=0;)(i=r[o])&&(s&&4^i.compareDocumentPosition(s)&&s.parentNode.insertBefore(i,s),s=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=E);for(var n=this._groups,i=n.length,r=new Array(i),o=0;o<i;++o){for(var s,a=n[o],l=a.length,u=r[o]=new Array(l),c=0;c<l;++c)(s=a[c])&&(u[c]=s);u.sort(e)}return new pt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,o=i.length;r<o;++r){var s=i[r];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,o=e[n],s=0,a=o.length;s<a;++s)(r=o[s])&&t.call(r,r.__data__,s,o);return this},attr:function(t,e){var n=u(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?$:T:"function"==typeof e?n.local?R:L:n.local?P:N)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?O:"function"==typeof e?F:U)(t,e,null==n?"":n)):j(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?X:"function"==typeof e?z:H)(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var i=W(this.node()),r=-1,o=n.length;++r<o;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?Q:e?Z:G)(n,e))},text:function(t){return arguments.length?this.each(null==t?J:("function"==typeof t?tt:K)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?et:("function"==typeof t?it:nt)(t)):this.node().innerHTML},raise:function(){return this.each(rt)},lower:function(){return this.each(ot)},append:function(t){var e="function"==typeof t?t:d(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:d(t),i=null==e?st:"function"==typeof e?e:v(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(at)},clone:function(t){return this.select(t?ut:lt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?ht:ct,i=0;i<s;++i)this.each(a(o[i],e,n));return this}var a=this.node().__on;if(a)for(var l,u=0,c=a.length;u<c;++u)for(i=0,l=a[u];i<s;++i)if((r=o[i]).type===l.type&&r.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?vt:ft)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i,r=t[e],o=0,s=r.length;o<s;++o)(i=r[o])&&(yield i)}};const xt=yt;function mt(t){return function(t){return"string"==typeof t?new pt([[document.querySelector(t)]],[document.documentElement]):new pt([[t]],gt)}(d(t).call(document.documentElement))}function _t(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function wt(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function bt(t){let e,n,i;function r(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<0?r=e+1:o=e}while(r<o)}return r}return 2!==t.length?(e=_t,n=(e,n)=>_t(t(e),n),i=(e,n)=>t(e)-n):(e=t===_t||t===wt?t:At,n=t,i=t),{left:r,center:function(t,e,n=0,o=t.length){const s=r(t,e,n,o-1);return s>n&&i(t[s-1],e)>-i(t[s],e)?s-1:s},right:function(t,i,r=0,o=t.length){if(r<o){if(0!==e(i,i))return o;do{const e=r+o>>>1;n(t[e],i)<=0?r=e+1:o=e}while(r<o)}return r}}}function At(){return 0}function St(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let i=-1;for(let r of t)null!=(r=e(r,++i,t))&&(n<r||void 0===n&&r>=r)&&(n=r)}return n}function Mt(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var i=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(r);++i<r;)o[i]=t+i*n;return o}const kt=Math.sqrt(50),Ct=Math.sqrt(10),Dt=Math.sqrt(2);function Et(t,e,n){const i=(e-t)/Math.max(0,n),r=Math.floor(Math.log10(i)),o=i/Math.pow(10,r),s=o>=kt?10:o>=Ct?5:o>=Dt?2:1;let a,l,u;return r<0?(u=Math.pow(10,-r)/s,a=Math.round(t*u),l=Math.round(e*u),a/u<t&&++a,l/u>e&&--l,u=-u):(u=Math.pow(10,r)*s,a=Math.round(t/u),l=Math.round(e/u),a*u<t&&++a,l*u>e&&--l),l<a&&.5<=n&&n<2?Et(t,e,2*n):[a,l,u]}function Tt(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const i=e<t,[r,o,s]=i?Et(e,t,n):Et(t,e,n);if(!(o>=r))return[];const a=o-r+1,l=new Array(a);if(i)if(s<0)for(let t=0;t<a;++t)l[t]=(o-t)/-s;else for(let t=0;t<a;++t)l[t]=(o-t)*s;else if(s<0)for(let t=0;t<a;++t)l[t]=(r+t)/-s;else for(let t=0;t<a;++t)l[t]=(r+t)*s;return l}function $t(t,e,n){return Et(t=+t,e=+e,n=+n)[2]}function Nt(t,e,n){n=+n;const i=(e=+e)<(t=+t),r=i?$t(e,t,n):$t(t,e,n);return(i?-1:1)*(r<0?1/-r:r)}function Pt(t){return t}var Lt=1,Rt=2,Yt=3,Ot=4,Ut=1e-6;function Ft(t){return"translate("+t+",0)"}function jt(t){return"translate(0,"+t+")"}function Xt(t){return e=>+t(e)}function Ht(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function zt(){return!this.__axis}function It(t,e){var n=[],i=null,r=null,o=6,s=6,a=3,l="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,u=t===Lt||t===Ot?-1:1,c=t===Ot||t===Rt?"x":"y",h=t===Lt||t===Yt?Ft:jt;function d(d){var f=null==i?e.ticks?e.ticks.apply(e,n):e.domain():i,v=null==r?e.tickFormat?e.tickFormat.apply(e,n):Pt:r,g=Math.max(o,0)+a,p=e.range(),y=+p[0]+l,x=+p[p.length-1]+l,m=(e.bandwidth?Ht:Xt)(e.copy(),l),_=d.selection?d.selection():d,w=_.selectAll(".domain").data([null]),b=_.selectAll(".tick").data(f,e).order(),A=b.exit(),S=b.enter().append("g").attr("class","tick"),M=b.select("line"),k=b.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(c+"2",u*o)),k=k.merge(S.append("text").attr("fill","currentColor").attr(c,u*g).attr("dy",t===Lt?"0em":t===Yt?"0.71em":"0.32em")),d!==_&&(w=w.transition(d),b=b.transition(d),M=M.transition(d),k=k.transition(d),A=A.transition(d).attr("opacity",Ut).attr("transform",(function(t){return isFinite(t=m(t))?h(t+l):this.getAttribute("transform")})),S.attr("opacity",Ut).attr("transform",(function(t){var e=this.parentNode.__axis;return h((e&&isFinite(e=e(t))?e:m(t))+l)}))),A.remove(),w.attr("d",t===Ot||t===Rt?s?"M"+u*s+","+y+"H"+l+"V"+x+"H"+u*s:"M"+l+","+y+"V"+x:s?"M"+y+","+u*s+"V"+l+"H"+x+"V"+u*s:"M"+y+","+l+"H"+x),b.attr("opacity",1).attr("transform",(function(t){return h(m(t)+l)})),M.attr(c+"2",u*o),k.attr(c,u*g).text(v),_.filter(zt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Rt?"start":t===Ot?"end":"middle"),_.each((function(){this.__axis=m}))}return d.scale=function(t){return arguments.length?(e=t,d):e},d.ticks=function(){return n=Array.from(arguments),d},d.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),d):n.slice()},d.tickValues=function(t){return arguments.length?(i=null==t?null:Array.from(t),d):i&&i.slice()},d.tickFormat=function(t){return arguments.length?(r=t,d):r},d.tickSize=function(t){return arguments.length?(o=s=+t,d):o},d.tickSizeInner=function(t){return arguments.length?(o=+t,d):o},d.tickSizeOuter=function(t){return arguments.length?(s=+t,d):s},d.tickPadding=function(t){return arguments.length?(a=+t,d):a},d.offset=function(t){return arguments.length?(l=+t,d):l},d}function Wt(t){return It(Yt,t)}function qt(t){return It(Ot,t)}var Bt={value:()=>{}};function Vt(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i||/[\s.]/.test(t))throw new Error("illegal type: "+t);i[t]=[]}return new Zt(i)}function Zt(t){this._=t}function Gt(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function Qt(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=Bt,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}Zt.prototype=Vt.prototype={constructor:Zt,on:function(t,e){var n,i,r=this._,o=(i=r,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!i.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),s=-1,a=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++s<a;)if(n=(t=o[s]).type)r[n]=Qt(r[n],t.name,e);else if(null==e)for(n in r)r[n]=Qt(r[n],t.name,null);return this}for(;++s<a;)if((n=(t=o[s]).type)&&(n=Gt(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Zt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),o=0;o<n;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(i=this._[t]).length;o<n;++o)i[o].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(e,n)}};const Jt=Vt;var Kt,te,ee=0,ne=0,ie=0,re=1e3,oe=0,se=0,ae=0,le="object"==typeof performance&&performance.now?performance:Date,ue="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ce(){return se||(ue(he),se=le.now()+ae)}function he(){se=0}function de(){this._call=this._time=this._next=null}function fe(t,e,n){var i=new de;return i.restart(t,e,n),i}function ve(){se=(oe=le.now())+ae,ee=ne=0;try{!function(){ce(),++ee;for(var t,e=Kt;e;)(t=se-e._time)>=0&&e._call.call(void 0,t),e=e._next;--ee}()}finally{ee=0,function(){for(var t,e,n=Kt,i=1/0;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Kt=e);te=t,pe(i)}(),se=0}}function ge(){var t=le.now(),e=t-oe;e>re&&(ae-=e,oe=t)}function pe(t){ee||(ne&&(ne=clearTimeout(ne)),t-se>24?(t<1/0&&(ne=setTimeout(ve,t-le.now()-ae)),ie&&(ie=clearInterval(ie))):(ie||(oe=le.now(),ie=setInterval(ge,re)),ee=1,ue(ve)))}function ye(t,e,n){var i=new de;return e=null==e?0:+e,i.restart((n=>{i.stop(),t(n+e)}),e,n),i}de.prototype=fe.prototype={constructor:de,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ce():+n)+(null==e?0:+e),this._next||te===this||(te?te._next=this:Kt=this,te=this),this._call=t,this._time=n,pe()},stop:function(){this._call&&(this._call=null,this._time=1/0,pe())}};var xe=Jt("start","end","cancel","interrupt"),me=[],_e=0,we=3;function be(t,e,n,i,r,o){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function o(l){var u,c,h,d;if(1!==n.state)return a();for(u in r)if((d=r[u]).name===n.name){if(d.state===we)return ye(o);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[u]):+u<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete r[u])}if(ye((function(){n.state===we&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(l))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=we,i=new Array(h=n.tween.length),u=0,c=-1;u<h;++u)(d=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(i[++c]=d);i.length=c+1}}function s(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(a),n.state=5,1),o=-1,s=i.length;++o<s;)i[o].call(t,r);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),a())}function a(){for(var i in n.state=6,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=fe((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:i,group:r,on:xe,tween:me,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:_e})}function Ae(t,e){var n=Me(t,e);if(n.state>_e)throw new Error("too late; already scheduled");return n}function Se(t,e){var n=Me(t,e);if(n.state>we)throw new Error("too late; already running");return n}function Me(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function ke(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Ce,De=180/Math.PI,Ee={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Te(t,e,n,i,r,o){var s,a,l;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(l=t*n+e*i)&&(n-=t*l,i-=e*l),(a=Math.sqrt(n*n+i*i))&&(n/=a,i/=a,l/=a),t*i<e*n&&(t=-t,e=-e,l=-l,s=-s),{translateX:r,translateY:o,rotate:Math.atan2(e,t)*De,skewX:Math.atan(l)*De,scaleX:s,scaleY:a}}function $e(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],l=[];return o=t(o),s=t(s),function(t,i,r,o,s,a){if(t!==r||i!==o){var l=s.push("translate(",null,e,null,n);a.push({i:l-4,x:ke(t,r)},{i:l-2,x:ke(i,o)})}else(r||o)&&s.push("translate("+r+e+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,a,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(r(n)+"rotate(",null,i)-2,x:ke(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(o.rotate,s.rotate,a,l),function(t,e,n,o){t!==e?o.push({i:n.push(r(n)+"skewX(",null,i)-2,x:ke(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(o.skewX,s.skewX,a,l),function(t,e,n,i,o,s){if(t!==n||e!==i){var a=o.push(r(o)+"scale(",null,",",null,")");s.push({i:a-4,x:ke(t,n)},{i:a-2,x:ke(e,i)})}else 1===n&&1===i||o.push(r(o)+"scale("+n+","+i+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,l),o=s=null,function(t){for(var e,n=-1,i=l.length;++n<i;)a[(e=l[n]).i]=e.x(t);return a.join("")}}}var Ne=$e((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Ee:Te(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Pe=$e((function(t){return null==t?Ee:(Ce||(Ce=document.createElementNS("http://www.w3.org/2000/svg","g")),Ce.setAttribute("transform",t),(t=Ce.transform.baseVal.consolidate())?Te((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Ee)}),", ",")",")");function Le(t,e){var n,i;return function(){var r=Se(this,t),o=r.tween;if(o!==n)for(var s=0,a=(i=n=o).length;s<a;++s)if(i[s].name===e){(i=i.slice()).splice(s,1);break}r.tween=i}}function Re(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var o=Se(this,t),s=o.tween;if(s!==i){r=(i=s).slice();for(var a={name:e,value:n},l=0,u=r.length;l<u;++l)if(r[l].name===e){r[l]=a;break}l===u&&r.push(a)}o.tween=r}}function Ye(t,e,n){var i=t._id;return t.each((function(){var t=Se(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Me(t,i).value[e]}}function Oe(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Ue(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function Fe(){}var je=.7,Xe=1/je,He="\\s*([+-]?\\d+)\\s*",ze="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ie="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",We=/^#([0-9a-f]{3,8})$/,qe=new RegExp(`^rgb\\(${He},${He},${He}\\)$`),Be=new RegExp(`^rgb\\(${Ie},${Ie},${Ie}\\)$`),Ve=new RegExp(`^rgba\\(${He},${He},${He},${ze}\\)$`),Ze=new RegExp(`^rgba\\(${Ie},${Ie},${Ie},${ze}\\)$`),Ge=new RegExp(`^hsl\\(${ze},${Ie},${Ie}\\)$`),Qe=new RegExp(`^hsla\\(${ze},${Ie},${Ie},${ze}\\)$`),Je={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ke(){return this.rgb().formatHex()}function tn(){return this.rgb().formatRgb()}function en(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=We.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?nn(e):3===n?new sn(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?rn(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?rn(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=qe.exec(t))?new sn(e[1],e[2],e[3],1):(e=Be.exec(t))?new sn(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ve.exec(t))?rn(e[1],e[2],e[3],e[4]):(e=Ze.exec(t))?rn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ge.exec(t))?dn(e[1],e[2]/100,e[3]/100,1):(e=Qe.exec(t))?dn(e[1],e[2]/100,e[3]/100,e[4]):Je.hasOwnProperty(t)?nn(Je[t]):"transparent"===t?new sn(NaN,NaN,NaN,0):null}function nn(t){return new sn(t>>16&255,t>>8&255,255&t,1)}function rn(t,e,n,i){return i<=0&&(t=e=n=NaN),new sn(t,e,n,i)}function on(t,e,n,i){return 1===arguments.length?((r=t)instanceof Fe||(r=en(r)),r?new sn((r=r.rgb()).r,r.g,r.b,r.opacity):new sn):new sn(t,e,n,null==i?1:i);var r}function sn(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function an(){return`#${hn(this.r)}${hn(this.g)}${hn(this.b)}`}function ln(){const t=un(this.opacity);return`${1===t?"rgb(":"rgba("}${cn(this.r)}, ${cn(this.g)}, ${cn(this.b)}${1===t?")":`, ${t})`}`}function un(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function cn(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function hn(t){return((t=cn(t))<16?"0":"")+t.toString(16)}function dn(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new vn(t,e,n,i)}function fn(t){if(t instanceof vn)return new vn(t.h,t.s,t.l,t.opacity);if(t instanceof Fe||(t=en(t)),!t)return new vn;if(t instanceof vn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),o=Math.max(e,n,i),s=NaN,a=o-r,l=(o+r)/2;return a?(s=e===o?(n-i)/a+6*(n<i):n===o?(i-e)/a+2:(e-n)/a+4,a/=l<.5?o+r:2-o-r,s*=60):a=l>0&&l<1?0:s,new vn(s,a,l,t.opacity)}function vn(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function gn(t){return(t=(t||0)%360)<0?t+360:t}function pn(t){return Math.max(0,Math.min(1,t||0))}function yn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function xn(t,e,n,i,r){var o=t*t,s=o*t;return((1-3*t+3*o-s)*e+(4-6*o+3*s)*n+(1+3*t+3*o-3*s)*i+s*r)/6}Oe(Fe,en,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Ke,formatHex:Ke,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return fn(this).formatHsl()},formatRgb:tn,toString:tn}),Oe(sn,on,Ue(Fe,{brighter(t){return t=null==t?Xe:Math.pow(Xe,t),new sn(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?je:Math.pow(je,t),new sn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new sn(cn(this.r),cn(this.g),cn(this.b),un(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:an,formatHex:an,formatHex8:function(){return`#${hn(this.r)}${hn(this.g)}${hn(this.b)}${hn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:ln,toString:ln})),Oe(vn,(function(t,e,n,i){return 1===arguments.length?fn(t):new vn(t,e,n,null==i?1:i)}),Ue(Fe,{brighter(t){return t=null==t?Xe:Math.pow(Xe,t),new vn(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?je:Math.pow(je,t),new vn(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new sn(yn(t>=240?t-240:t+120,r,i),yn(t,r,i),yn(t<120?t+240:t-120,r,i),this.opacity)},clamp(){return new vn(gn(this.h),pn(this.s),pn(this.l),un(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=un(this.opacity);return`${1===t?"hsl(":"hsla("}${gn(this.h)}, ${100*pn(this.s)}%, ${100*pn(this.l)}%${1===t?")":`, ${t})`}`}}));const mn=t=>()=>t;function _n(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):mn(isNaN(t)?e:t)}const wn=function t(e){var n=function(t){return 1==(t=+t)?_n:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):mn(isNaN(e)?n:e)}}(e);function i(t,e){var i=n((t=on(t)).r,(e=on(e)).r),r=n(t.g,e.g),o=n(t.b,e.b),s=_n(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=o(e),t.opacity=s(e),t+""}}return i.gamma=t,i}(1);function bn(t){return function(e){var n,i,r=e.length,o=new Array(r),s=new Array(r),a=new Array(r);for(n=0;n<r;++n)i=on(e[n]),o[n]=i.r||0,s[n]=i.g||0,a[n]=i.b||0;return o=t(o),s=t(s),a=t(a),i.opacity=1,function(t){return i.r=o(t),i.g=s(t),i.b=a(t),i+""}}}bn((function(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],o=t[i+1],s=i>0?t[i-1]:2*r-o,a=i<e-1?t[i+2]:2*o-r;return xn((n-i/e)*e,s,r,o,a)}})),bn((function(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],o=t[i%e],s=t[(i+1)%e],a=t[(i+2)%e];return xn((n-i/e)*e,r,o,s,a)}}));var An=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Sn=new RegExp(An.source,"g");function Mn(t,e){var n,i,r,o=An.lastIndex=Sn.lastIndex=0,s=-1,a=[],l=[];for(t+="",e+="";(n=An.exec(t))&&(i=Sn.exec(e));)(r=i.index)>o&&(r=e.slice(o,r),a[s]?a[s]+=r:a[++s]=r),(n=n[0])===(i=i[0])?a[s]?a[s]+=i:a[++s]=i:(a[++s]=null,l.push({i:s,x:ke(n,i)})),o=Sn.lastIndex;return o<e.length&&(r=e.slice(o),a[s]?a[s]+=r:a[++s]=r),a.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,i=0;i<e;++i)a[(n=l[i]).i]=n.x(t);return a.join("")})}function kn(t,e){var n;return("number"==typeof e?ke:e instanceof en?wn:(n=en(e))?(e=n,wn):Mn)(t,e)}function Cn(t){return function(){this.removeAttribute(t)}}function Dn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function En(t,e,n){var i,r,o=n+"";return function(){var s=this.getAttribute(t);return s===o?null:s===i?r:r=e(i=s,n)}}function Tn(t,e,n){var i,r,o=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===i?r:r=e(i=s,n)}}function $n(t,e,n){var i,r,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttribute(t))===(a=l+"")?null:s===i&&a===r?o:(r=a,o=e(i=s,l));this.removeAttribute(t)}}function Nn(t,e,n){var i,r,o;return function(){var s,a,l=n(this);if(null!=l)return(s=this.getAttributeNS(t.space,t.local))===(a=l+"")?null:s===i&&a===r?o:(r=a,o=e(i=s,l));this.removeAttributeNS(t.space,t.local)}}function Pn(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Ln(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,r)),n}return r._value=e,r}function Rn(t,e){return function(){Ae(this,t).delay=+e.apply(this,arguments)}}function Yn(t,e){return e=+e,function(){Ae(this,t).delay=e}}function On(t,e){return function(){Se(this,t).duration=+e.apply(this,arguments)}}function Un(t,e){return e=+e,function(){Se(this,t).duration=e}}var Fn=xt.prototype.constructor;function jn(t){return function(){this.style.removeProperty(t)}}var Xn=0;function Hn(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function zn(){return++Xn}var In=xt.prototype;Hn.prototype=function(t){return xt().transition(t)}.prototype={constructor:Hn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=v(t));for(var i=this._groups,r=i.length,o=new Array(r),s=0;s<r;++s)for(var a,l,u=i[s],c=u.length,h=o[s]=new Array(c),d=0;d<c;++d)(a=u[d])&&(l=t.call(a,a.__data__,d,u))&&("__data__"in a&&(l.__data__=a.__data__),h[d]=l,be(h[d],e,n,d,h,Me(a,n)));return new Hn(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=p(t));for(var i=this._groups,r=i.length,o=[],s=[],a=0;a<r;++a)for(var l,u=i[a],c=u.length,h=0;h<c;++h)if(l=u[h]){for(var d,f=t.call(l,l.__data__,h,u),v=Me(l,n),g=0,y=f.length;g<y;++g)(d=f[g])&&be(d,e,n,g,f,v);o.push(f),s.push(l)}return new Hn(o,s,e,n)},selectChild:In.selectChild,selectChildren:In.selectChildren,filter:function(t){"function"!=typeof t&&(t=y(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var o,s=e[r],a=s.length,l=i[r]=[],u=0;u<a;++u)(o=s[u])&&t.call(o,o.__data__,u,s)&&l.push(o);return new Hn(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,o=Math.min(i,r),s=new Array(i),a=0;a<o;++a)for(var l,u=e[a],c=n[a],h=u.length,d=s[a]=new Array(h),f=0;f<h;++f)(l=u[f]||c[f])&&(d[f]=l);for(;a<i;++a)s[a]=e[a];return new Hn(s,this._parents,this._name,this._id)},selection:function(){return new Fn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=zn(),i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],l=a.length,u=0;u<l;++u)if(s=a[u]){var c=Me(s,e);be(s,t,n,u,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Hn(i,this._parents,t,n)},call:In.call,nodes:In.nodes,node:In.node,size:In.size,empty:In.empty,each:In.each,on:function(t,e){var n=this._id;return arguments.length<2?Me(this.node(),n).on.on(t):this.each(function(t,e,n){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Ae:Se;return function(){var s=o(this,t),a=s.on;a!==i&&(r=(i=a).copy()).on(e,n),s.on=r}}(n,t,e))},attr:function(t,e){var n=u(t),i="transform"===n?Pe:kn;return this.attrTween(t,"function"==typeof e?(n.local?Nn:$n)(n,i,Ye(this,"attr."+t,e)):null==e?(n.local?Dn:Cn)(n):(n.local?Tn:En)(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=u(t);return this.tween(n,(i.local?Pn:Ln)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?Ne:kn;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var o=j(this,t),s=(this.style.removeProperty(t),j(this,t));return o===s?null:o===n&&s===i?r:r=e(n=o,i=s)}}(t,i)).on("end.style."+t,jn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,o;return function(){var s=j(this,t),a=n(this),l=a+"";return null==a&&(this.style.removeProperty(t),l=a=j(this,t)),s===l?null:s===i&&l===r?o:(r=l,o=e(i=s,a))}}(t,i,Ye(this,"style."+t,e))).each(function(t,e){var n,i,r,o,s="style."+e,a="end."+s;return function(){var l=Se(this,t),u=l.on,c=null==l.value[s]?o||(o=jn(e)):void 0;u===n&&r===c||(i=(n=u).copy()).on(a,r=c),l.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,o=n+"";return function(){var s=j(this,t);return s===o?null:s===i?r:r=e(i=s,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,function(t,e,n){var i,r;function o(){var o=e.apply(this,arguments);return o!==r&&(i=(r=o)&&function(t,e,n){return function(i){this.style.setProperty(t,e.call(this,i),n)}}(t,o,n)),i}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ye(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function i(){var i=t.apply(this,arguments);return i!==n&&(e=(n=i)&&function(t){return function(e){this.textContent=t.call(this,e)}}(i)),e}return i._value=t,i}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=Me(this.node(),n).tween,o=0,s=r.length;o<s;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==e?Le:Re)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Rn:Yn)(e,t)):Me(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?On:Un)(e,t)):Me(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Se(this,t).ease=e}}(e,t)):Me(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Se(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise((function(o,s){var a={value:s},l={value:function(){0==--r&&o()}};n.each((function(){var n=Se(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(l)),n.on=e})),0===r&&o()}))},[Symbol.iterator]:In[Symbol.iterator]};var Wn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function qn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}xt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,i,r,o=t.__transition,s=!0;if(o){for(r in e=null==e?null:e+"",o)(n=o[r]).name===e?(i=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[r]):s=!1;s&&delete t.__transition}}(this,t)}))},xt.prototype.transition=function(t){var e,n;t instanceof Hn?(e=t._id,t=t._name):(e=zn(),(n=Wn).time=ce(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var s,a=i[o],l=a.length,u=0;u<l;++u)(s=a[u])&&be(s,t,e,u,a,n||qn(s,e));return new Hn(i,this._parents,t,e)};const{abs:Bn,max:Vn,min:Zn}=Math;function Gn(t){return{type:t}}function Qn(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}["w","e"].map(Gn),["n","s"].map(Gn),["n","w","e","s","nw","ne","sw","se"].map(Gn);class Jn extends Map{constructor(t,e=ti){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:e}}),null!=t)for(const[e,n]of t)this.set(e,n)}get(t){return super.get(Kn(this,t))}has(t){return super.has(Kn(this,t))}set(t,e){return super.set(function({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):(t.set(i,n),n)}(this,t),e)}delete(t){return super.delete(function({_intern:t,_key:e},n){const i=e(n);return t.has(i)&&(n=t.get(i),t.delete(i)),n}(this,t))}}function Kn({_intern:t,_key:e},n){const i=e(n);return t.has(i)?t.get(i):n}function ti(t){return null!==t&&"object"==typeof t?t.valueOf():t}Set;const ei=Symbol("implicit");function ni(){var t=new Jn,e=[],n=[],i=ei;function r(r){let o=t.get(r);if(void 0===o){if(i!==ei)return i;t.set(r,o=e.push(r)-1)}return n[o%n.length]}return r.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Jn;for(const i of n)t.has(i)||t.set(i,e.push(i)-1);return r},r.range=function(t){return arguments.length?(n=Array.from(t),r):n.slice()},r.unknown=function(t){return arguments.length?(i=t,r):i},r.copy=function(){return ni(e,n).unknown(i)},Qn.apply(r,arguments),r}function ii(){var t,e,n=ni().unknown(void 0),i=n.domain,r=n.range,o=0,s=1,a=!1,l=0,u=0,c=.5;function h(){var n=i().length,h=s<o,d=h?s:o,f=h?o:s;t=(f-d)/Math.max(1,n-l+2*u),a&&(t=Math.floor(t)),d+=(f-d-t*(n-l))*c,e=t*(1-l),a&&(d=Math.round(d),e=Math.round(e));var v=Mt(n).map((function(e){return d+t*e}));return r(h?v.reverse():v)}return delete n.unknown,n.domain=function(t){return arguments.length?(i(t),h()):i()},n.range=function(t){return arguments.length?([o,s]=t,o=+o,s=+s,h()):[o,s]},n.rangeRound=function(t){return[o,s]=t,o=+o,s=+s,a=!0,h()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,h()):a},n.padding=function(t){return arguments.length?(l=Math.min(1,u=+t),h()):l},n.paddingInner=function(t){return arguments.length?(l=Math.min(1,t),h()):l},n.paddingOuter=function(t){return arguments.length?(u=+t,h()):u},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),h()):c},n.copy=function(){return ii(i(),[o,s]).round(a).paddingInner(l).paddingOuter(u).align(c)},Qn.apply(h(),arguments)}const ri=bt(_t),oi=ri.right,si=(ri.left,bt((function(t){return null===t?NaN:+t})).center,oi);function ai(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,o=new Array(r),s=new Array(i);for(n=0;n<r;++n)o[n]=hi(t[n],e[n]);for(;n<i;++n)s[n]=e[n];return function(t){for(n=0;n<r;++n)s[n]=o[n](t);return s}}function li(t,e){var n=new Date;return t=+t,e=+e,function(i){return n.setTime(t*(1-i)+e*i),n}}function ui(t,e){var n,i={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?i[n]=hi(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}}function ci(t,e){e||(e=[]);var n,i=t?Math.min(e.length,t.length):0,r=e.slice();return function(o){for(n=0;n<i;++n)r[n]=t[n]*(1-o)+e[n]*o;return r}}function hi(t,e){var n,i,r=typeof e;return null==e||"boolean"===r?mn(e):("number"===r?ke:"string"===r?(n=en(e))?(e=n,wn):Mn:e instanceof en?wn:e instanceof Date?li:(i=e,!ArrayBuffer.isView(i)||i instanceof DataView?Array.isArray(e)?ai:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?ui:ke:ci))(t,e)}function di(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function fi(t){return+t}var vi=[0,1];function gi(t){return t}function pi(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function yi(t,e,n){var i=t[0],r=t[1],o=e[0],s=e[1];return r<i?(i=pi(r,i),o=n(s,o)):(i=pi(i,r),o=n(o,s)),function(t){return o(i(t))}}function xi(t,e,n){var i=Math.min(t.length,e.length)-1,r=new Array(i),o=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<i;)r[s]=pi(t[s],t[s+1]),o[s]=n(e[s],e[s+1]);return function(e){var n=si(t,e,1,i)-1;return o[n](r[n](e))}}function mi(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function _i(){return function(){var t,e,n,i,r,o,s=vi,a=vi,l=hi,u=gi;function c(){var t,e,n,l=Math.min(s.length,a.length);return u!==gi&&(t=s[0],e=s[l-1],t>e&&(n=t,t=e,e=n),u=function(n){return Math.max(t,Math.min(e,n))}),i=l>2?xi:yi,r=o=null,h}function h(e){return null==e||isNaN(e=+e)?n:(r||(r=i(s.map(t),a,l)))(t(u(e)))}return h.invert=function(n){return u(e((o||(o=i(a,s.map(t),ke)))(n)))},h.domain=function(t){return arguments.length?(s=Array.from(t,fi),c()):s.slice()},h.range=function(t){return arguments.length?(a=Array.from(t),c()):a.slice()},h.rangeRound=function(t){return a=Array.from(t),l=di,c()},h.clamp=function(t){return arguments.length?(u=!!t||gi,c()):u!==gi},h.interpolate=function(t){return arguments.length?(l=t,c()):l},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,i){return t=n,e=i,c()}}()(gi,gi)}var wi,bi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ai(t){if(!(e=bi.exec(t)))throw new Error("invalid format: "+t);var e;return new Si({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Si(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Mi(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]}function ki(t){return(t=Mi(Math.abs(t)))?t[1]:NaN}function Ci(t,e){var n=Mi(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")}Ai.prototype=Si.prototype,Si.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const Di={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Ci(100*t,e),r:Ci,s:function(t,e){var n=Mi(t,e);if(!n)return t+"";var i=n[0],r=n[1],o=r-(wi=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return o===s?i:o>s?i+new Array(o-s+1).join("0"):o>0?i.slice(0,o)+"."+i.slice(o):"0."+new Array(1-o).join("0")+Mi(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Ei(t){return t}var Ti,$i,Ni,Pi=Array.prototype.map,Li=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Ri(t){var e=t.domain;return t.ticks=function(t){var n=e();return Tt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return function(t,e,n,i){var r,o=Nt(t,e,n);switch((i=Ai(null==i?",f":i)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ki(e)/3)))-ki(Math.abs(t)))}(o,s))||(i.precision=r),Ni(i,s);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,ki(e)-ki(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(r=function(t){return Math.max(0,-ki(Math.abs(t)))}(o))||(i.precision=r-2*("%"===i.type))}return $i(i)}(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r,o=e(),s=0,a=o.length-1,l=o[s],u=o[a],c=10;for(u<l&&(r=l,l=u,u=r,r=s,s=a,a=r);c-- >0;){if((r=$t(l,u,n))===i)return o[s]=l,o[a]=u,e(o);if(r>0)l=Math.floor(l/r)*r,u=Math.ceil(u/r)*r;else{if(!(r<0))break;l=Math.ceil(l*r)/r,u=Math.floor(u*r)/r}i=r}return t},t}function Yi(){var t=_i();return t.copy=function(){return mi(t,Yi())},Qn.apply(t,arguments),Ri(t)}function Oi(t){return Math.sign(t)*t*t}function Ui(){var t,e=_i(),n=[0,1],i=!1;function r(n){var r=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(e(n));return isNaN(r)?t:i?Math.round(r):r}return r.invert=function(t){return e.invert(Oi(t))},r.domain=function(t){return arguments.length?(e.domain(t),r):e.domain()},r.range=function(t){return arguments.length?(e.range((n=Array.from(t,fi)).map(Oi)),r):n.slice()},r.rangeRound=function(t){return r.range(t).round(!0)},r.round=function(t){return arguments.length?(i=!!t,r):i},r.clamp=function(t){return arguments.length?(e.clamp(t),r):e.clamp()},r.unknown=function(e){return arguments.length?(t=e,r):t},r.copy=function(){return Ui(e.domain(),n).round(i).clamp(e.clamp()).unknown(t)},Qn.apply(r,arguments),Ri(r)}Ti=function(t){var e,n,i=void 0===t.grouping||void 0===t.thousands?Ei:(e=Pi.call(t.grouping,Number),n=t.thousands+"",function(t,i){for(var r=t.length,o=[],s=0,a=e[0],l=0;r>0&&a>0&&(l+a+1>i&&(a=Math.max(1,i-l)),o.push(t.substring(r-=a,r+a)),!((l+=a+1)>i));)a=e[s=(s+1)%e.length];return o.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Ei:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Pi.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=Ai(t)).fill,n=t.align,h=t.sign,d=t.symbol,f=t.zero,v=t.width,g=t.comma,p=t.precision,y=t.trim,x=t.type;"n"===x?(g=!0,x="g"):Di[x]||(void 0===p&&(p=12),y=!0,x="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var m="$"===d?r:"#"===d&&/[boxX]/.test(x)?"0"+x.toLowerCase():"",_="$"===d?o:/[%p]/.test(x)?l:"",w=Di[x],b=/[defgprs%]/.test(x);function A(t){var r,o,l,d=m,A=_;if("c"===x)A=w(t)+A,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:w(Math.abs(t),p),y&&(t=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(!+t[i])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),S&&0==+t&&"+"!==h&&(S=!1),d=(S?"("===h?h:u:"-"===h||"("===h?"":h)+d,A=("s"===x?Li[8+wi/3]:"")+A+(S&&"("===h?")":""),b)for(r=-1,o=t.length;++r<o;)if(48>(l=t.charCodeAt(r))||l>57){A=(46===l?s+t.slice(r+1):t.slice(r))+A,t=t.slice(0,r);break}}g&&!f&&(t=i(t,1/0));var M=d.length+t.length+A.length,k=M<v?new Array(v-M+1).join(e):"";switch(g&&f&&(t=i(k+t,k.length?v-A.length:1/0),k=""),n){case"<":t=d+t+A+k;break;case"=":t=d+k+t+A;break;case"^":t=k.slice(0,M=k.length>>1)+d+t+A+k.slice(M);break;default:t=k+d+t+A}return a(t)}return p=void 0===p?6:/[gprs]/.test(x)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),A.toString=function(){return t+""},A}return{format:h,formatPrefix:function(t,e){var n=h(((t=Ai(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(ki(e)/3))),r=Math.pow(10,-i),o=Li[8+i/3];return function(t){return n(r*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),$i=Ti.format,Ni=Ti.formatPrefix;const Fi=function(t){for(var e=new Array(10),n=0;n<10;)e[n]="#"+t.slice(6*n,6*++n);return e}("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");function ji(t){return function(){return t}}const Xi=Math.abs,Hi=Math.atan2,zi=Math.cos,Ii=Math.max,Wi=Math.min,qi=Math.sin,Bi=Math.sqrt,Vi=1e-12,Zi=Math.PI,Gi=Zi/2,Qi=2*Zi;function Ji(t){return t>=1?Gi:t<=-1?-Gi:Math.asin(t)}const Ki=Math.PI,tr=2*Ki,er=1e-6,nr=tr-er;function ir(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class rr{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?ir:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return ir;const n=10**e;return function(t){this._+=t[0];for(let e=1,i=t.length;e<i;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,i){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+i}`}bezierCurveTo(t,e,n,i,r,o){this._append`C${+t},${+e},${+n},${+i},${this._x1=+r},${this._y1=+o}`}arcTo(t,e,n,i,r){if(t=+t,e=+e,n=+n,i=+i,(r=+r)<0)throw new Error(`negative radius: ${r}`);let o=this._x1,s=this._y1,a=n-t,l=i-e,u=o-t,c=s-e,h=u*u+c*c;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(h>er)if(Math.abs(c*a-l*u)>er&&r){let d=n-o,f=i-s,v=a*a+l*l,g=d*d+f*f,p=Math.sqrt(v),y=Math.sqrt(h),x=r*Math.tan((Ki-Math.acos((v+h-g)/(2*p*y)))/2),m=x/y,_=x/p;Math.abs(m-1)>er&&this._append`L${t+m*u},${e+m*c}`,this._append`A${r},${r},0,0,${+(c*d>u*f)},${this._x1=t+_*a},${this._y1=e+_*l}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,i,r,o){if(t=+t,e=+e,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let s=n*Math.cos(i),a=n*Math.sin(i),l=t+s,u=e+a,c=1^o,h=o?i-r:r-i;null===this._x1?this._append`M${l},${u}`:(Math.abs(this._x1-l)>er||Math.abs(this._y1-u)>er)&&this._append`L${l},${u}`,n&&(h<0&&(h=h%tr+tr),h>nr?this._append`A${n},${n},0,1,${c},${t-s},${e-a}A${n},${n},0,1,${c},${this._x1=l},${this._y1=u}`:h>er&&this._append`A${n},${n},0,${+(h>=Ki)},${c},${this._x1=t+n*Math.cos(r)},${this._y1=e+n*Math.sin(r)}`)}rect(t,e,n,i){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+i}h${-n}Z`}toString(){return this._}}function or(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new rr(e)}function sr(t){return t.innerRadius}function ar(t){return t.outerRadius}function lr(t){return t.startAngle}function ur(t){return t.endAngle}function cr(t){return t&&t.padAngle}function hr(t,e,n,i,r,o,s){var a=t-n,l=e-i,u=(s?o:-o)/Bi(a*a+l*l),c=u*l,h=-u*a,d=t+c,f=e+h,v=n+c,g=i+h,p=(d+v)/2,y=(f+g)/2,x=v-d,m=g-f,_=x*x+m*m,w=r-o,b=d*g-v*f,A=(m<0?-1:1)*Bi(Ii(0,w*w*_-b*b)),S=(b*m-x*A)/_,M=(-b*x-m*A)/_,k=(b*m+x*A)/_,C=(-b*x+m*A)/_,D=S-p,E=M-y,T=k-p,$=C-y;return D*D+E*E>T*T+$*$&&(S=k,M=C),{cx:S,cy:M,x01:-c,y01:-h,x11:S*(r/w-1),y11:M*(r/w-1)}}function dr(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function fr(t,e){this._context=t,this._k=(1-e)/6}rr.prototype,fr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:dr(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:dr(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const vr=function t(e){function n(t){return new fr(t,e)}return n.tension=function(e){return t(+e)},n}(0);function gr(t,e){this._context=t,this._alpha=e}gr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:!function(t,e,n){var i=t._x1,r=t._y1,o=t._x2,s=t._y2;if(t._l01_a>Vi){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,l=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/l,r=(r*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/l}if(t._l23_a>Vi){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*u+t._x1*t._l23_2a-e*t._l12_2a)/c,s=(s*u+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(i,r,o,s,t._x2,t._y2)}(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};const pr=function t(e){function n(t){return e?new gr(t,e):new fr(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function yr(t){return t<0?-1:1}function xr(t,e,n){var i=t._x1-t._x0,r=e-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),s=(n-t._y1)/(r||i<0&&-0),a=(o*r+s*i)/(i+r);return(yr(o)+yr(s))*Math.min(Math.abs(o),Math.abs(s),.5*Math.abs(a))||0}function mr(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function _r(t,e,n){var i=t._x0,r=t._y0,o=t._x1,s=t._y1,a=(o-i)/3;t._context.bezierCurveTo(i+a,r+a*e,o-a,s-a*n,o,s)}function wr(t){this._context=t}function br(t){this._context=t}function Ar(t){return new wr(t)}function Sr(t){this._context=t}function Mr(t){var e,n,i=t.length-1,r=new Array(i),o=new Array(i),s=new Array(i);for(r[0]=0,o[0]=2,s[0]=t[0]+2*t[1],e=1;e<i-1;++e)r[e]=1,o[e]=4,s[e]=4*t[e]+2*t[e+1];for(r[i-1]=2,o[i-1]=7,s[i-1]=8*t[i-1]+t[i],e=1;e<i;++e)n=r[e]/o[e-1],o[e]-=n,s[e]-=n*s[e-1];for(r[i-1]=s[i-1]/o[i-1],e=i-2;e>=0;--e)r[e]=(s[e]-r[e+1])/o[e];for(o[i-1]=(t[i]+r[i-1])/2,e=0;e<i-1;++e)o[e]=2*t[e+1]-r[e+1];return[r,o]}function kr(t){return new Sr(t)}function Cr(t,e){this._context=t,this._t=e}function Dr(t){return new Cr(t,.5)}function Er(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Tr(t,e){if((r=t.length)>1)for(var n,i,r,o=1,s=t[e[0]],a=s.length;o<r;++o)for(i=s,s=t[e[o]],n=0;n<a;++n)s[n][1]+=s[n][0]=isNaN(i[n][1])?i[n][0]:i[n][1]}function $r(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n}function Nr(t,e){return t[e]}function Pr(t){const e=[];return e.key=t,e}function Lr(t,e,n){this.k=t,this.x=e,this.y=n}wr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:_r(this,this._t0,mr(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,_r(this,mr(this,n=xr(this,t,e)),n);break;default:_r(this,this._t0,n=xr(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new br(t)}.prototype=Object.create(wr.prototype)).point=function(t,e){wr.prototype.point.call(this,e,t)},br.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,i,r,o){this._context.bezierCurveTo(e,t,i,n,o,r)}},Sr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var i=Mr(t),r=Mr(e),o=0,s=1;s<n;++o,++s)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[s],e[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}},Cr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}},Array.prototype.slice,Lr.prototype={constructor:Lr,scale:function(t){return 1===t?this:new Lr(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Lr(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Lr(1,0,0),Lr.prototype;const Rr=1e3,Yr=6e4,Or=36e5,Ur=864e5,Fr=6048e5,jr=31536e6,Xr=new Date,Hr=new Date;function zr(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=e=>(t(e=new Date(+e)),e),r.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),r.round=t=>{const e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),r.range=(n,i,o)=>{const s=[];if(n=r.ceil(n),o=null==o?1:Math.floor(o),!(n<i&&o>0))return s;let a;do{s.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<i);return s},r.filter=n=>zr((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,i)=>{if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););})),n&&(r.count=(e,i)=>(Xr.setTime(+e),Hr.setTime(+i),t(Xr),t(Hr),Math.floor(n(Xr,Hr))),r.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?e=>i(e)%t==0:e=>r.count(0,e)%t==0):r:null)),r}const Ir=zr((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));Ir.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?zr((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):Ir:null),Ir.range;const Wr=zr((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*Rr)}),((t,e)=>(e-t)/Rr),(t=>t.getUTCSeconds())),qr=(Wr.range,zr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*Rr)}),((t,e)=>{t.setTime(+t+e*Yr)}),((t,e)=>(e-t)/Yr),(t=>t.getMinutes()))),Br=(qr.range,zr((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*Yr)}),((t,e)=>(e-t)/Yr),(t=>t.getUTCMinutes()))),Vr=(Br.range,zr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*Rr-t.getMinutes()*Yr)}),((t,e)=>{t.setTime(+t+e*Or)}),((t,e)=>(e-t)/Or),(t=>t.getHours()))),Zr=(Vr.range,zr((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*Or)}),((t,e)=>(e-t)/Or),(t=>t.getUTCHours()))),Gr=(Zr.range,zr((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Yr)/Ur),(t=>t.getDate()-1))),Qr=(Gr.range,zr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/Ur),(t=>t.getUTCDate()-1))),Jr=(Qr.range,zr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/Ur),(t=>Math.floor(t/Ur))));function Kr(t){return zr((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Yr)/Fr))}Jr.range;const to=Kr(0),eo=Kr(1),no=Kr(2),io=Kr(3),ro=Kr(4),oo=Kr(5),so=Kr(6);function ao(t){return zr((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/Fr))}to.range,eo.range,no.range,io.range,ro.range,oo.range,so.range;const lo=ao(0),uo=ao(1),co=ao(2),ho=ao(3),fo=ao(4),vo=ao(5),go=ao(6),po=(lo.range,uo.range,co.range,ho.range,fo.range,vo.range,go.range,zr((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth()))),yo=(po.range,zr((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth()))),xo=(yo.range,zr((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear())));xo.every=t=>isFinite(t=Math.floor(t))&&t>0?zr((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null,xo.range;const mo=zr((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));function _o(t,e,n,i,r,o){const s=[[Wr,1,Rr],[Wr,5,5e3],[Wr,15,15e3],[Wr,30,3e4],[o,1,Yr],[o,5,3e5],[o,15,9e5],[o,30,18e5],[r,1,Or],[r,3,108e5],[r,6,216e5],[r,12,432e5],[i,1,Ur],[i,2,1728e5],[n,1,Fr],[e,1,2592e6],[e,3,7776e6],[t,1,jr]];function a(e,n,i){const r=Math.abs(n-e)/i,o=bt((([,,t])=>t)).right(s,r);if(o===s.length)return t.every(Nt(e/jr,n/jr,i));if(0===o)return Ir.every(Math.max(Nt(e,n,i),1));const[a,l]=s[r/s[o-1][2]<s[o][2]/r?o-1:o];return a.every(l)}return[function(t,e,n){const i=e<t;i&&([t,e]=[e,t]);const r=n&&"function"==typeof n.range?n:a(t,e,n),o=r?r.range(t,+e+1):[];return i?o.reverse():o},a]}mo.every=t=>isFinite(t=Math.floor(t))&&t>0?zr((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null,mo.range;const[wo,bo]=_o(mo,yo,lo,Jr,Zr,Br),[Ao,So]=_o(xo,po,to,Gr,Vr,qr);function Mo(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ko(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Co(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Do,Eo,To={"-":"",_:" ",0:"0"},$o=/^\s*\d+/,No=/^%/,Po=/[\\^$*+?|[\]().{}]/g;function Lo(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<n?new Array(n-o+1).join(e)+r:r)}function Ro(t){return t.replace(Po,"\\$&")}function Yo(t){return new RegExp("^(?:"+t.map(Ro).join("|")+")","i")}function Oo(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Uo(t,e,n){var i=$o.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function Fo(t,e,n){var i=$o.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function jo(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function Xo(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function Ho(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function zo(t,e,n){var i=$o.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function Io(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function Wo(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function qo(t,e,n){var i=$o.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function Bo(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function Vo(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function Zo(t,e,n){var i=$o.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function Go(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function Qo(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function Jo(t,e,n){var i=$o.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function Ko(t,e,n){var i=$o.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function ts(t,e,n){var i=$o.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function es(t,e,n){var i=No.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function ns(t,e,n){var i=$o.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function is(t,e,n){var i=$o.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function rs(t,e){return Lo(t.getDate(),e,2)}function os(t,e){return Lo(t.getHours(),e,2)}function ss(t,e){return Lo(t.getHours()%12||12,e,2)}function as(t,e){return Lo(1+Gr.count(xo(t),t),e,3)}function ls(t,e){return Lo(t.getMilliseconds(),e,3)}function us(t,e){return ls(t,e)+"000"}function cs(t,e){return Lo(t.getMonth()+1,e,2)}function hs(t,e){return Lo(t.getMinutes(),e,2)}function ds(t,e){return Lo(t.getSeconds(),e,2)}function fs(t){var e=t.getDay();return 0===e?7:e}function vs(t,e){return Lo(to.count(xo(t)-1,t),e,2)}function gs(t){var e=t.getDay();return e>=4||0===e?ro(t):ro.ceil(t)}function ps(t,e){return t=gs(t),Lo(ro.count(xo(t),t)+(4===xo(t).getDay()),e,2)}function ys(t){return t.getDay()}function xs(t,e){return Lo(eo.count(xo(t)-1,t),e,2)}function ms(t,e){return Lo(t.getFullYear()%100,e,2)}function _s(t,e){return Lo((t=gs(t)).getFullYear()%100,e,2)}function ws(t,e){return Lo(t.getFullYear()%1e4,e,4)}function bs(t,e){var n=t.getDay();return Lo((t=n>=4||0===n?ro(t):ro.ceil(t)).getFullYear()%1e4,e,4)}function As(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Lo(e/60|0,"0",2)+Lo(e%60,"0",2)}function Ss(t,e){return Lo(t.getUTCDate(),e,2)}function Ms(t,e){return Lo(t.getUTCHours(),e,2)}function ks(t,e){return Lo(t.getUTCHours()%12||12,e,2)}function Cs(t,e){return Lo(1+Qr.count(mo(t),t),e,3)}function Ds(t,e){return Lo(t.getUTCMilliseconds(),e,3)}function Es(t,e){return Ds(t,e)+"000"}function Ts(t,e){return Lo(t.getUTCMonth()+1,e,2)}function $s(t,e){return Lo(t.getUTCMinutes(),e,2)}function Ns(t,e){return Lo(t.getUTCSeconds(),e,2)}function Ps(t){var e=t.getUTCDay();return 0===e?7:e}function Ls(t,e){return Lo(lo.count(mo(t)-1,t),e,2)}function Rs(t){var e=t.getUTCDay();return e>=4||0===e?fo(t):fo.ceil(t)}function Ys(t,e){return t=Rs(t),Lo(fo.count(mo(t),t)+(4===mo(t).getUTCDay()),e,2)}function Os(t){return t.getUTCDay()}function Us(t,e){return Lo(uo.count(mo(t)-1,t),e,2)}function Fs(t,e){return Lo(t.getUTCFullYear()%100,e,2)}function js(t,e){return Lo((t=Rs(t)).getUTCFullYear()%100,e,2)}function Xs(t,e){return Lo(t.getUTCFullYear()%1e4,e,4)}function Hs(t,e){var n=t.getUTCDay();return Lo((t=n>=4||0===n?fo(t):fo.ceil(t)).getUTCFullYear()%1e4,e,4)}function zs(){return"+0000"}function Is(){return"%"}function Ws(t){return+t}function qs(t){return Math.floor(+t/1e3)}function Bs(t){return new Date(t)}function Vs(t){return t instanceof Date?+t:+new Date(+t)}function Zs(t,e,n,i,r,o,s,a,l,u){var c=_i(),h=c.invert,d=c.domain,f=u(".%L"),v=u(":%S"),g=u("%I:%M"),p=u("%I %p"),y=u("%a %d"),x=u("%b %d"),m=u("%B"),_=u("%Y");function w(t){return(l(t)<t?f:a(t)<t?v:s(t)<t?g:o(t)<t?p:i(t)<t?r(t)<t?y:x:n(t)<t?m:_)(t)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?d(Array.from(t,Vs)):d().map(Bs)},c.ticks=function(e){var n=d();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?w:u(e)},c.nice=function(t){var n=d();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?d(function(t,e){var n,i=0,r=(t=t.slice()).length-1,o=t[i],s=t[r];return s<o&&(n=i,i=r,r=n,n=o,o=s,s=n),t[i]=e.floor(o),t[r]=e.ceil(s),t}(n,t)):c},c.copy=function(){return mi(c,Zs(t,e,n,i,r,o,s,a,l,u))},c}function Gs(t){this._context=t}function Qs(t){return new Gs(t)}function Js(t){return t[0]}function Ks(t){return t[1]}function ta(t,e){var n=ji(!0),i=null,r=Qs,o=null,s=or(a);function a(a){var l,u,c,h=(a=Er(a)).length,d=!1;for(null==i&&(o=r(c=s())),l=0;l<=h;++l)!(l<h&&n(u=a[l],l,a))===d&&((d=!d)?o.lineStart():o.lineEnd()),d&&o.point(+t(u,l,a),+e(u,l,a));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?Js:ji(t),e="function"==typeof e?e:void 0===e?Ks:ji(e),a.x=function(e){return arguments.length?(t="function"==typeof e?e:ji(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:ji(!!t),a):n},a.curve=function(t){return arguments.length?(r=t,null!=i&&(o=r(i)),a):r},a.context=function(t){return arguments.length?(null==t?i=o=null:o=r(i=t),a):i},a}function ea(t,e,n){var i=null,r=ji(!0),o=null,s=Qs,a=null,l=or(u);function u(u){var c,h,d,f,v,g=(u=Er(u)).length,p=!1,y=new Array(g),x=new Array(g);for(null==o&&(a=s(v=l())),c=0;c<=g;++c){if(!(c<g&&r(f=u[c],c,u))===p)if(p=!p)h=c,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),d=c-1;d>=h;--d)a.point(y[d],x[d]);a.lineEnd(),a.areaEnd()}p&&(y[c]=+t(f,c,u),x[c]=+e(f,c,u),a.point(i?+i(f,c,u):y[c],n?+n(f,c,u):x[c]))}if(v)return a=null,v+""||null}function c(){return ta().defined(r).curve(s).context(o)}return t="function"==typeof t?t:void 0===t?Js:ji(+t),e="function"==typeof e?e:ji(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?Ks:ji(+n),u.x=function(e){return arguments.length?(t="function"==typeof e?e:ji(+e),i=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:ji(+e),u):t},u.x1=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:ji(+t),u):i},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),n=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),u):e},u.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ji(+t),u):n},u.lineX0=u.lineY0=function(){return c().x(t).y(e)},u.lineY1=function(){return c().x(t).y(n)},u.lineX1=function(){return c().x(i).y(e)},u.defined=function(t){return arguments.length?(r="function"==typeof t?t:ji(!!t),u):r},u.curve=function(t){return arguments.length?(s=t,null!=o&&(a=s(o)),u):s},u.context=function(t){return arguments.length?(null==t?o=a=null:a=s(o=t),u):o},u}Do=function(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,o=t.days,s=t.shortDays,a=t.months,l=t.shortMonths,u=Yo(r),c=Oo(r),h=Yo(o),d=Oo(o),f=Yo(s),v=Oo(s),g=Yo(a),p=Oo(a),y=Yo(l),x=Oo(l),m={a:function(t){return s[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:rs,e:rs,f:us,g:_s,G:bs,H:os,I:ss,j:as,L:ls,m:cs,M:hs,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ws,s:qs,S:ds,u:fs,U:vs,V:ps,w:ys,W:xs,x:null,X:null,y:ms,Y:ws,Z:As,"%":Is},_={a:function(t){return s[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return l[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Ss,e:Ss,f:Es,g:js,G:Hs,H:Ms,I:ks,j:Cs,L:Ds,m:Ts,M:$s,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ws,s:qs,S:Ns,u:Ps,U:Ls,V:Ys,w:Os,W:Us,x:null,X:null,y:Fs,Y:Xs,Z:zs,"%":Is},w={a:function(t,e,n){var i=f.exec(e.slice(n));return i?(t.w=v.get(i[0].toLowerCase()),n+i[0].length):-1},A:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=d.get(i[0].toLowerCase()),n+i[0].length):-1},b:function(t,e,n){var i=y.exec(e.slice(n));return i?(t.m=x.get(i[0].toLowerCase()),n+i[0].length):-1},B:function(t,e,n){var i=g.exec(e.slice(n));return i?(t.m=p.get(i[0].toLowerCase()),n+i[0].length):-1},c:function(t,n,i){return S(t,e,n,i)},d:Vo,e:Vo,f:ts,g:Io,G:zo,H:Go,I:Go,j:Zo,L:Ko,m:Bo,M:Qo,p:function(t,e,n){var i=u.exec(e.slice(n));return i?(t.p=c.get(i[0].toLowerCase()),n+i[0].length):-1},q:qo,Q:ns,s:is,S:Jo,u:Fo,U:jo,V:Xo,w:Uo,W:Ho,x:function(t,e,i){return S(t,n,e,i)},X:function(t,e,n){return S(t,i,e,n)},y:Io,Y:zo,Z:Wo,"%":es};function b(t,e){return function(n){var i,r,o,s=[],a=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++a<u;)37===t.charCodeAt(a)&&(s.push(t.slice(l,a)),null!=(r=To[i=t.charAt(++a)])?i=t.charAt(++a):r="e"===i?" ":"0",(o=e[i])&&(i=o(n,r)),s.push(i),l=a+1);return s.push(t.slice(l,a)),s.join("")}}function A(t,e){return function(n){var i,r,o=Co(1900,void 0,1);if(S(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=ko(Co(o.y,0,1))).getUTCDay(),i=r>4||0===r?uo.ceil(i):uo(i),i=Qr.offset(i,7*(o.V-1)),o.y=i.getUTCFullYear(),o.m=i.getUTCMonth(),o.d=i.getUTCDate()+(o.w+6)%7):(r=(i=Mo(Co(o.y,0,1))).getDay(),i=r>4||0===r?eo.ceil(i):eo(i),i=Gr.offset(i,7*(o.V-1)),o.y=i.getFullYear(),o.m=i.getMonth(),o.d=i.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),r="Z"in o?ko(Co(o.y,0,1)).getUTCDay():Mo(Co(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(r+5)%7:o.w+7*o.U-(r+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,ko(o)):Mo(o)}}function S(t,e,n,i){for(var r,o,s=0,a=e.length,l=n.length;s<a;){if(i>=l)return-1;if(37===(r=e.charCodeAt(s++))){if(r=e.charAt(s++),!(o=w[r in To?e.charAt(s++):r])||(i=o(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return m.x=b(n,m),m.X=b(i,m),m.c=b(e,m),_.x=b(n,_),_.X=b(i,_),_.c=b(e,_),{format:function(t){var e=b(t+="",m);return e.toString=function(){return t},e},parse:function(t){var e=A(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=A(t+="",!0);return e.toString=function(){return t},e}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),Do.format,Do.parse,Eo=Do.utcFormat,Do.utcParse,Gs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var na,ia,ra=sa(Qs);function oa(t){this._curve=t}function sa(t){function e(e){return new oa(t(e))}return e._curve=t,e}function aa(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(sa(t)):e()._curve},t}function la(){return aa(ta().curve(ra))}function ua(){}function ca(t){this._context=t}function ha(t){return new ca(t)}function da(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){t.done?r(t.value):function(t){return t instanceof n?t:new n((function(e){e(t)}))}(t.value).then(s,a)}l((i=i.apply(t,e||[])).next())}))}oa.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}},ca.prototype={areaStart:ua,areaEnd:ua,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},"function"==typeof SuppressedError&&SuppressedError,function(t){t.x="x",t.y="y",t.z="z",t.color="color"}(na||(na={})),function(t){t.line="line",t.area="area",t.scatter="scatter",t.box="box",t.bar="bar",t.time_series_bar="time_series_bar",t.stacked="stacked",t.anomaly="anomaly",t.curtain="curtain",t.curtain_anomaly="curtain_anomaly",t.seasonal="seasonal",t.radial="radial",t.pie="pie",t.windrose="windrose"}(ia||(ia={}));class fa extends i.ZC{constructor(t){super(t),this.scrubSettingsDefaults={enabled:!0,axis:na.x},this.legendSettingsDefaults={hide:!1,axis:na.y},this.id=t.id,this.type=t.type,this.chart=t.chart,this.dimensions=t.dimensions,this.style=t.style,this.scrubbing=t.scrubbing,this.onDataLoad=t.onDataLoad,this.axisSettings=t.axisSettings,this.scrubSettings=Object.assign(Object.assign({},this.scrubSettingsDefaults),t.scrubSettings),this.interpolate=t.interpolate,this.legendSettings=Object.assign(Object.assign({},this.legendSettingsDefaults),t.legendSettings),this.runtime={}}createAccessorGroupingsAtAxis(t,e){const n=this.getAxisSetting(e),i=void 0!==n.accessProperties?n.accessProperties:{},r=Object.keys(t).filter((t=>t.startsWith(e))),o=Object.fromEntries(r.map((e=>[e,t[e]])));return Object.keys(i).forEach((e=>{const n=i[e],r=t[n];void 0!==r&&(o[e]=r)})),o}getAxisSetting(t){if(void 0===this.axisSettings)return{};const e=this.axisSettings[t];return void 0===e?{}:e}getDomainAccessorAtAxis(t){var e,n,i,r,o,s;const a=void 0!==(null===(i=null===(n=null===(e=this.runtime)||void 0===e?void 0:e.data)||void 0===n?void 0:n.parsed)||void 0===i?void 0:i.domainAccessors)?this.runtime.data.parsed.domainAccessors:{},l=void 0!==(null===(s=null===(o=null===(r=this.runtime)||void 0===r?void 0:r.data)||void 0===o?void 0:o.parsed)||void 0===s?void 0:s.accessors)?this.runtime.data.parsed.accessors:{};return void 0!==a[t]?a[t]:void 0!==l[t]?l[t]:e=>"number"==typeof e||e instanceof Date||"string"==typeof e?e:e[t]}getAvailableDomainAccessors(){var t,e,n,i,r,o,s,a,l;return void 0!==(null===(n=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===n?void 0:n.domainAccessors)?this.runtime.data.parsed.domainAccessors:void 0!==(null===(o=null===(r=null===(i=this.runtime)||void 0===i?void 0:i.data)||void 0===r?void 0:r.parsed)||void 0===o?void 0:o.accessors)?null===(l=null===(a=null===(s=this.runtime)||void 0===s?void 0:s.data)||void 0===a?void 0:a.parsed)||void 0===l?void 0:l.accessors:{}}getDomainAccessorsAtAxis(t){const e=this.getAvailableDomainAccessors();return this.createAccessorGroupingsAtAxis(e,t)}getAvailableAccessors(){var t,e,n;return void 0!==(null===(n=null===(e=null===(t=this.runtime)||void 0===t?void 0:t.data)||void 0===e?void 0:e.parsed)||void 0===n?void 0:n.accessors)?this.runtime.data.parsed.accessors:{}}getAccessorsAtAxis(t){const e=this.getAvailableAccessors();return this.createAccessorGroupingsAtAxis(e,t)}getAccessorAtAxis(t){const e=this.getAccessorsAtAxis(t)[t];if(void 0!==e)return e;const n=this.getAvailableAccessors();return void 0!==n[t]?n[t]:void 0}getDomain(t){var e;return da(this,void 0,void 0,(function*(){const n=yield this.getData(),i=void 0!==(null===(e=null==n?void 0:n.parsed)||void 0===e?void 0:e.data)?n.parsed.data:[],o=this.getDomainAccessorAtAxis(t),s=i.map((t=>o(t))).flat().filter((t=>null!=t));return(0,r.A)(s)}))}getXDomain(){return da(this,void 0,void 0,(function*(){return yield this.getDomain("x")}))}getYDomain(){return da(this,void 0,void 0,(function*(){return yield this.getDomain("y")}))}draw(){return da(this,void 0,void 0,(function*(){this.data=yield this.getData()}))}onLegendReady(t){this.chart.emitPlotLegendReady(this.id,t)}onScrub(t){this.chart.emitPlotScrub(this.id,t)}onScrubEnd(){this.chart.emitPlotScrubEnd(this.id)}destroy(){}}class va{constructor(t){this.plots=t.plots.map((t=>Object.assign({},t))),this.settings=t.settings,this.element=t.element,this.onChartDrew=t.onChartDrew,this.onPlotDataLoad=t.onPlotDataLoad,this.onPlotLegendReady=t.onPlotLegendReady,this.onPlotScrub=t.onPlotScrub,this.onPlotScrubEnd=t.onPlotScrubEnd,this.runtime={prevWidth:0,prevHeight:0}}emitPlotLegendReady(t,e){void 0!==this.onPlotLegendReady&&this.onPlotLegendReady(t,e)}emitPlotScrub(t,e){void 0!==this.onPlotScrub&&this.onPlotScrub(t,e)}emitPlotScrubEnd(t){void 0!==this.onPlotScrubEnd&&this.onPlotScrubEnd(t)}onError(t){}onResize(t,e){console.log("RESIZE!"),console.log(this)}getWidth(){return"auto"===this.settings.width?null!=this.element?this.element.clientWidth:400:this.settings.width}onDraw(){}getDomainForPlotImplementations(t,e){var n,i;return da(this,void 0,void 0,(function*(){const o=null===(i=null===(n=this.settings)||void 0===n?void 0:n.axes)||void 0===i?void 0:i[String(e)];if(void 0!==(null==o?void 0:o.domain))return o.domain;const s=yield Promise.all(t.map((t=>da(this,void 0,void 0,(function*(){return yield t.getDomain(e)})))));return(0,r.A)(s.flat())}))}reversePlotAxis(t,e){return!0===t.getAxisSetting(e).reverse}getDimensionAxisParam(t,e){const n=t.dimensions[e],i=t.getAxisSetting(e);let r=e;return void 0!==i.parameter?r=i.parameter:void 0!==n&&(void 0!==n.parameter?r=n.parameter:void 0!==n.property?r=n.property:void 0!==n.properties&&(r=n.properties.join(","))),r}getPlotImplementationGroups(t,e){const n=(0,s.groupBy)(t,(t=>`${this.getDimensionAxisParam(t,e)}${this.reversePlotAxis(t,e)?".reverse":""}`)),i={};return Object.keys(n).forEach((t=>{const r={plots:n[t],reverse:this.reversePlotAxis(n[t][0],e),parameter:this.getDimensionAxisParam(n[t][0],e)};i[t]=r})),i}getXRange(t){return[0,t]}getYRange(t){return[t,0]}getChartWidth(){const t=this.getYAxesWidth();return this.getWidth()-t-this.settings.margin.right}getXAxesGroups(){return void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"x"):{}}getChartHeight(){const t=this.getXAxesGroups(),e=Object.keys(t).length;return this.settings.height-this.settings.margin.top-this.settings.margin.bottom*e}getYAxesWidth(){const t=void 0!==this.plotImplementations?this.getPlotImplementationGroups(this.plotImplementations,"y"):{};return this.settings.margin.left*Object.keys(t).length}debouncedResize(){var t;void 0!==(null===(t=this.runtime.resizeEventHandler)||void 0===t?void 0:t.cancel)&&(this.runtime.resizeEventHandler.cancel(),console.log("cancel")),this.runtime.resizeEventHandler=(0,s.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),this.runtime.resizeEventHandler()}init(t=!1){var e;return da(this,void 0,void 0,(function*(){this.runtime.resizeEventHandler=(0,s.debounce)((()=>{this.onResize(this.runtime.prevWidth,this.runtime.prevHeight)}),1e3),window.addEventListener("resize",(()=>{this.debouncedResize()})),null===(e=this.plotImplementations)||void 0===e||e.forEach((t=>{t.destroy()})),this.plotImplementations=this.createPlots();const{margin:n}=this.settings,i=this.getXAxesGroups(),r=this.getChartHeight(),o=this.getPlotImplementationGroups(this.plotImplementations,"y"),a=[],l=this.getYRange(r);yield Promise.all(Object.keys(o).map(((t,e)=>da(this,void 0,void 0,(function*(){const i=o[t],r=i.plots,s={scale:{domain:yield this.getDomainForPlotImplementations(o[t].plots,na.y),range:i.reverse?l.slice().reverse():l},plots:r,key:t,offset:{x:n.left+n.left*e,y:n.top}};r.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.y=s})),a.push(s)}))))),this.showYAxes(a);const u=this.getYAxesWidth(),c=this.getChartWidth(),h=this.getXRange(c),d=[];yield Promise.all(Object.keys(i).map(((t,e)=>da(this,void 0,void 0,(function*(){const o=i[t],s=o.plots,a={scale:{domain:yield this.getDomainForPlotImplementations(s,na.x),range:o.reverse?h.slice().reverse():h},plots:s,key:t,offset:{x:u,y:n.top+r+n.bottom*e}};s.forEach((t=>{t.axes=void 0!==t.axes?t.axes:{},t.axes.x=a})),d.push(a)}))))),this.showXAxes(d),t&&(yield this.draw())}))}showAxes(t,e){}showYAxes(t){}showXAxes(t){}adjustYAxis(){}draw(){return da(this,void 0,void 0,(function*(){const t=this.plotImplementations;void 0!==t&&(yield Promise.all(t.map((t=>da(this,void 0,void 0,(function*(){yield t.draw()}))))),void 0!==this.onChartDrew&&this.onChartDrew())}))}destroy(){}createPlots(){return this.plots.map((t=>this.createPlot(t)))}getPlotImplementationProps(t){return Object.assign(Object.assign({},t),{chart:this,onDataLoad:this.onPlotDataLoad})}createPlot(t){return new fa(this.getPlotImplementationProps(t))}}class ga extends fa{}class pa extends ga{constructor(){super(...arguments),this.onMouseScrub=t=>{const e=this.chart;if(void 0===e.onPlotScrub)return;const n=this.getAccessorAtAxis("x"),i=this.getAccessorAtAxis("y");if(void 0===this.scrubSettings.axis||void 0===this.xScale||void 0===this.yScale||void 0===n||void 0===i||void 0===this.parsedData||void 0===this.offset)return;const r=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,n,i,this.parsedData,this.offset);void 0!==r&&void 0!==r.x&&(this.onScrub(r),e.drawPlotScrubbing(this.id,r,this.style,this.scrubSettings))},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,v;return da(this,void 0,void 0,(function*(){const g=void 0!==this.style?this.style:{};if(void 0===this.parsedData){const t=yield this.getData();this.emitDataLoad(t),this.parsedData=null===(e=null==t?void 0:t.parsed)||void 0===e?void 0:e.data}const p=this.getAccessorAtAxis("x"),y=this.getAccessorAtAxis("y"),x=this.chart,m=x.getCanvasContext();if(null===m)return;const _=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,w=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===_||void 0===w||void 0===this.parsedData||void 0===p||void 0===y)return;this.offset={x:void 0!==(null===(l=null===(a=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.x)||void 0===a?void 0:a.offset)||void 0===l?void 0:l.x)?this.axes.x.offset.x:0,y:void 0!==(null===(h=null===(c=null===(u=null==this?void 0:this.axes)||void 0===u?void 0:u.y)||void 0===c?void 0:c.offset)||void 0===h?void 0:h.y)?this.axes.y.offset.y:0},this.xScale=x.getD3XScale(_),this.yScale=x.getD3YScale(w),m.strokeStyle=this.getStrokeStyle(),m.lineWidth=this.getLineWidth(),m.setLineDash([]),m.lineCap="square";const b=ta().x((t=>{if(void 0===this.xScale||void 0===this.offset)return 0;const e=p(t),n=this.xScale(e);return void 0===n?0:n+this.offset.x})).y((t=>{if(void 0===this.yScale||void 0===this.offset)return 0;const e=y(t),n=this.yScale(e);return void 0===n?0:n})).defined((t=>{const e=y(t);return!(null==e||isNaN(+e))}));if("step"===this.interpolate?b.curve(Dr):"cardinal"===this.interpolate?b.curve(vr):"catmullRom"===this.interpolate?b.curve(pr):"monotone"===this.interpolate?b.curve(Ar):"natural"===this.interpolate&&b.curve(kr),b.context(m),m.beginPath(),void 0!==(null==g?void 0:g.strokeDash)&&m.setLineDash(g.strokeDash),b(this.parsedData),m.stroke(),void 0!==this.legendSettings.axis&&void 0!==this.axes&&(null===(d=this.legendSettings.hide)||void 0===d||!d)){const e=this.axes[this.legendSettings.axis];void 0!==e&&t.onLegendReady.call(this,[{id:e.key,label:null!==(v=null!==(f=x.getAxisLabel(e,this.legendSettings.axis))&&void 0!==f?f:e.label)&&void 0!==v?v:e.key,style:{backgroundColor:m.strokeStyle}}])}this.setupScrubbing()}))}setupScrubbing(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.addEventListener("mouseleave",this.onScrubEnd))}getStrokeStyle(){const t=void 0!==this.style?this.style:{};return void 0!==t.strokeColor?t.strokeColor:"#333"}getLineWidth(){const t=void 0!==this.style?this.style:{};return void 0!==t.strokeWidth?t.strokeWidth:1}emitDataLoad(t){void 0!==this.onDataLoad&&this.onDataLoad({plotId:this.id,data:t})}destroy(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.removeEventListener("mouseleave",this.onScrubEnd))}}class ya extends ga{getMaxAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}1`]}getMinAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}0`]}getDomainAccessor(t){const e=this.getMinAccessorAtAxis(t),n=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==n)return t=>[e(t),n(t)];const i=this.getAccessorAtAxis(t);return void 0!==i?i:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:o(Object.values(t))}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,v;return da(this,void 0,void 0,(function*(){const g=void 0!==this.style?this.style:{},p=yield this.getData(),y=null===(e=null==p?void 0:p.parsed)||void 0===e?void 0:e.data,x=this.getAccessorsAtAxis("x"),m=this.getAccessorAtAxis("x"),_=x.x0,w=x.x1,b=this.getAccessorsAtAxis("y"),A=this.getAccessorAtAxis("y"),S=b.y0,M=b.y1,k={x:void 0!==(null===(r=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.offset)||void 0===r?void 0:r.x)?this.axes.x.offset.x:0,y:void 0!==(null===(a=null===(s=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===s?void 0:s.offset)||void 0===a?void 0:a.y)?this.axes.y.offset.y:0},C=this.chart,D=C.getCanvasContext();if(null===D)return;const E=null===(u=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.x)||void 0===u?void 0:u.scale,T=null===(h=null===(c=null==this?void 0:this.axes)||void 0===c?void 0:c.y)||void 0===h?void 0:h.scale;if(void 0===E||void 0===T||void 0===y||void 0===m&&void 0===_&&void 0===w||void 0===A&&void 0===S&&void 0===M)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const $=C.getD3XScale(E),N=C.getD3YScale(T),P=(t,e,n)=>i=>{const r=t(i),o=e(r);return void 0===o?0:o+n};D.fillStyle=void 0!==g.fill?g.fill:"#EDEDED";const L=ea();var R;void 0!==_&&void 0!==w?(L.x0(P(_,$,k.x)),L.x1(P(w,$,k.x))):void 0!==m&&L.x(P(m,$,k.x)),void 0!==S&&void 0!==M?(L.y0(P(S,N,.01)),L.y1(P(M,N,.01)),L.defined((R=M,t=>{const e=R(t);return!(null==e||isNaN(+e))}))):void 0!==A&&L.y(P(A,N,.01)),"step"===this.interpolate?L.curve(Dr):"cardinal"===this.interpolate?L.curve(vr):"catmullRom"===this.interpolate?L.curve(pr):"monotone"===this.interpolate?L.curve(Ar):"natural"===this.interpolate&&L.curve(kr),L.context(D),D.beginPath(),L(y),D.fill(),void 0===(null===(d=this.axes)||void 0===d?void 0:d.y)||null!==(f=this.legendSettings.hide)&&void 0!==f&&f||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(v=C.getAxisLabel(this.axes.y,"y"))&&void 0!==v?v:this.axes.y.key,style:{backgroundColor:D.fillStyle}}])}))}}const xa={Line:pa,Area:ya,Scatter:class extends ga{constructor(){super(...arguments),this.circleClass=`${this.id}-scrub-circle`,this.onMouseScrub=t=>{const e=this.chart;if(void 0===e.onPlotScrub)return;const n=this.getAccessorAtAxis("x"),i=this.getAccessorAtAxis("y");if(void 0===this.scrubSettings.axis||void 0===this.xScale||void 0===this.yScale||void 0===n||void 0===i||void 0===this.parsedData||void 0===this.offset)return;const r=e.getScrubEvent(t,this.scrubSettings.axis,this.xScale,this.yScale,n,i,this.parsedData,this.offset);void 0!==r&&void 0!==r.x&&(this.onScrub(r),e.drawPlotScrubbing(this.id,r,this.style,this.scrubSettings))},this.onScrubEnd=()=>{this.chart.erasePlotScrub(this.id),super.onScrubEnd()}}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,v;return da(this,void 0,void 0,(function*(){const g=void 0!==this.style?this.style:{},p=yield this.getData();this.parsedData=null===(e=null==p?void 0:p.parsed)||void 0===e?void 0:e.data;const y=this.getAccessorAtAxis("x"),x=this.getAccessorAtAxis("y"),m=this.chart,_=m.getCanvasContext();if(null===_)return;const w=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,b=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===w||void 0===b||void 0===this.parsedData||void 0===y||void 0===x)return;this.offset={x:void 0!==(null===(l=null===(a=null===(s=null==this?void 0:this.axes)||void 0===s?void 0:s.x)||void 0===a?void 0:a.offset)||void 0===l?void 0:l.x)?this.axes.x.offset.x:0,y:void 0!==(null===(h=null===(c=null===(u=null==this?void 0:this.axes)||void 0===u?void 0:u.y)||void 0===c?void 0:c.offset)||void 0===h?void 0:h.y)?this.axes.y.offset.y:0},this.xScale=m.getD3XScale(w);const A=t=>{if(void 0===this.xScale||void 0===this.offset)return 0;const e=y(t),n=this.xScale(e);return void 0===n?0:n+this.offset.x};this.yScale=m.getD3YScale(b);const S=t=>{if(void 0===this.yScale||void 0===this.offset)return 0;const e=x(t),n=this.yScale(e);return void 0===n?0:n};_.strokeStyle=void 0!==g.strokeColor?g.strokeColor:"#FFF";const M=void 0!==g.radius?g.radius:2;_.lineWidth=void 0!==g.strokeWidth||void 0!==g.strokeColor?(void 0!==g.strokeWidth?g.strokeWidth:1)+M:0,_.fillStyle=void 0!==g.fill?g.fill:"#666",this.parsedData.forEach((t=>{(t=>{const e=x(t);return!(null==e||isNaN(+e))})(t)&&(_.beginPath(),_.arc(A(t),S(t),M,0,2*Math.PI),_.stroke(),_.fill())})),void 0===(null===(d=this.axes)||void 0===d?void 0:d.y)||null!==(f=this.legendSettings.hide)&&void 0!==f&&f||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(v=m.getAxisLabel(this.axes.y,"y"))&&void 0!==v?v:this.axes.y.key,style:{backgroundColor:_.fillStyle,border:`1px solid ${_.strokeStyle}`}}]),this.setupScrubbing()}))}setupScrubbing(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.addEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.addEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.addEventListener("mouseleave",this.onScrubEnd))}destroy(){var t,e,n;const i=this.chart.getChartElements();void 0!==i&&(null===(t=i.svg.node())||void 0===t||t.removeEventListener("mouseover",this.onMouseScrub),null===(e=i.svg.node())||void 0===e||e.removeEventListener("mousemove",this.onMouseScrub),null===(n=i.svg.node())||void 0===n||n.removeEventListener("mouseleave",this.onScrubEnd))}},Bar:class extends ga{getMaxAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}1`]}getMinAccessorAtAxis(t){return this.getDomainAccessorsAtAxis(t)[`${t}0`]}getDomainAccessor(t){const e=this.getMinAccessorAtAxis(t),n=this.getMaxAccessorAtAxis(t);if(void 0!==e&&void 0!==n)return t=>[e(t),n(t)];const i=this.getAccessorAtAxis(t);return void 0!==i?i:t=>t instanceof Date||null===t||"number"==typeof t||"string"==typeof t?t:o(Object.values(t))}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l,u,c,h,d,f,v;return da(this,void 0,void 0,(function*(){const g=void 0!==this.style?this.style:{},p=yield this.getData(),y=null===(e=null==p?void 0:p.parsed)||void 0===e?void 0:e.data,x=this.getAccessorsAtAxis("x"),m=this.getAccessorAtAxis("x"),_=x.x0,w=x.x1,b=this.getAccessorsAtAxis("y"),A=this.getAccessorAtAxis("y"),S=b.y0,M=b.y1,k={x:void 0!==(null===(r=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.offset)||void 0===r?void 0:r.x)?this.axes.x.offset.x:0,y:void 0!==(null===(a=null===(s=null===(o=null==this?void 0:this.axes)||void 0===o?void 0:o.y)||void 0===s?void 0:s.offset)||void 0===a?void 0:a.y)?this.axes.y.offset.y:0},C=this.chart,D=C.getCanvasContext();if(null===D)return;const E=null===(u=null===(l=null==this?void 0:this.axes)||void 0===l?void 0:l.x)||void 0===u?void 0:u.scale,T=null===(h=null===(c=null==this?void 0:this.axes)||void 0===c?void 0:c.y)||void 0===h?void 0:h.scale;if(void 0===E||void 0===T||void 0===y||void 0===m&&void 0===_&&void 0===w||void 0===A&&void 0===S&&void 0===M)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const $=C.getD3XScale(E),N=C.getD3YScale(T),P=(t,e,n)=>i=>{const r=t(i),o=e(r);return void 0===o?0:o+n};D.fillStyle=void 0!==g.fill?g.fill:"#EDEDED";const L={};void 0!==_&&void 0!==w?(L.x0=P(_,$,k.x),L.x1=P(w,$,k.x)):void 0!==m&&(L.x=P(m,$,k.x)),void 0!==S&&void 0!==M?(L.y0=P(S,N,.01),L.y1=P(M,N,.01)):void 0!==A&&(L.y=P(A,N,.01)),D.beginPath();const R=!(void 0===L.x0||void 0===L.x1),Y=Math.abs(T.range[1]-T.range[0]),O=Math.abs(E.range[1]-E.range[0]),U=y.filter((t=>R?+L.y(t)>=T.range[0]&&+L.y(t)<=T.range[1]:+L.x(t)>=E.range[0]+k.x&&+L.x(t)<=E.range[1]+k.x)),F=Math.round(((R?Y:O)-U.length)/U.length),j=Math.max(1,F-.2*F);U.forEach(((t,e)=>{if(R){const e=L.x0(t);if(null!=e){const n=Math.abs(L.x1(t)-e),i=L.y(t),r=j;D.rect(e,i,n,r)}}else{const e=L.y0(t),n=L.y1(t);if(null!=e&&null!=n){const i=L.x(t)-j/2;D.fillRect(i,e,j,n-e)}}})),D.fill(),void 0===(null===(d=this.axes)||void 0===d?void 0:d.y)||null!==(f=this.legendSettings.hide)&&void 0!==f&&f||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(v=C.getAxisLabel(this.axes.y,"y"))&&void 0!==v?v:this.axes.y.key,style:{backgroundColor:D.fillStyle}}])}))}},CategoricalBar:class extends ga{constructor(t){super(t),this.legendHeight=12,this.legendPaddingTop=8;const e=this.chart.getChartElements();void 0!==(null==e?void 0:e.svg)&&e.svg.style("z-index",20)}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o;return da(this,void 0,void 0,(function*(){const s=yield this.getData(),a=null===(e=null==s?void 0:s.parsed)||void 0===e?void 0:e.data;if(void 0===a)return;const l=this.getAccessorAtAxis("x"),u=null===(n=s.parsed)||void 0===n?void 0:n.accessors.y;if(void 0===l||void 0===u)return;const c=null===(i=s.parsed)||void 0===i?void 0:i.accessors.y2,h=this.dimensions,d=h.y.property,f=h.y.label,v=this.dimensions.y2.property,g=this.dimensions.y2.label,p=this.chart,y=p.getChartElements();if(void 0===y||null===y.svg||void 0===d||void 0===f)return;void 0!==y.svg.select("g")&&y.svg.select("g").remove();let{height:x}=p.settings,m=p.getWidth();m=Number(m),x=Number(x);const _=void 0===v?0:1,w=24*_,b=36*_*_+w,A=x-48-this.legendHeight-this.legendPaddingTop-4,S=m-36-24-b,M=m-S-b,k=m-b,C=a.map((t=>l(t))),D=[d];void 0!==v&&void 0!==c&&D.push(v);const E=ni(null!==(o=null===(r=this.style)||void 0===r?void 0:r.colors)&&void 0!==o?o:Fi).domain(D),T=y.svg.insert("g"),$=this.getXScale(M,k,C),N=this.getYScale(A,4,a,u),P=this.getY2Scale(A,4,a,c),L=this.getSubgroupScales(d,N,v,P),R=ii().domain(D).range([0,$.bandwidth()]).padding(.05);var Y;T.append("g").attr("width",S).attr("height",A).selectAll("g").data(a).enter().append("g").attr("transform",(t=>`translate(${Number($(l(t)))}, 0)`)).selectAll("rect").data((t=>Object.keys(this.dimensions).filter((t=>"x"!==t)).map((e=>{var n,i,r,o,s;return{label:null!==(n=this.dimensions[e].label)&&void 0!==n?n:e,key:null!==(i=this.dimensions[e].property)&&void 0!==i?i:"",x:t[null!==(o=null===(r=this.dimensions.x)||void 0===r?void 0:r.property)&&void 0!==o?o:"x"],value:t[null!==(s=this.dimensions[e].property)&&void 0!==s?s:""]}})))).enter().append("rect").attr("x",(t=>Number(R(t.key)))).attr("y",(t=>Number(L[t.key](t.value)))).attr("width",R.bandwidth()).attr("height",(t=>A-Number(L[t.key](t.value)))).attr("fill",(t=>E(t.key))).classed("bar",!0).on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})),T.append("g").attr("transform",`translate(0, ${A})`).call(Wt($)).selectAll("text").attr("text-anchor","end").attr("transform","rotate(-45)translate(-10, 0)"),T.append("g").call(qt(N)).attr("transform","translate(60, 0)"),void 0!==P&&T.append("g").call((Y=P,It(Rt,Y))).attr("transform",`translate(${m-b}, 0)`),T.append("text").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("x",-1*A/2).attr("y",24).attr("font-weight",800).text(f),void 0!==g&&T.append("text").attr("text-anchor","middle").attr("transform","rotate(90)").attr("x",1*A/2).attr("y",-1*(m-w)).attr("font-weight",800).text(g),t.onLegendReady.call(this,Object.keys(this.dimensions).filter((t=>"x"!==t)).map((t=>{var e,n;return{id:t,label:null!==(e=this.dimensions[t].label)&&void 0!==e?e:t,style:{backgroundColor:void 0===this.dimensions[t].property?"":E(null!==(n=this.dimensions[t].property)&&void 0!==n?n:"")}}})))}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.x},y:{position:t.offsetY,value:e.value}})}getXScale(t,e,n){return ii().domain(n).range([t,e]).padding(.25)}getYScale(t,e,n,i){return Yi().domain([0,Number(St(n,(t=>i(t))))]).range([t,e])}getY2Scale(t,e,n,i){if(void 0!==i)return this.getYScale(t,e,n,i)}getSubgroupScales(t,e,n,i){const r={[t]:e};return void 0!==n&&void 0!==i&&(r[n]=i),r}}};!function(t,e){void 0===e&&(e={});var n=e.insertAt;if(t&&"undefined"!=typeof document){var i=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===n&&i.firstChild?i.insertBefore(r,i.firstChild):i.appendChild(r),r.styleSheet?r.styleSheet.cssText=t:r.appendChild(document.createTextNode(t))}}(".chart .axis .tick text{\r\n    fill:#333;\r\n    font-size:12px;\r\n}\r\n\r\n.chart .y-axis .radial-axis .tick text{\r\n    stroke:#FFF;\r\n    stroke-width:5px;\r\n    paint-order: stroke;\r\n    font-size:14px;\r\n    fill:#000;\r\n\r\n}\r\n\r\n.chart .axis .tick line,\r\n.chart .axis .tick circle{\r\n    stroke:#CCC;\r\n    stroke-width:.5px;\r\n}");class ma extends va{updateD3AxisSettings(t,e){void 0!==e.ticks&&t.ticks(e.ticks),void 0!==e.tickFormat&&t.tickFormat(e.tickFormat)}getD3Scale(t){const e=t.domain[0]instanceof Date?function(){return Qn.apply(Zs(wo,bo,mo,yo,lo,Qr,Zr,Br,Wr,Eo).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}().domain(t.domain).range(t.range):Yi().domain(t.domain).range(t.range);return e}getD3YScale(t){return this.getD3Scale(t)}getD3XScale(t){return this.getD3Scale(t)}getYAxis(t,e,n){if(void 0===t.scale)return t=>t;const i=qt(this.getD3YScale(t.scale));this.updateD3AxisSettings(i,e);const r=t.scale.range[1]-t.scale.range[0],o=Math.min(r/2,void 0!==e.tickSpace?e.tickSpace:50);i.ticks(Math.floor(r/o));const s=this.getyAxisOffset(t);return t=>{const e=t.attr("transform",`translate(${s.x},${s.y})`).call(i);return e.select(".domain").remove(),e}}getXAxis(t,e){if(void 0===t.scale)return t=>t;const n=Wt(this.getD3XScale(t.scale));this.updateD3AxisSettings(n,e);const i=t.scale.range[1]-t.scale.range[0],r=Math.min(i/2,void 0!==e.tickSpace?e.tickSpace:50);void 0===e.ticks&&n.ticks(Math.floor(i/r));const o=this.getXAxisOffset(t);return t=>{const e=t.attr("transform",`translate(${o.x},${o.y+1})`).call(n);return e.select(".domain").remove(),e}}adjustYAxis(){console.log("here");const t=this.getChartElements();if(void 0===t)return;const{svg:e,canvas:n}=t;let i=e.selectAll(".y-axis").nodes()[0];null!=i&&(console.log(i),e.selectAll(".y-axis").attr("translate","transform(100px, 100px)").attr("width",100),n.attr("width",this.getWidth()-45.7),n.attr("transform","translate(45.7, 0)"))}showYAxes(t){const e=this.getChartElements();if(void 0===e)return;const{svg:n}=e;t.forEach(((t,e)=>{const i={};if(void 0!==(null==t?void 0:t.scale)){const r=this.getYAxis(t,i,e),o=(n.select(".y-axis").size()>0?n.select(".y-axis"):n.append("g").attr("class","y-axis axis")).append("g").call(r);if(t.plots.length!==this.plots.length){const e=this.getAxisColor(t);o.attr("stroke",e)}}})),"timeseries"===this.settings.layout&&this.showYLabelsForTimeSeries(t,this.plots)}getAxisLabel(t,e){var n;return null===(n=t.plots[0])||void 0===n?void 0:n.dimensions[e].label}showYLabelsForTimeSeries(t,e){const n=void 0!==[ia.line,ia.scatter,ia.seasonal,ia.area].find((t=>t===e[0].type));if(0===e.length||!n)return;const i=this.getChartElements();if(void 0===i)return;const{svg:r}=i,o=r.select(".y-axis").size()>0?r.select(".y-axis"):r.append("g").attr("class","y-axis axis");t.forEach((t=>{var e;o.append("text").attr("class","y-label").attr("transform","rotate(-90)").style("text-anchor","middle").attr("x",-1*Math.floor(this.getChartHeight()/2)).attr("y",""+(this.getyAxisOffset(t).x-24-3)).attr("font-size",".75rem").text(null!==(e=this.getAxisLabel(t,"y"))&&void 0!==e?e:"")}))}getXAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.height+this.settings.margin.top},t.offset)}getyAxisOffset(t){return Object.assign({x:this.settings.margin.left,y:this.settings.margin.top},t.offset)}showXAxes(t){const e=this.getChartElements();if(void 0===e)return;const{svg:n}=e;t.forEach(((t,e)=>{var i;if(void 0!==(null==t?void 0:t.scale)){const e=void 0===this.settings.axes?{}:null!==(i=this.settings.axes[t.key])&&void 0!==i?i:{},r=this.getXAxis(t,e),o=(n.select(".x-axis").size()>0?n.select(".x-axis"):n.append("g").attr("class","x-axis axis")).append("g").call(r);if(t.plots.length!==this.plots.length){const e=this.getAxisColor(t);o.attr("stroke",e)}}}))}getCanvasContext(){const t=this.getChartElements();if(void 0!==t){const{canvas:e}=t,n=e.node();if(null!=n)return n.getContext("2d")}return null}onResize(t,e){if("auto"===this.settings.width){const{height:n}=this.settings,i=this.getWidth(),r=this.getCanvasContext();if(!0===this.runtime.busy||null===r||void 0===this.chartElements||void 0===r||t===i&&e===n)console.log("skipping resize!");else{this.runtime.busy=!0;const{svg:t,canvas:e}=this.chartElements;t.selectAll("*").remove(),t.attr("viewBox",[0,0,i,n]).attr("width",i),r.clearRect(0,0,+e.attr("width"),+e.attr("height")),e.attr("width",i).attr("height",n),this.init(!0).then((()=>{this.runtime.busy=!1,console.log("drawn")})).catch((t=>{this.onError(t)}))}}}getChartElements(){if(void 0!==this.chartElements)return this.chartElements;const{height:t}=this.settings,e=this.getWidth(),n=mt("svg").attr("viewBox",[0,0,e,t]).attr("width",e).attr("height",t).style("position","absolute").style("z-index",20),i=mt("canvas").attr("width",e).attr("height",t).style("position","absolute");if(null!==i&&null!==n){this.chartElements={canvas:i,svg:n};const t=this.getCanvasContext();null!==t&&(t.imageSmoothingQuality="high")}return this.chartElements}drawPlotScrubbing(t,e,n,i){const r=this.getChartElements();if(void 0===r)return;if(void 0===e||void 0===e.x||void 0===e.y)return;const{x:o,y:s}=e;this.drawScrubLine(t,e,r.svg,n,i),this.drawPlotScrubCircle(t,null==o?void 0:o.position,null==s?void 0:s.position,r.svg,n)}drawScrubLine(t,e,n,i,r){var o,s,a,l,u,c,h,d;const f=this.getPlotScrubLineClass(t);n.selectAll(`.${f}`).remove();const v=n.insert("line").classed(f,!0);if((null==r?void 0:r.axis)===na.x){const t=this.settings.height-this.settings.margin.bottom;v.attr("x1",null!==(s=null===(o=e.x)||void 0===o?void 0:o.position)&&void 0!==s?s:0).attr("y1",0).attr("x2",null!==(l=null===(a=e.x)||void 0===a?void 0:a.position)&&void 0!==l?l:0).attr("y2",t).attr("stroke",this.getPlotStrokeColor(i)).style("stroke-width",this.getPlotStrokeWidth(i))}else{const t=this.getChartWidth(),n=t-this.settings.margin.left;v.attr("x1",this.settings.margin.left).attr("y1",null!==(c=null===(u=e.y)||void 0===u?void 0:u.position)&&void 0!==c?c:0).attr("x2",t+n).attr("y2",null!==(d=null===(h=e.y)||void 0===h?void 0:h.position)&&void 0!==d?d:0).attr("stroke",this.getPlotStrokeColor(i)).style("stroke-width",this.getPlotStrokeWidth(i))}}drawPlotScrubCircle(t,e,n,i,r){i.selectAll(`.${this.getPlotScrubCircleClass(t)}`).remove(),i.insert("circle").classed(this.getPlotScrubCircleClass(t),!0).attr("r",6).attr("cx",e).attr("cy",n).style("stroke",this.getPlotStrokeColor(r)).style("stroke-width",this.getPlotStrokeWidth(r)).style("fill-opacity","0")}erasePlotScrub(t){void 0!==this.chartElements&&(this.chartElements.svg.select(`.${this.getPlotScrubCircleClass(t)}`).remove(),this.chartElements.svg.select(`.${this.getPlotScrubLineClass(t)}`).remove())}getScrubEvent(t,e,n,i,r,o,s,a){let l,u,c,h,d;e===na.x?(l=t.offsetX,u=a.x,c=n,h=r,d=o):(l=t.offsetY,u=a.y,c=i,h=o,d=r);const f=c.invert(l-u),v=(0,bt((t=>h(t))).center)(s,f),g=this.getDataRowNearestToScrub(v,f,s,d,h),p=r(g),y=n(p)+a.x,x=o(g);return{x:{position:y,value:p},y:{position:i(x)+a.y,value:x}}}getDataRowNearestToScrub(t,e,n,i,r){const o=n.filter((t=>null!==i(t)&&void 0!==i(t)));let s=Number.MAX_VALUE,a=n[t];for(let t=0;t<o.length;t+=1){const n=r(o[t]),i=Math.abs(+n-+e);i<s&&(s=i,a=o[t])}return a}getPlotStrokeColor(t){var e;return null!==(e=null==t?void 0:t.strokeColor)&&void 0!==e?e:"#333"}getAxisColor(t){var e,n;let i=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.fill)}));return void 0!==i?null===(e=i.style)||void 0===e?void 0:e.fill:(i=t.plots.find((t=>{var e;return void 0!==(null===(e=t.style)||void 0===e?void 0:e.strokeColor)})),void 0!==i?null===(n=i.style)||void 0===n?void 0:n.strokeColor:"#000")}getPlotStrokeWidth(t){var e;return null!==(e=null==t?void 0:t.strokeWidth)&&void 0!==e?e:1}getPlotScrubCircleClass(t){return`${t}-scrub-circle`}getPlotScrubLineClass(t){return`${t}-scrub-line`}attachChartElements(){const t=this.getChartElements();if(void 0!==this.element&&void 0!==t){const{svg:e,canvas:n}=t,i=null==e?void 0:e.node(),r=null==n?void 0:n.node();null!==i&&null!==r&&(this.element.innerHTML="",this.element.append(i),this.element.append(r))}}createPlot(t){const e=this.getPlotImplementationProps(t);return t.type===ia.line?new xa.Line(e):t.type===ia.area?new xa.Area(e):t.type===ia.scatter?new xa.Scatter(e):t.type===ia.bar?new xa.Bar(e):new fa(e)}clearCanvas(){const t=this.getCanvasContext();null!==t&&t.clearRect(0,0,t.canvas.width,t.canvas.height)}init(t=!1){const e=Object.create(null,{init:{get:()=>super.init}});return da(this,void 0,void 0,(function*(){yield e.init.call(this,t),this.attachChartElements()}))}destroy(){console.log("destroy"),this.chartElements=void 0,super.destroy()}}class _a extends pa{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l;return da(this,void 0,void 0,(function*(){const u=void 0!==this.style?this.style:{},c=yield this.getData(),h=null===(e=null==c?void 0:c.parsed)||void 0===e?void 0:e.data,d=this.getAccessorAtAxis("x"),f=this.getAccessorAtAxis("y"),v=this.chart,g=v.getChartElements();if(void 0===g||null===g.svg)return;const p=g.svg,y=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,x=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===y||void 0===x||void 0===h||void 0===d||void 0===f)return;const m=v.getD3RadialXScale(y),_=v.getD3RadialYScale(x),w=la().angle((t=>{const e=d(t),n=m(e);return void 0===n?0:n})).radius((t=>{const e=f(t),n=_(e);return void 0===n?0:n})).curve(ha),b=h.slice(),A=v.getChartOffset(),S=void 0!==u.strokeColor?u.strokeColor:"#333";p.append("g").attr("transform",`translate(${A.x},${A.y})`).attr("class","radial-line").append("path").attr("fill","none").attr("stroke",S).attr("stroke-width",void 0!==u.strokeWidth?u.strokeWidth:1).attr("d",w(b)),void 0===(null===(s=this.axes)||void 0===s?void 0:s.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=v.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:S}}])}))}}class wa extends pa{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l;return da(this,void 0,void 0,(function*(){const u=yield this.getData(),c=null===(e=null==u?void 0:u.parsed)||void 0===e?void 0:e.data,h=this.getAccessorAtAxis("x"),d=this.getAccessorAtAxis("y"),f=this.chart,v=f.getChartElements();if(void 0===v||null===v.svg)return;const g=v.svg,p=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,y=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===p||void 0===y||void 0===c||void 0===h||void 0===d)return;const x=f.getD3RadialXScale(p),m=f.getD3RadialYScale(y),_=g.append("g").attr("transform",`translate(${f.getChartSize()/2},${f.getChartSize()/2})`).attr("class","radial-scatter"),w=void 0!==this.style?this.style:{},b=void 0!==w.radius?w.radius:2,A=void 0!==w.fill?w.fill:"#333",S=void 0!==w.strokeColor?w.strokeColor:"#CCC";c.forEach((t=>{const e=(n=(t=>{const e=h(t),n=x(e);return void 0===n?0:n})(t),i=(t=>{const e=d(t),n=m(e);return void 0===n?0:n})(t),[(i=+i)*Math.cos(n-=Math.PI/2),i*Math.sin(n)]);var n,i;_.append("circle").attr("r",2*b).attr("fill",A).attr("stroke",S).attr("stroke-width",void 0!==w.strokeWidth||void 0!==w.strokeColor?void 0!==w.strokeWidth?w.strokeWidth:1:0).attr("cx",e[0]+f.settings.margin.left).attr("cy",e[1]+f.settings.margin.top)})),void 0===(null===(s=this.axes)||void 0===s?void 0:s.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=f.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:A,border:`1px solid ${S}`}}])}))}}class ba extends ya{draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s,a,l;return da(this,void 0,void 0,(function*(){const u=void 0!==this.style?this.style:{},c=yield this.getData(),h=null===(e=null==c?void 0:c.parsed)||void 0===e?void 0:e.data,d=this.getAccessorsAtAxis("x"),f=this.getAccessorAtAxis("x"),v=d.x0,g=d.x1,p=this.getAccessorsAtAxis("y"),y=this.getAccessorAtAxis("y"),x=p.y0,m=p.y1,_=this.chart,w=_.getChartElements();if(void 0===w||null===w.svg)return;const b=w.svg,A=null===(i=null===(n=null==this?void 0:this.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.scale,S=null===(o=null===(r=null==this?void 0:this.axes)||void 0===r?void 0:r.y)||void 0===o?void 0:o.scale;if(void 0===A||void 0===S||void 0===h||void 0===f&&void 0===v&&void 0===g||void 0===y&&void 0===x&&void 0===m)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");const M=_.getD3RadialXScale(A),k=_.getD3RadialYScale(S),C=(t,e)=>n=>{const i=t(n),r=e(i);return void 0===r?0:r};if(void 0===f||void 0===x||void 0===m)return;const D=(T=ea().curve(ra),$=T.curve,N=T.lineX0,P=T.lineX1,L=T.lineY0,R=T.lineY1,T.angle=T.x,delete T.x,T.startAngle=T.x0,delete T.x0,T.endAngle=T.x1,delete T.x1,T.radius=T.y,delete T.y,T.innerRadius=T.y0,delete T.y0,T.outerRadius=T.y1,delete T.y1,T.lineStartAngle=function(){return aa(N())},delete T.lineX0,T.lineEndAngle=function(){return aa(P())},delete T.lineX1,T.lineInnerRadius=function(){return aa(L())},delete T.lineY0,T.lineOuterRadius=function(){return aa(R())},delete T.lineY1,T.curve=function(t){return arguments.length?$(sa(t)):$()._curve},T).angle(C(f,M)).innerRadius(C(x,k)).outerRadius(C(m,k)).defined((E=m,t=>{const e=E(t);return!(null==e||isNaN(+e))})).curve(ha);var E,T,$,N,P,L,R;const Y=h.slice(),O=_.getChartOffset(),U=void 0!==u.fill?u.fill:"#EDEDED99";b.insert("g","g.axis").attr("transform",`translate(${O.x},${O.y})`).attr("class","radial-area").append("path").attr("fill",U).attr("stroke-width",void 0!==u.strokeWidth?u.strokeWidth:1).attr("d",D(Y)),void 0===(null===(s=this.axes)||void 0===s?void 0:s.y)||null!==(a=this.legendSettings.hide)&&void 0!==a&&a||t.onLegendReady.call(this,[{id:this.axes.y.key,label:null!==(l=_.getAxisLabel(this.axes.y,"y"))&&void 0!==l?l:this.axes.y.key,style:{backgroundColor:U}}])}))}}class Aa extends ga{constructor(){super(...arguments),this.data=void 0,this.numBins=16,this.speedBins=Mt(1,8,1),this.stacks=void 0,this.directionMode="to"}setStackedData(){var t,e,n;return da(this,void 0,void 0,(function*(){let i=[];void 0===this.data&&(this.data=yield this.getData(),i=null!==(e=null===(t=this.data.parsed)||void 0===t?void 0:t.data)&&void 0!==e?e:[]);const r=null===(n=this.data.parsed)||void 0===n?void 0:n.accessors.y;void 0===this.stacks&&void 0!==r&&(this.stacks=this.getStackedData(i,r))}))}getDomain(t){return da(this,void 0,void 0,(function*(){return yield this.setStackedData(),void 0===this.stacks?[0,10]:[0,this.getMaxStackTotal(this.stacks)]}))}getStackedData(t,e){const n=360/this.numBins,i=Mt(0,360,n),r=t.map((t=>t.value));this.speedBins=Tt(function(t,e){let n;for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);return n}(r),St(r),5);const o=[];return i.forEach((t=>{const e={minDirection:t};this.speedBins.forEach((t=>{e[t]=0})),o.push(e)})),t.forEach((t=>{const i=Math.floor(t.direction/n),r=o[i],s=Number(e(t)),a=this.speedBins.find((t=>s<t));void 0!==a&&(r[a]+=1)})),o}getMaxStackTotal(t){var e;return null!==(e=St(t,(t=>this.speedBins.reduce(((e,n)=>e+t[n]),0))))&&void 0!==e?e:0}draw(){const t=Object.create(null,{onLegendReady:{get:()=>super.onLegendReady}});var e,n,i,r,o,s;return da(this,void 0,void 0,(function*(){const a=this.getAccessorsAtAxis("x"),l=this.getAccessorAtAxis("x"),u=a.x0,c=a.x1,h=this.getAccessorsAtAxis("y"),d=this.getAccessorAtAxis("y"),f=h.y0,v=h.y1;yield this.setStackedData();const g=this.chart,p=g.getChartElements();if(void 0===p||null===p.svg)return;const y=p.svg,x=null===(n=null===(e=null==this?void 0:this.axes)||void 0===e?void 0:e.x)||void 0===n?void 0:n.scale,m=null===(r=null===(i=null==this?void 0:this.axes)||void 0===i?void 0:i.y)||void 0===r?void 0:r.scale;if(void 0===x||void 0===m||void 0===l&&void 0===u&&void 0===c||void 0===d&&void 0===f&&void 0===v)return void console.log("Missing one of: xAxisScale, yAxisScale, parsedData, xAccessor(s), yAccessor(s)");if(void 0===this.stacks||void 0===this.speedBins)return;const _=this.getMaxStackTotal(this.stacks),w=ii().domain(Mt(0,360,360/this.numBins)).range([0,2*Math.PI]),b=Ui().domain([0,_]).range([g.getInnerRadius(),g.getOuterRadius()]),A=null!==(s=null===(o=this.style)||void 0===o?void 0:o.colors)&&void 0!==s?s:Fi,S=ni().range(A),M=function(){var t=ji([]),e=$r,n=Tr,i=Nr;function r(r){var o,s,a=Array.from(t.apply(this,arguments),Pr),l=a.length,u=-1;for(const t of r)for(o=0,++u;o<l;++o)(a[o][u]=[0,+i(t,a[o].key,u,r)]).data=t;for(o=0,s=Er(e(a));o<l;++o)a[s[o]].index=o;return n(a,s),a}return r.keys=function(e){return arguments.length?(t="function"==typeof e?e:ji(Array.from(e)),r):t},r.value=function(t){return arguments.length?(i="function"==typeof t?t:ji(+t),r):i},r.order=function(t){return arguments.length?(e=null==t?$r:"function"==typeof t?t:ji(Array.from(t)),r):e},r.offset=function(t){return arguments.length?(n=null==t?Tr:t,r):n},r}().keys(this.speedBins.map((t=>String(t))))(this.stacks);M.forEach(((t,e)=>{t.forEach((t=>{t.bin={index:e,label:this.speedBins[e]}}))}));const k=g.getChartOffset(),C=2*Math.PI/this.numBins,D=t=>{const e="from"===this.directionMode?w(t):w((t+180)%360);return(null!=e?e:0)-C/2},E=t=>{const e="from"===this.directionMode?w(t):w((t+180)%360);return(null!=e?e:0)+C/2};y.insert("g","g.axis").attr("transform",`translate(${k.x},${k.y})`).selectAll("g").data(M).enter().append("g").attr("fill",(t=>S(t.key))).selectAll("path").data((t=>t)).enter().append("path").on("mouseover",((t,e)=>{this.onMouseScrub(t,e)})).on("mousemove",((t,e)=>{this.onMouseScrub(t,e)})).on("mouseleave",(()=>{this.onScrubEnd()})).attr("d",function(){var t=sr,e=ar,n=ji(0),i=null,r=lr,o=ur,s=cr,a=null,l=or(u);function u(){var u,c,h,d=+t.apply(this,arguments),f=+e.apply(this,arguments),v=r.apply(this,arguments)-Gi,g=o.apply(this,arguments)-Gi,p=Xi(g-v),y=g>v;if(a||(a=u=l()),f<d&&(c=f,f=d,d=c),f>Vi)if(p>Qi-Vi)a.moveTo(f*zi(v),f*qi(v)),a.arc(0,0,f,v,g,!y),d>Vi&&(a.moveTo(d*zi(g),d*qi(g)),a.arc(0,0,d,g,v,y));else{var x,m,_=v,w=g,b=v,A=g,S=p,M=p,k=s.apply(this,arguments)/2,C=k>Vi&&(i?+i.apply(this,arguments):Bi(d*d+f*f)),D=Wi(Xi(f-d)/2,+n.apply(this,arguments)),E=D,T=D;if(C>Vi){var $=Ji(C/d*qi(k)),N=Ji(C/f*qi(k));(S-=2*$)>Vi?(b+=$*=y?1:-1,A-=$):(S=0,b=A=(v+g)/2),(M-=2*N)>Vi?(_+=N*=y?1:-1,w-=N):(M=0,_=w=(v+g)/2)}var P=f*zi(_),L=f*qi(_),R=d*zi(A),Y=d*qi(A);if(D>Vi){var O,U=f*zi(w),F=f*qi(w),j=d*zi(b),X=d*qi(b);if(p<Zi)if(O=function(t,e,n,i,r,o,s,a){var l=n-t,u=i-e,c=s-r,h=a-o,d=h*l-c*u;if(!(d*d<Vi))return[t+(d=(c*(e-o)-h*(t-r))/d)*l,e+d*u]}(P,L,j,X,U,F,R,Y)){var H=P-O[0],z=L-O[1],I=U-O[0],W=F-O[1],q=1/qi(((h=(H*I+z*W)/(Bi(H*H+z*z)*Bi(I*I+W*W)))>1?0:h<-1?Zi:Math.acos(h))/2),B=Bi(O[0]*O[0]+O[1]*O[1]);E=Wi(D,(d-B)/(q-1)),T=Wi(D,(f-B)/(q+1))}else E=T=0}M>Vi?T>Vi?(x=hr(j,X,P,L,f,T,y),m=hr(U,F,R,Y,f,T,y),a.moveTo(x.cx+x.x01,x.cy+x.y01),T<D?a.arc(x.cx,x.cy,T,Hi(x.y01,x.x01),Hi(m.y01,m.x01),!y):(a.arc(x.cx,x.cy,T,Hi(x.y01,x.x01),Hi(x.y11,x.x11),!y),a.arc(0,0,f,Hi(x.cy+x.y11,x.cx+x.x11),Hi(m.cy+m.y11,m.cx+m.x11),!y),a.arc(m.cx,m.cy,T,Hi(m.y11,m.x11),Hi(m.y01,m.x01),!y))):(a.moveTo(P,L),a.arc(0,0,f,_,w,!y)):a.moveTo(P,L),d>Vi&&S>Vi?E>Vi?(x=hr(R,Y,U,F,d,-E,y),m=hr(P,L,j,X,d,-E,y),a.lineTo(x.cx+x.x01,x.cy+x.y01),E<D?a.arc(x.cx,x.cy,E,Hi(x.y01,x.x01),Hi(m.y01,m.x01),!y):(a.arc(x.cx,x.cy,E,Hi(x.y01,x.x01),Hi(x.y11,x.x11),!y),a.arc(0,0,d,Hi(x.cy+x.y11,x.cx+x.x11),Hi(m.cy+m.y11,m.cx+m.x11),y),a.arc(m.cx,m.cy,E,Hi(m.y11,m.x11),Hi(m.y01,m.x01),!y))):a.arc(0,0,d,A,b,y):a.lineTo(R,Y)}else a.moveTo(0,0);if(a.closePath(),u)return a=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,i=(+r.apply(this,arguments)+ +o.apply(this,arguments))/2-Zi/2;return[zi(i)*n,qi(i)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:ji(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:ji(+t),u):n},u.padRadius=function(t){return arguments.length?(i=null==t?null:"function"==typeof t?t:ji(+t),u):i},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:ji(+t),u):r},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:ji(+t),u):o},u.padAngle=function(t){return arguments.length?(s="function"==typeof t?t:ji(+t),u):s},u.context=function(t){return arguments.length?(a=null==t?null:t,u):a},u}().innerRadius((t=>b(t[0]))).outerRadius((t=>b(t[1]))).startAngle((t=>D(t.data.minDirection))).endAngle((t=>E(t.data.minDirection))).padAngle(.01).padRadius(g.getInnerRadius())),t.onLegendReady.call(this,M.map(((t,e)=>{var n,i;return{id:t.key,label:`< ${this.speedBins[e]} ${null!==(i=null===(n=this.dimensions.z.displayUnits)||void 0===n?void 0:n.label)&&void 0!==i?i:""}`,style:{backgroundColor:S(t.key)}}})))}))}onMouseScrub(t,e){void 0!==this.chart.onPlotScrub&&this.onScrub({x:{position:t.offsetX,value:e.data.angle},y:{position:t.offsetY,value:Object.assign({},e)}})}}const Sa={box:class extends fa{draw(){return da(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}},line:class extends fa{draw(){return da(this,void 0,void 0,(function*(){console.log("line: draw method not implemented")}))}}},Ma=Object.assign(Object.assign({},Sa),{line:pa}),ka={Chart:ma,RadialChart:class extends ma{getInnerRadius(){return this.getChartSize()/5}getOuterRadius(){return this.getChartSize()/2}getXRange(t){return[0,2*Math.PI]}getYRange(t){return[this.getInnerRadius(),this.getOuterRadius()]}getYAxesWidth(){return this.settings.margin.left}getChartSize(){const t=this.getWidth()-this.settings.margin.left-this.settings.margin.right,e=this.settings.height-this.settings.margin.top-this.settings.margin.bottom;return Math.min(t,e)}getChartWidth(){return this.getChartSize()}getChartHeight(){return this.getChartSize()}getD3RadialYScale(t){return Ui().domain(t.domain).range(t.range)}getD3RadialXScale(t,e=12){const n=2*Math.PI,i=super.getD3XScale(t);return i.range([0,n-n/e]),i}getYAxis(t,e,n){if(void 0===t.scale)return t=>t;const i=this.getyAxisOffset(t),r=this.getD3RadialYScale(t.scale),o=r.tickFormat(),s=r.range()[1]-r.range()[0],a=Math.floor(s/30),l=r.ticks(a).map(o),u=t=>Number(t.replace(/,/g,""));return t=>{const e=0!==n&&n%2!=0?1:-1;return t.attr("class","radial-axis").attr("transform",`translate(${i.x},${i.y})`).attr("text-anchor","middle").selectAll().data(l.reverse()).join("g").attr("class","tick").call((t=>n>0?t:t.append("circle").attr("fill","none").attr("stroke","currentColor").attr("r",(t=>r(u(t)))))).call((t=>t.append("text").attr("y",(t=>e*r(u(t)))).attr("dy","0.35em").attr("stroke","#FFF").attr("strokewidth",5).attr("paint-order","stroke").attr("transform",`rotate(${n>1?-20*(n-1):0})`).text(((t,e)=>`${String(t)}`)))),t}}getChartOffset(){return{x:this.settings.margin.left+this.getChartSize()/2,y:this.settings.margin.top+this.getChartSize()/2}}getXAxisOffset(t){return this.getChartOffset()}getyAxisOffset(t){return this.getChartOffset()}getXAxis(t,e){var n,i,r;if(void 0===t.scale)return t=>t;const o=this.getInnerRadius(),s=this.getOuterRadius(),a=this.getXAxisOffset(t),l=this.getD3RadialXScale(t.scale),u=l.tickFormat(),c=null!==(r=null===(i=null===(n=this.settings.axes)||void 0===n?void 0:n.x)||void 0===i?void 0:i.ticks)&&void 0!==r?r:l.ticks().map(u);return t=>(t.append("g").attr("class","radial-axis").attr("transform",`translate(${a.x},${a.y}) rotate(-90)`).attr("text-anchor","left").call((t=>t.selectAll("g").data(c).join("g").attr("transform",((t,e,n)=>{return`\n            rotate(${i=e,r=n.length,360*i/r})\n            translate(${o},0)\n          `;var i,r})).attr("class","tick").call((t=>t.append("line").attr("x1",-5).attr("x2",s-o+10))).call((t=>t.append("text").attr("text-anchor","middle").attr("transform","rotate(90)translate(0,16)").text((t=>t)))))),t)}createPlot(t){const e=this.getPlotImplementationProps(t);return"line"===t.type?new _a(e):"scatter"===t.type?new wa(e):"area"===t.type?new ba(e):"windrose"===t.type?new Aa(e):new _a(e)}},plotTypes:Ma}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,